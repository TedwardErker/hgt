#+TITLE: Urban Tree Height 
#+AUTHOR: erker
#+email: erker@wisc.edu
#+PROPERTY:  header-args:R :cache no :results output :exports both :comments link :session *R:hgt* :eval yes
#+PROPERTY:  header-args:sh :eval yes
#+startup: indent entitiespretty
#+FILETAGS: work allo
#+HTML_HEAD: <link rel="stylesheet" href="main.css" type="text/css">
#+OPTIONS: toc:nil num:t date:t author:nil
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{natbib}
#+LATEX_HEADER: \usepackage{chemformula}
#+latex_header: \usepackage{adjustbox}
#+LaTeX_HEADER: \RequirePackage{lineno} \def\linenumberfont{\normalfont\small\tt}
#+LATEX_HEADER: \hypersetup{colorlinks=true,linkcolor=black, citecolor=black, urlcolor=black}
#+latex_header: \usepackage{setspace} \doublespacing
#+LATEX_CLASS_OPTIONS: [12pt]
---------------------

* Introduction

- Why important
  - Urban environments are unique
  - Trees there provide services, one of which is carbon sequestration
    via growth
- Context
  - there is incredible variability in urban tree growth across a city
    due to variability in environment, and species
  - Remote sensing technology, specifically repeat lidar and imaging
    spectroscopy, allow for measurements of growth (from repeat lidar)
    for thousands of trees, which then can be combined with indicies
    of foliar traits (from imaging spectroscopy) to create large data
    for understanding urban tree growth
- Questions
  - What is the distribution of rates of urban tree height growth for different
    species in Madison?
    - this is the variability that I would seek to explain with
      environmental and trait data.
  - Do foliar trait indicies derived from imaging spectroscopy explain
    any of the variability in tree growth rates?
  - Do environmental factors (proximity to road, age of road?, percent
    impervious within 100m,
- We hypothesize that we'll see effects expected from other studies
  - trees grow faster




* Methods

Using lidar from 2005, 2009, and 2016, we 

We 


create 

finding buildings: https://github.com/Jean-Romain/lidR/issues/209


2005 lidar might not be good enough for a general tree canopy layer,
but it should still be reliable for treee heights if I know the trees
location ( street trees).


** creating normalized lidar and doing best to filter out tree points
*** 2005 lidar
**** create lax
#+begin_src sh :session b
cd /media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+end_src

#+begin_src R
  library(lidR)
  l <- readLAS("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/tile014.las")
  plot(l, trim = 1000)
#+end_src


**** which have ground?
#+begin_src R
      library(stringr)
      f <- list.files("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/", pattern = ".*.las$", full.names = T)
      lapply(f, function(file) {
          i <- str_match(file, ".*tile([0-9]+).*.las$")[,2]
          l <- readLAS(file)
          n <- sum(l@data$Classification == 2)
          return(c(i, n))
    })
#+end_src

**** find ground
#+begin_src R
    ctg2005 <- catalog("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/")
    opt_output_files(ctg2005) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/ground/{ORIGINALFILENAME}_ground"
                                            #lasground(ctg2005, csf())
    ws = seq(6,24,6)
    th = seq(.1, 1.5, length.out = length(ws))

 lasground(ctg2005, pmf(ws, th))

  #  plot(ctg2005, map = T)


#+end_src

**** normalize
#+begin_src R :session *R2005*

  ctg2005ground <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/ground/")
  opt_output_files(ctg2005ground) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/{ORIGINALFILENAME}_normalized"
  lasnormalize(ctg2005ground, tin())

#+end_src

**** make lax for normalized
#+begin_src sh :session b
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+end_src

**** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
    ctg2005norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized")
    opt_output_files(ctg2005norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2005norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2005norm, res = 3, p2r(1))
#+end_src

#+RESULTS:
: Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
: Processing [>-------------------------------------------]   3% (1/34) eta: 39sError: filename exists; use overwrite=TRUE


#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../height_norm_2005.tif
#+END_SRC


**** get extents
#+begin_src R

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
  shapefile(p, "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/lidar_extents.shp")

#+end_src

#+RESULTS:


**** Get tree points
#+begin_src R
  library(lidR)
  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/"

  tile <- "tile014_ground_normalized.las"

  l <- readLAS(paste0(dir, tile), filter = "-drop_z_below 6")
  plot(l, trim = 100)

  e <- new("Extent", xmin = 826616.082997855, xmax = 828596.309091884, 
      ymin = 485978.641378534, ymax = 487311.522306307)

  l2 <- lasclip(l, e)

  writeLAS(l2, "test2005.las")


#+end_src

#+RESULTS:
: Error in rgl::rgl.setMouseCallbacks(button, begin, update, dev = dev,  : 
:   unused arguments (dev = dev, subscene = subscene)


#+begin_src R
  library(lidR)
  pct_x_is<- function(x, is) {
      return(list(pct_x = sum(x == is) / length(x)))
  }

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/"

  tiles.w.trees <- list.files(dir, 
                              pattern = ".*.las")


  lapply(tiles.w.trees, function(tile) {

      l <- readLAS(paste0(dir, tile), filter = "-drop_z_below 6")

      proj4string(l) <- "+init=epsg:7599"

      lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 9), "building")


      first.return.of.many <- (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1)
      lsp@data$building[first.return.of.many] <- FALSE

      pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 5)

      lsp@data$building[pm$pct_x <= .2] <- FALSE
      lsp@data$building[first.return.of.many] <- FALSE
  p
      lf <- lasfilter(lsp, building == FALSE)
      lfl <- lasdetectshape(lf, shp_line(th1 = 5, k = 8), "building")

      pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 20)

      lfl@data$building[pm$pct_x > .8] <- TRUE
      lfl@data$building[pm$pct_x < .2] <- FALSE
      lf <- lasfilter(lfl, building == FALSE)

      writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/trees_lidar/",tile))

  })

#+end_src

**** make lax
#+BEGIN_SRC sh :session a
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/trees_lidar
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+END_SRC

#+RESULTS:

**** tree chm
#+begin_src R
  library(lidR)
    ctg2005trees <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/trees_lidar")
    opt_output_files(ctg2005trees) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    chm <- grid_canopy(ctg2005trees, res = 3, p2r(1))
#+end_src

#+RESULTS:
: Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
: Processing [>-------------------------------------------]   3% (1/34) eta:  2mProcessing [==>-----------------------------------------]   6% (2/34) eta:  2mProcessing [===>----------------------------------------]   9% (3/34) eta:  2mProcessing [====>---------------------------------------]  12% (4/34) eta:  1mProcessing [=====>--------------------------------------]  15% (5/34) eta:  1mProcessing [=======>------------------------------------]  18% (6/34) eta:  1mProcessing [========>-----------------------------------]  21% (7/34) eta:  1mProcessing [=========>----------------------------------]  24% (8/34) eta:  1mProcessing [===========>--------------------------------]  26% (9/34) eta:  1mProcessing [============>------------------------------]  29% (10/34) eta:  1mProcessing [=============>-----------------------------]  32% (11/34) eta: 50sProcessing [==============>----------------------------]  35% (12/34) eta: 46sProcessing [===============>---------------------------]  38% (13/34) eta: 45sProcessing [=================>-------------------------]  41% (14/34) eta: 45sProcessing [==================>------------------------]  44% (15/34) eta: 43sProcessing [===================>-----------------------]  47% (16/34) eta: 42sProcessing [=====================>---------------------]  50% (17/34) eta: 38sProcessing [======================>--------------------]  53% (18/34) eta: 36sProcessing [=======================>-------------------]  56% (19/34) eta: 35sProcessing [========================>------------------]  59% (20/34) eta: 33sProcessing [==========================>----------------]  62% (21/34) eta: 31sProcessing [===========================>---------------]  65% (22/34) eta: 29sProcessing [============================>--------------]  68% (23/34) eta: 27sProcessing [=============================>-------------]  71% (24/34) eta: 25sProcessing [===============================>-----------]  74% (25/34) eta: 22sProcessing [================================>----------]  76% (26/34) eta: 19sProcessing [=================================>---------]  79% (27/34) eta: 17sProcessing [==================================>--------]  82% (28/34) eta: 15sProcessing [====================================>------]  85% (29/34) eta: 13sProcessing [=====================================>-----]  88% (30/34) eta: 10sProcessing [======================================>----]  91% (31/34) eta:  8sProcessing [=======================================>---]  94% (32/34) eta:  5sProcessing [=========================================>-]  97% (33/34) eta:  2sProcessing [===========================================] 100% (34/34) eta:  0s

#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tree_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../tree_height_norm_2005.tif
#+END_SRC

*** 2009 lidar

**** get tiles just over the tree inventory
This lidar covers all of dane county.  Only get the tiles that
intersect with the madison tree inventory.

#+name: tiles
#+begin_src R
    library(raster)
    library(rgeos)
    trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
    tiles <- shapefile("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/TileIndex/StudyArea.shp")

    trees <- spTransform(trees, crs(tiles))

    o <- over(trees, tiles)
    o <- unique(o)

  tiles <- na.omit(o$LASClass)

#+end_src

#+RESULTS: tiles


**** find ground
#+begin_src R
library(lidR)

  lapply(tiles[37:101], function(tile) {
      tile.path <- paste0("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/LAS/", tile, ".LAS")
      las <- readLAS(tile.path)

      ws = seq(6,24,6)
      th = seq(.1, 1.5, length.out = length(ws))

      lg <- lasground(las, pmf(ws, th))

      writeLAS(lg, paste0("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/LAS_intersectTrees/",tile, "_ground.las"))
})
#+end_src


**** normalize
#+begin_src R
  ctg2009ground <- catalog("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/LAS_intersectTrees")
  opt_output_files(ctg2009ground) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/{ORIGINALFILENAME}_normalized"
  lasnormalize(ctg2009ground, tin())
#+end_src

**** make lax for normalized
#+begin_src sh :session b
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+end_src


**** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
    ctg2009norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized")
    opt_output_files(ctg2009norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2009norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2009norm, res = 3, p2r(1))
#+end_src

#+RESULTS:
: Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
: Processing [>-------------------------------------------]   3% (1/34) eta: 39sError: filename exists; use overwrite=TRUE


#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../height_norm_2009.tif
#+END_SRC


**** get extents to select a downtown tile?
#+begin_src R

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
  shapefile(p, "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/lidar_extents.shp")


#+end_src

#+RESULTS:
: There were 50 or more warnings (use warnings() to see the first 50)

same area as 2016:
"lc2t71007f_ground_normalized.las"
#+begin_src R

  l <- readLAS("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/lc2t71007f_ground_normalized.las")
  plot(l)
  #chm <- grid_canopy(l, 3, p2r(1))
  #plot(chm)
  #e <- drawExtent()
  e <- new("Extent", xmin = 827161.463391346, xmax = 828579.428253175, 
      ymin = 486162.738356131, ymax = 487289.679000948)
  l1 <- lasclip(l, e)
  writeLAS(l1, "test2009.las")

#+end_src

#+RESULTS:
: Warning message:
: There are 0 points flagged 'synthetic'.
: Error in rgl::rgl.setMouseCallbacks(button, begin, update, dev = dev,  : 
:   unused arguments (dev = dev, subscene = subscene)

testing
#+begin_src R


      pct_x_is<- function(x, is) {
          return(list(pct_x = sum(x == is) / length(x)))
          }

  #l <- readLAS("test2009.las", filter = "-drop_z_below 6")
  l <- readLAS("test2009.las", filter = "-keep_first -drop_z_below 6 -thin_with_voxel 3")  # thin so that point density is constant?
  proj4string(l) <- "+init=epsg:7599"
  plot(l)

    lsp <- lasdetectshape(l, shp_plane(th1 = 6, th2 = 6, k = 8), "building")
    plot(lsp, color = "building")

    pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 30)

  lsp@data$pct_x <- pm$pct_x
  plot(lsp, color = "pct_x")

    lsp@data$building[pm$pct_x > .6] <- TRUE
    lsp@data$building[pm$pct_x < .4] <- FALSE

  plot(lsp, color = "building")

    lf <- lasfilter(lsp, building == FALSE)
    lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")

  plot(lfl, color = "building")

    pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)

    lfl@data$building[pm$pct_x > .4] <- TRUE
    lfl@data$building[pm$pct_x < .1] <- FALSE
  lf <- lasfilter(lfl, building == FALSE)
  plot(lf)

#+end_src

extract tree points from the lidar, the variable point density might
make this challenging....
#+begin_src R

    library(lidR)

    pct_x_is<- function(x, is) {
        return(list(pct_x = sum(x == is) / length(x)))
    }

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/"
  tiles.w.trees <- list.files(dir, pattern = ".*.las")

    lapply(tiles.w.trees, function(tile) {
        l <- readLAS(paste0(dir, tile), filter = "-keep_first -drop_z_below 6 -thin_with_voxel 3")
        proj4string(l) <- "+init=epsg:7599"

        lsp <- lasdetectshape(l, shp_plane(th1 = 6, th2 = 6, k = 8), "building")


        pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 30)

        lsp@data$building[pm$pct_x > .6] <- TRUE
        lsp@data$building[pm$pct_x < .4] <- FALSE



        lf <- lasfilter(lsp, building == FALSE)
        lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")

        pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)

        lfl@data$building[pm$pct_x > .4] <- TRUE
        lfl@data$building[pm$pct_x < .1] <- FALSE
        lf <- lasfilter(lfl, building == FALSE)

        writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/trees_lidar/",tile))

    })


#+end_src

create lax
#+begin_src sh

#+end_src

#+begin_src R
  library(lidR)
    ctg2009trees <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/trees_lidar")
    opt_output_files(ctg2009trees) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    chm <- grid_canopy(ctg2009trees, res = 3, p2r(1))
#+end_src

#+RESULTS:
#+begin_example
Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
Processing [-------------------------------------------]   1% (1/101) eta:  1mProcessing [>------------------------------------------]   2% (2/101) eta:  2mProcessing [>------------------------------------------]   3% (3/101) eta:  2mProcessing [=>-----------------------------------------]   4% (4/101) eta:  2mProcessing [=>-----------------------------------------]   5% (5/101) eta:  1mProcessing [==>----------------------------------------]   6% (6/101) eta:  1mProcessing [==>----------------------------------------]   7% (7/101) eta:  2mProcessing [==>----------------------------------------]   8% (8/101) eta:  2mProcessing [===>---------------------------------------]   9% (9/101) eta:  2mProcessing [===>--------------------------------------]  10% (10/101) eta:  2mProcessing [====>-------------------------------------]  11% (11/101) eta:  2mProcessing [====>-------------------------------------]  12% (12/101) eta:  2mProcessing [====>-------------------------------------]  13% (13/101) eta:  2mProcessing [=====>------------------------------------]  14% (14/101) eta:  2mProcessing [=====>------------------------------------]  15% (15/101) eta:  2mProcessing [======>-----------------------------------]  16% (16/101) eta:  2mProcessing [======>-----------------------------------]  17% (17/101) eta:  2mProcessing [======>-----------------------------------]  18% (18/101) eta:  2mProcessing [=======>----------------------------------]  19% (19/101) eta:  2mProcessing [=======>----------------------------------]  20% (20/101) eta:  2mProcessing [========>---------------------------------]  21% (21/101) eta:  2mProcessing [========>---------------------------------]  22% (22/101) eta:  2mProcessing [=========>--------------------------------]  23% (23/101) eta:  2mProcessing [=========>--------------------------------]  24% (24/101) eta:  2mProcessing [=========>--------------------------------]  25% (25/101) eta:  2mProcessing [==========>-------------------------------]  26% (26/101) eta:  2mProcessing [==========>-------------------------------]  27% (27/101) eta:  1mProcessing [===========>------------------------------]  28% (28/101) eta:  1mProcessing [===========>------------------------------]  30% (30/101) eta:  1mProcessing [============>-----------------------------]  31% (31/101) eta:  1mProcessing [============>-----------------------------]  32% (32/101) eta:  1mProcessing [=============>----------------------------]  33% (33/101) eta:  1mProcessing [=============>----------------------------]  34% (34/101) eta:  1mProcessing [==============>---------------------------]  35% (35/101) eta:  1mProcessing [==============>---------------------------]  36% (36/101) eta:  1mProcessing [==============>---------------------------]  37% (37/101) eta:  1mProcessing [===============>--------------------------]  38% (38/101) eta:  1mProcessing [===============>--------------------------]  39% (39/101) eta:  1mProcessing [================>-------------------------]  40% (40/101) eta:  1mProcessing [================>-------------------------]  41% (41/101) eta:  1mProcessing [================>-------------------------]  42% (42/101) eta:  1mProcessing [=================>------------------------]  43% (43/101) eta:  1mProcessing [=================>------------------------]  44% (44/101) eta:  1mProcessing [==================>-----------------------]  45% (45/101) eta:  1mProcessing [==================>-----------------------]  46% (46/101) eta:  1mProcessing [===================>----------------------]  47% (47/101) eta:  1mProcessing [===================>----------------------]  48% (48/101) eta:  1mProcessing [===================>----------------------]  49% (49/101) eta:  1mProcessing [====================>---------------------]  50% (50/101) eta:  1mProcessing [====================>---------------------]  50% (51/101) eta:  1mProcessing [=====================>--------------------]  51% (52/101) eta:  1mProcessing [=====================>--------------------]  52% (53/101) eta: 49sProcessing [=====================>--------------------]  53% (54/101) eta: 48sProcessing [======================>-------------------]  54% (55/101) eta: 47sProcessing [======================>-------------------]  55% (56/101) eta: 46sProcessing [======================>-------------------]  55% (56/101) eta: 47sProcessing [=======================>------------------]  56% (57/101) eta: 46sProcessing [=======================>------------------]  57% (58/101) eta: 45sProcessing [========================>-----------------]  59% (60/101) eta: 43sProcessing [========================>-----------------]  60% (61/101) eta: 41sProcessing [=========================>----------------]  61% (62/101) eta: 40sProcessing [=========================>----------------]  62% (63/101) eta: 39sProcessing [==========================>---------------]  63% (64/101) eta: 38sProcessing [==========================>---------------]  64% (65/101) eta: 37sProcessing [==========================>---------------]  65% (66/101) eta: 36sProcessing [===========================>--------------]  66% (67/101) eta: 35sProcessing [===========================>--------------]  67% (68/101) eta: 34sProcessing [============================>-------------]  68% (69/101) eta: 33sProcessing [============================>-------------]  69% (70/101) eta: 32sProcessing [=============================>------------]  70% (71/101) eta: 31sProcessing [=============================>------------]  71% (72/101) eta: 29sProcessing [=============================>------------]  72% (73/101) eta: 28sProcessing [==============================>-----------]  73% (74/101) eta: 27sProcessing [==============================>-----------]  74% (75/101) eta: 26sProcessing [===============================>----------]  75% (76/101) eta: 25sProcessing [===============================>----------]  76% (77/101) eta: 24sProcessing [===============================>----------]  77% (78/101) eta: 23sProcessing [================================>---------]  78% (79/101) eta: 22sProcessing [================================>---------]  79% (80/101) eta: 21sProcessing [=================================>--------]  80% (81/101) eta: 20sProcessing [=================================>--------]  81% (82/101) eta: 19sProcessing [==================================>-------]  82% (83/101) eta: 18sProcessing [==================================>-------]  83% (84/101) eta: 17sProcessing [==================================>-------]  84% (85/101) eta: 16sProcessing [===================================>------]  85% (86/101) eta: 15sProcessing [===================================>------]  86% (87/101) eta: 14sProcessing [====================================>-----]  87% (88/101) eta: 13sProcessing [====================================>-----]  88% (89/101) eta: 12sProcessing [====================================>-----]  89% (90/101) eta: 11sProcessing [=====================================>----]  90% (91/101) eta: 10sProcessing [=====================================>----]  91% (92/101) eta:  9sProcessing [======================================>---]  92% (93/101) eta:  8sProcessing [======================================>---]  93% (94/101) eta:  7sProcessing [=======================================>--]  94% (95/101) eta:  6sProcessing [=======================================>--]  95% (96/101) eta:  5sProcessing [=======================================>--]  96% (97/101) eta:  4sProcessing [========================================>-]  97% (98/101) eta:  3sProcessing [========================================>-]  98% (99/101) eta:  2sProcessing [========================================>]  99% (100/101) eta:  1sProcessing [=========================================] 100% (101/101) eta:  0s
Warning messages:
1: There are 0 points flagged 'synthetic'. 
2: There are 0 points flagged 'synthetic'. 
3: There are 0 points flagged 'synthetic'. 
4: There are 0 points flagged 'synthetic'. 
5: There are 0 points flagged 'synthetic'. 
6: There are 0 points flagged 'synthetic'. 
7: There are 0 points flagged 'synthetic'. 
8: There are 0 points flagged 'synthetic'.
#+end_example














chm, quick and easy algorithm
#+begin_src R
  library(lidR)
  ctg2009norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/")
  opt_output_files(ctg2009norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/chm/{ORIGINALFILENAME}_chm"
  grid_canopy(ctg2009norm, 4, p2r(6)) 
#+end_src

#+BEGIN_SRC sh
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/

gdalbuildvrt chm2.vrt *chm2.tif

#+END_SRC

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.



chm, pitless algoright, too slow to be worth running.
#+begin_src R :eval no
  library(lidR)
  ctg2009norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/")
  opt_output_files(ctg2009norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/{ORIGINALFILENAME}_chm_pitfree"
  grid_canopy(ctg2009norm, 4, pitfree(c(0,6,12), c(0,1), subcircle = 6)) 
#+end_src

*** 2016 lidar
:PROPERTIES:
:header-args:R: :session *R:2016*
:END:
epsg 7599
**** normalize
#+begin_src R
  library(stringr)
  library(lidR)

      f <- list.files("/media/erker/DATA_ERKER/data/madison_lidar_2016/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Madison_2016_City_Delivery/Classified_LAS/LAS/", 
                    pattern = ".*.las$",
                    full.names = T)

                                      #file 72.las seems to have errors, so I skip it.

  lapply(f[204:231], function(file) {
      i <- str_match(file, "([0-9]+).las$")[,2]
      if (i != "72") {
          l <- readLAS(file)
          if(sum(l@data$Classification == 2) != 0) {                  # if there are some ground points
              ln <- lasnormalize(l, tin())
              writeLAS(ln, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_normalized.las"))
          }
      }
  })

#+end_src

**** create lax (las index)

i had to download LAStools and run make in the directory.

#+BEGIN_SRC sh :session a
cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/
/home/erker/Downloads/LAStools/bin/lasindex -i *.las

#+END_SRC

#+RESULTS:

**** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2016norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src

#+RESULTS:


#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../height_norm_2016.tif
#+END_SRC


**** find the tiles that overlap with the madison tree inventory data
#+begin_src R
  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
                                          #shapefile(p, "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/lidar_extents.shp")


  p <- shapefile("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/lidar_extents.shp")

  proj4string(p) <- "+init=epsg:7599"

  trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  trees <- spTransform(trees, crs(p))

  o <- over(trees, p)
  o <- unique(o)

  tiles.w.trees <- na.omit(o$tile)

#+end_src

#+RESULTS:

#+begin_src R :results output :file tiles.w.trees.txt
writeLines(tiles.w.trees)

#+end_src

#+RESULTS:
[[file:tiles.w.trees.txt]]

**** extract tree points from the lidar
#+begin_src R
  #   library(devtools)
  #   install_github("Jean-Romain/lidR", ref = "devel")

  tiles.w.trees <- readLines("tiles.w.trees.txt")

     library(lidR)

      pct_x_is<- function(x, is) {
          return(list(pct_x = sum(x == is) / length(x)))
          }

     lapply(tiles.w.trees, function(tile) {
         l <- readLAS(paste0(dir, tile))

         proj4string(l) <- "+init=epsg:7599"

         lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 10), "building")

         pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 50)

         lsp@data$building[pm$pct_x > .6] <- TRUE
         lsp@data$building[pm$pct_x < .4] <- FALSE

         lf <- lasfilter(lsp, building == FALSE)
         lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")

         pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)

         lfl@data$building[pm$pct_x > .4] <- TRUE
         lfl@data$building[pm$pct_x < .1] <- FALSE
         lf <- lasfilter(lfl, building == FALSE)

         writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar/",tile))

     })


#+end_src


This worked pretty well, but there are some towers that I missed.
I'll need to filter by height when I read in to make the chm.  Or
maybe do another clean up with point metrics.


#+begin_src R
    library(lidR)

    pct_x_is<- function(x, is) {
        return(list(pct_x = sum(x == is) / length(x)))
    }

    dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar/"

  tiles.w.trees <- readLines("tiles.w.trees.txt")


    lapply(tiles.w.trees, function(tile) {
        l <- readLAS(paste0(dir, tile))

        proj4string(l) <- "+init=epsg:7599"

        lsp <- lasdetectshape(l, shp_line(th1 = 10, k = 5), "line")
        lsp@data$line[lsp@data$Z > 140] <- TRUE
        pm <- point_metrics(lsp, ~pct_x_is(x = line, is = TRUE), k = 10)
        lsp@data$line[pm$pct_x > .5] <- TRUE
        lsp@data$line[pm$pct_x < .3] <- FALSE
        pm <- point_metrics(lsp, ~pct_x_is(x = line, is = TRUE), k = 50)
        lsp@data$line[pm$pct_x > .4] <- TRUE
        lf <- lasfilter(lsp, Z < 140, line == FALSE)

        writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar_linefiltered/",tile))

    })


#+end_src

#+RESULTS:


**** Create the tree chm
#+begin_src R
  library(lidR)
    ctg2016trees <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar_linefiltered/")
    opt_output_files(ctg2016trees) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    chm <- grid_canopy(ctg2016trees, res = 3, p2r(1))
#+end_src

#+RESULTS:



STOP here until I have a good tree chm for each year.




#+begin_src R
  library(raster)
  chm <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/102_normalized_tree_chm.tif")

  trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  trees <- spTransform(trees, crs("+init=epsg:7599"))
  crowns = silva2016(chm, trees, max_cr_factor = .6)()  # crowns may be biased small, but I'm focusing on height, so this is OK for now
  writeRaster(crowns, "test2.tif", overwrite = T)


#+end_src

#+RESULTS:






**** testing finding trees






#+begin_src R

   l <- readLAS("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/102_normalized.las",
                 filter = "-drop_class 9 -drop_z_above 200 -drop_z_below 0")
      chm <- grid_canopy(l, res = 3, p2r(1))
  plot(chm)
  #e <- drawExtent()

  e <- new("Extent", xmin = 826616.082997855, xmax = 828596.309091884, 
      ymin = 485978.641378534, ymax = 487311.522306307)

  l2 <- lasclip(l, e)

  writeLAS(l2, "test2016.las")

#+end_src

#+RESULTS:



possible plan, 

- get only those points that are certainly tree
- add back in points that are near the certainly tree points.



I need a rule that if a point is within 1m of something I know for
sure is a building, to call it a building.


try voxel
#+begin_src R
  #install_github("Jean-Romain/lidR", ref = "devel")
  library(lidR) 
  library(devtools)

  pct_x_is<- function(x, is) {
      return(list(pct_x = sum(x == is) / length(x)))
      }

  # point_metrics https://github.com/Jean-Romain/lidR/issues/276
  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first")
  plot(l)
  lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 10), "building")
  plot(lsp, color = "building", col = c("green", "red"))
  lsl <- lasdetectshape(l, shp_line(th1 = 2, k = 17), "building")
  plot(lsl, color = "building", col = c("green", "red"))

  l <- lasadddata(l, (lsp@data$building == T) | (lsl@data$building == T), "building")


  pm <- point_metrics(l, ~pct_x_is(x = building, is = TRUE), k = 20)

  l <- lasadddata(l, pm$pct_x, "pct_x")
  plot(l, color = "pct_x", trim = 1)
  l@data$building[pm$pct_x > .9] <- TRUE
  l@data$building[pm$pct_x < .4] <- FALSE
  plot(l, color = "building", col = c("green", "red"))


  pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 50)
  lsp@data$building[pm$pct_x > .6] <- TRUE
  lsp@data$building[pm$pct_x < .4] <- FALSE
  plot(lsp, color = "building", col = c("green", "red"))



  # try to get powerlines and tower
  lf <- lasfilter(lsp, building == FALSE)
  lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")   #lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")  
  plot(lfl, color = "building")
  pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)
  lfl <- lasadddata(lfl, pm$pct_x, "pct_x")
  plot(lfl, color = "pct_x", trim = 1)

  lfl@data$building[pm$pct_x > .4] <- TRUE
  lfl@data$building[pm$pct_x < .1] <- FALSE
  plot(lfl, color = "building", col = c("green", "red"))

#+end_src

***** point cloud viewer backedn
#+begin_src R
  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first")
  plot(l, backend = "pcv")

#+end_src

***** CHM for just trees
#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    opt_filter(ctg2016norm) <- "-keep_class 2 -drop_z_above 200 -drop_z_below 0"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src




#+begin_src R

  f2 <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/", ".*_normalized.las")

      lapply(f2, function(file) {
            i <- str_match(file, "([0-9]+).*.las$")[,2]
            l <- readLAS(file)
          if(sum(l@data$Classification == 2) != 0) {                  # if there are some ground points
            chm <- grid_canopy(l, res = 3, p2r(1))
            proj4string(chm) <- "+init=epsg:7599"
            writeRaster(chm, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_.tif"), overwrite = T)
          }
      })



  ctg <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/")
  opt_output_files(ctg) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/pitfree/{ORIGINALFILENAME}"
  chm.ctg <- grid_canopy(ctg, 3, pitfree(c(0,6,15,30,45), c(0,1), subcircle = 1.5))


      lapply(f2[44:length(f2)], function(file) {
            i <- str_match(file, "([0-9]+).*.las$")[,2]
            l <- readLAS(file)
          if(sum(l@data$Classification == 2) != 0) {                  # if there are some ground points
            chm <- grid_canopy(l, 3, pitfree(c(0,6,15,30,45), c(0,1), subcircle = 1.5))
            proj4string(chm) <- "+init=epsg:7599"
            writeRaster(chm, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_pitfree.tif"), overwrite = T)
          }
      })

  f3 <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/", ".*_pitfree.tif")


#+end_src

#+RESULTS:

#+BEGIN_SRC sh

cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/

gdalbuildvrt height_.vrt *_.tif
gdalbuildvrt height_pitfree.vrt *_pitfree.tif

#+END_SRC

#+RESULTS:
| 0...10...20...30...40...50...60...70...80...90...100 | 0 | done. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0 | done. |



segment trees
#+begin_src R
      library(lidR)
        i <- 205

      f <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_.tif")
      chm <- raster(f)


  fl <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/",i,"_normalized.las")
  l <- readLAS(fl, filter = "-drop_z_below 0")
  proj4string(l) <- "+init=epsg:7599"
  chm <- grid_canopy(l, res = 1, pitfree(c(0,6,15,30,45), c(0,1), subcircle = 1.5))

  chme <- crop(chm, e)
  writeRaster(chme, "test.tif", overwrite = T)






  library(raster)
  chm <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/101_pitfree.tif")

  ttops <- tree_detection(chme, lmf(ws = function(h){h+3}, hmin = 6, shape = "circular"))
  crowns = silva2016(chme, ttops)()
  writeRaster(crowns, "test2.tif", overwrite = T)



  trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  trees <- spTransform(trees, crs("+init=epsg:7599"))


    ttops = tree_detection(l, lmf(100, hmin = 6, shape = "circular"))
    plot(chm)
    plot(ttops, add = T)


  ttops <- tree_detection(
  crowns = silva2016(chme, ttops)()
  writeRaster(crowns, "test2.tif", overwrite = T)
#+end_src

#+RESULTS:
: Local maximum filter: 79%Local maximum filter: 80%Local maximum filter: 81%Local maximum filter: 82%Local maximum filter: 83%Local maximum filter: 84%Local maximum filter: 85%Local maximum filter: 86%Local maximum filter: 87%Local maximum filter: 88%Local maximum filter: 89%Local maximum filter: 90%Local maximum filter: 91%Local maximum filter: 92%Local maximum filter: 93%Local maximum filter: 94%Local maximum filter: 95%Local maximum filter: 96%Local maximum filter: 97%Local maximum filter: 98%Local maximum filter: 99%Local maximum filter: 100%> > > > > > > > > > > > > > > > > > > > > Local maximum filter: 1%Local maximum filter: 2%Local maximum filter: 3%Local maximum filter: 4%Local maximum filter: 5%Local maximum filter: 6%Local maximum filter: 7%Local maximum filter: 8%Local maximum filter: 9%Local maximum filter: 10%Local maximum filter: 11%Local maximum filter: 12%Local maximum filter: 13%Local maximum filter: 14%Local maximum filter: 15%Local maximum filter: 16%Local maximum filter: 17%Local maximum filter: 18%Local maximum filter: 19%Local maximum filter: 20%Local maximum filter: 21%Local maximum filter: 22%Local maximum filter: 23%Local maximum filter: 24%Local maximum filter: 25%Local maximum filter: 26%Local maximum filter: 27%Local maximum filter: 28%Local maximum filter: 29%Local maximum filter: 30%71316 points below 0 found.
: Local maximum filter: 31%Processing [=================================>---------]  79% (27/34) eta:  8mLocal maximum filter: 32%Local maximum filter: 33%Local maximum filter: 34%Local maximum filter: 35%Local maximum filter: 36%Local maximum filter: 37%Local maximum filter: 38%Local maximum filter: 39%Local maximum filter: 40%Local maximum filter: 41%Local maximum filter: 42%Local maximum filter: 43%Local maximum filter: 44%Local maximum filter: 45%Local maximum filter: 46%Local maximum filter: 47%Local maximum filter: 48%Local maximum filter: 49%Local maximum filter: 50%Local maximum filter: 51%Local maximum filter: 52%Local maximum filter: 53%Local maximum filter: 54%Local maximum filter: 55%Local maximum filter: 56%Local maximum filter: 57%Local maximum filter: 58%Local maximum filter: 59%Local maximum filter: 60%Local maximum filter: 61%Local maximum filter: 62%Local maximum filter: 63%Local maximum filter: 64%Local maximum filter: 65%Local maximum filter: 66%Local maximum filter: 67%Local maximum filter: 68%Local maximum filter: 69%Local maximum filter: 70%Local maximum filter: 71%Local maximum filter: 72%Local maximum filter: 73%Local maximum filter: 74%Local maximum filter: 75%Local maximum filter: 76%Local maximum filter: 77%Local maximum filter: 78%Local maximum filter: 79%Local maximum filter: 80%Local maximum filter: 81%Local maximum filter: 82%Local maximum filter: 83%Local maximum filter: 84%Local maximum filter: 85%Local maximum filter: 86%Local maximum filter: 87%Local maximum filter: 88%Local maximum filter: 89%Local maximum filter: 90%Local maximum filter: 91%Local maximum filter: 92%Local maximum filter: 93%Local maximum filter: 94%Local maximum filter: 95%Local maximum filter: 96%Local maximum filter: 97%Local maximum filter: 98%Local maximum filter: 99%Local maximum filter: 100%> > > > > + + Error: unexpected symbol in:
: "crowns = silva2016(chme, ttops)()
: writeRaster"









#+begin_src R
  library(lidR)
  ctg <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/")

i <- 205

  fl <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/",i,"_normalized.las")
  fh <- 
  l <- readLAS(f) #should specify only spatial coordinates

  l <- lastrees(l, li2012())

#+end_src

#+RESULTS:
: 1924 points below 0 found.

***** old stuff




CHM for multiple returns (approximately trees)
#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/multiple_chm/{ORIGINALFILENAME}_tree_chm"
    opt_filter(ctg2016norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src

#+RESULTS:


the multiple return approach also included building edges.  I need to find a way to just get tree points
#+begin_src R
      ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
      opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_las/{ORIGINALFILENAME}_tree_chm"
      opt_filter(ctg2016norm) <- "-drop_z_above 200 -drop_z_below 0"

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/"
    files <- list.files(dir, pattern = ".*.las$",
                        full.names = F)

    lapply(files, function(f) {
        l <- readLAS(paste0(dir,f))
        ls <- lasdetectshape(l, shp_line(th1 = 10, k = 5), "Colinear")
        lsp <- lasdetectshape(ls, shp_plane(th1 = 4, th2 = 4, k = 11), "Coplanar")
        lsp@data[(!lsp@data$Coplanar) & (!lsp@data$Colinear) & (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1) & (lsp@data$Intensity < 100)]$Classification <- 5L
        writeLAS(lsp, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar_wtree/",f))
  })



#+end_src

#+RESULTS:

#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar_wtree")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2016norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0 -keep_class 5"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src

#+RESULTS:


















** modeling

maybe use a gam with a smoother for the effect of initial height on
growth rate.

y ~ b * height

b ~ s(initial.height) + foliar traits + environment (proximity to road etc)


** extract heights from normalized lidar at location of trees


- read in points and make a buffer of 5 ft radius around each point (they are
  almost always in the center of the tree)
- for each year (chm) extract the maximum height within that buffer and assign it to the tree
  - maximum because the way i did the raster there are varying number
    of holes (the point clouds have different densities).


Really I should come up with some clever rules for thinning out the
tree dataset.  If I have small trees next to big trees, the small
trees look like they are tall, but really they are being overtopped by
the big trees.

- consider making buffers based on the trees dbh.  if two trees
  intersect, keep the bigger of the two.






*** 
#+begin_src R
  library(raster)
  library(rgeos)
  library(velox)
  years <- c(2005, 2009, 2016)


  trees <- shapefile("/media/erker/DATA_ERKER/dd/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
  trees <- spTransform(trees, crs("+init=epsg:7599"))

  p <- gBuffer(trees, width = 8, byid = T)
  shapefile(p, "/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/trees_buf.shp", overwrite = T)

  p <- gBuffer(trees, width = c(1,8), byid = T)
  shapefile(p, "/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/trees_buf_test.shp", overwrite = T)


  res <- lapply(years, function(year) {
      in.dir <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_",year,"_heights/all_chm/")
      fs <- list.files(in.dir,
                       pattern = ".*.tif$")
      out <- lapply(fs, function(f) {
          r.v <- velox(paste0(in.dir, f))
          o <- r.v$extract(sp = p)
          o <- unlist(lapply(o, function(x) max(x, na.rm = T)))
          o
      })
      hgt <- apply(do.call("cbind",out),1, max)
      hgt
  })











  out.dir <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_",year,"_heights/all_chm_velox/")
  dir.create(out.dir)



  r.v$write(path = paste0(out.dir, f))




  lapply(paths, function(path) {
      r <- raster(path)
      proj4string(r) <- "+init=epsg:7599"
      o <- raster::extract(r, p[1:100,], fun = max)

      s <- stack(paths)

#+end_src

#+RESULTS:
: [1] "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/height_norm_2005.tif"
: [2] "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/height_norm_2009.tif"
: [3] "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/height_norm_2016.tif"
: Error in compareRaster(rasters) : different extent

* papers
https://link.springer.com/article/10.1186/s40663-018-0146-y

* old stuff
 







p
