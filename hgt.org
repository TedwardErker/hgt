#+TITLE: Urban Tree Height 
#+AUTHOR: erker
#+email: erker@wisc.edu
#+PROPERTY:  header-args:R :cache no :results output :exports both :comments link :session *R:hgt2* :eval yes
#+PROPERTY:  header-args:sh :eval yes
#+startup: indent entitiespretty
#+FILETAGS: work allo
#+HTML_HEAD: <link rel="stylesheet" href="main.css" type="text/css">
#+OPTIONS: toc:nil num:t date:t author:nil
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{natbib}
##+LATEX_HEADER: \usepackage{chemformula}
#+latex_header: \usepackage{adjustbox}
#+LaTeX_HEADER: \RequirePackage{lineno} \def\linenumberfont{\normalfont\small\tt}
#+LATEX_HEADER: \hypersetup{colorlinks=true,linkcolor=black, citecolor=black, urlcolor=black}
#+latex_header: \usepackage{setspace} \doublespacing
#+LATEX_CLASS_OPTIONS: [12pt]
---------------------

* list of figures (for presentation and paper)

check my paper in stat consulting office to make sure I got it all

- raw data
  - lidar
    - lazers from a plane illustration
    - point cloud screen shot or gif
    - height difference from tree CHM.
  - hyperspectral imagery
    - aviris-ng
    - hyperspectral cube
    - leaf spectrum
    - 2015 flightlines over Madison.
    - merged trait maps over all of Madison.
  - tree inventories
    - street trees
      - get figure from poster with the summary statistics
    - hill farms
      - make figure like i have for street trees
    - atwood
      - make figure like i have for street trees
  - show tree points colored by growth
  - summary distributions for height growth by species...
  - growth by explanatory variable plots??
  - model plots???


* Introduction

Urban trees grow differently than their more rural counterparts
because of the challenges they face surviving amongst urban
infrastructure and because they are largely cultivated by humans (but
not for their wood).  For example, street trees are subject to damage
from vehicles, pedestrians, and poor soil conditions; urban trees tend
to be more open grown than rural trees; urban trees are pruned to
accomodate powerlines or for aesthetics, many urban trees are
irrigated and fertilized; the species composition in a city is often
different than its rural surrounding.  Urban conditions are not only
unique, but they are also more heterogeneous, which creates
variability in the growth of the urban forest at small spatial scales.

Urban forests are also critical components of the "green
infrastructure" meant to make cities more livable.  With over half the
human population living in urban areas, planting trees to provide
ecosystem services is seen as a way to make cities more livable.
These ecosystem services include habitat for wildlife, stormwater
runoff reduction, air quality improvement, and carbon sequestration.  

All these services are a function of growth, either directy such as
carbon sequestration, or indirectly such as stormwater runoff
reduction which is a function of tree size.  Therefore, understanding
urban tree growth is essential to estimating and projecting ecosystem
services into the future.  

Remote sensing technology provides an efficient way to collect
sufficient data on urban tree growth for detecting effect sizes that
may be small relative to the variability induced by the urban
environment.  Here we use two technologies that have only recently
become more available, repeat lidar and imaging spectroscopy.  Lidar
uses the reflection of lazer pulses to create 3 dimensional point
clouds of objects.  Using multiple years of lidar data we are able to
calculate growth in the the height of thousands of trees.  Imaging
spectroscopy 

to measure height
growth, to create indicies of canopy foliar
traits.  



Objectives:
- Evaluate the effectiveness of two 
- Use repeat lidar in an urban environ





** COMMENT comments







Understanding how trees grow in urban environments can help cities
better estimate and project 

- Why important
  - Urban environments are unique
  - Trees there provide services, one of which is carbon sequestration
    via growth
- Context
  - there is incredible variability in urban tree growth across a city
    due to variability in environment, and species
  - Remote sensing technology, specifically repeat lidar and imaging
    spectroscopy, allow for measurements of growth (from repeat lidar)
    for thousands of trees, which then can be combined with indicies
    of foliar traits (from imaging spectroscopy) to create large data
    for understanding urban tree growth
- Questions
  - What is the distribution of rates of urban tree height growth for different
    species in Madison?
    - this is the variability that I would seek to explain with
      environmental and trait data.
  - Do foliar trait indicies derived from imaging spectroscopy explain
    any of the variability in tree growth rates?
  - Do environmental factors (proximity to road, age of road?, percent
    impervious within 100m, topographic location.
- We hypothesize that we'll see effects expected from other studies
  - trees grow faster




* Methods

** Overview
In our study city, Madison, WI, we used two dates of lidar data (2009
and 2016) to estimate the height growth of trees over 7 years.
Inventories of street trees and two of Madison's neighborhoods,
provided species labels and diameter at breast height (DBH) for about
100 thousand trees.  In June 2015, NASA's Airborne Visible / Infrared
Imaging Spectometer - Next Generation (AVIRIS-NG) imaged the majority
of Madison.  Using predictive equations developed following
cite:singh_e_2015, we predicted canopy foliar traits: Nitrogen (% mass), N;
leaf mass per area (g/m^2), LMA; lignin (% mass), cellulose (% mass).
CHECK I HAVE ALL THESE.  In addition to foliar traits, we calculated
other environmental factors such as proximity to road and topographic
position. 

separate models for street trees and trees from the neighborhood inventories.

We then built a regression models to estimate the relationship of
environmental factors and foliar traits with growth, with separate
models for different species and tree contexts (street trees versus
neighborhood trees).

** Madison, WI: population and forests
Madison is a city of about 260,000 persons ([[https://www.census.gov/quickfacts/fact/table/madisoncitywisconsin/LND110210][USCensus]]), located in south
central Wisconsin.  Its climate is .... and the dominant forest type
is broadleaf deciduous.  Pre-european settlement forests were
dominated by oaks (Quercus), maples (Acer), and basswood (Tilia).
Now the most common street tree genera are Fraxinus, Acer, Gleditsia,
and Tilia, making up over 70% of all street trees.  Other common
genera in neighborhoods include: Picea, Thuja, Betula, and Pinus.

** Data
*** Tree inventories
The species of a tree encodes a suite of genetic factors that affect
growth rates and is therefore important to know when modeling tree
grwoth.  We used three tree inventories for species information.  The
first is the city's street tree inventory from 2011; the second is the
2012?  inventory of the Atwood neighborhood located on Madison's east
side and the north side of lake Monona, the third is the 2015-2016
inventory of the [[http://www.hillfarms.org/documents/UHFP_Tree_Report_2016.pdf][HillFarms neighborhood]] on Madison's west side FIGURE
HERE SHOWING INVENTORIES!!  give species breakdowns too.  These
inventories also provide information on DBH and tree condition.  

I need a figure showing the neighborhood inventories and the street
tree inventories too.





How did we remove trees

- lidar point clouds were unreliable, too close to other trees, tall
  buildings,
- trees were removed or replanted indicated by large decreases in height



*** Light detection and ranging (lidar)
**** COMMENT overview
What instrument?
when flown?
altitude? avg pulse density? footprint size?

2009 lidar is .75 points per square meter. 2016 lidar is 

2016 - 


We clip lidar point clouds to within 2.4 m (8 ft) from the center of
the inventoried tree as identified in the inventory point shapefile.
Table .. shows the 



#+caption: summary statistics for the number of points per tree for each year of ALS data.  Pulse density increased greatly through time, but there is also considerable intraannual variation from tree to tree.
|                   | 2005 | 2009 | 2016 | 2017 |
|-------------------+------+------+------+------|
| n min             |      |      |      |      |
| n 25% percentile  |      |      |      |      |
| n median          |      |      |      |      |
| n mean            |      |      |      |      |
| n 75th percentile |      |      |      |      |
| n max             |      |      |      |      |




For 2005 lidar, the average number of points for each tree was XXXX,
for 20


**** corrections for maximum height and estimating tree growth

The estimated maximum height of trees derived from ALS is always lower
than the true maximum height, that is, it is biased downward.  The
magnitude of this bias is a function of the ALS and the tree
architecture.  Greater density of lidar pulses will have less bias
since the probability of hitting a branch near the top of the tree
increases.  Trees with less conical and flatter tops - those with weak
apical dominance - will have less bias because there are more branches
close to the highest branch of the tree.  Twig size also plays a
role. Generally, taxa with thinner twigs have denser branching so
while a single twig may not reflect enough energy from a lidar pulse
to trigger a return, there are many more twigs close togther.  Taxa
with thicker twigs will have stronger returns, but since thicker twigs tend to
be less dense, the probability of hitting a thick twig is lower.
Exactly how these negatively correlated traits (twig thickness and
density) interact to influence the bias in maximum height estimates is
mediated by the algorithms used to convert full waveform lidar into
point clouds.  Thus, in our attempt to correct for the bias in maximum
height estimation and - by extension across multiple years - tree height
growth, we used a bootstrap resampling technique to estimate bias at
different pulse densities for each genera in our dataset.  Other
characteristics of the ALS, such as footprint size are important in
correcting bias, but we did not have this information for all our
datasets. https://www.tandfonline.com/doi/abs/10.5589/m06-030

Our goal is to estimate tree growth from multiple years of ALS.  The
primary issue with this endeavor is that tree growth and the size of
the bias are confounded.  In 2005, average pulse density was very low and so
bias was large.  By 2017, average pulse density had increased and so
bias decreased.  The challenge therefore is to identify how much of
the observed maximum height difference is due to growth over those 12
years and how much is due to a decrease in bias.  

To do this, we estimated the bias for trees that were no longer
growing and then applied the bias correction to all other trees. We
selected the tallest trees of each genera that had essentially reached
their maximum height and stopped growing (differences in observed
maximum height between 2009, 2016, and 2017 were all less than 1
meter).  We then combined all returns across years for each tree,
assuming that other than pulse density all else was equal across ALS
aquisitions.  We then sampled 1000 times with replacement from each
tree's point cloud samples of size 1 to the original size.  For each
of the 1000 samples at each sample size, we calculated the maximum
height.  Averaging the maximum heights across the 1000 samples for
each sample size we estimated how bias changes with sample size /
pulse density.

#+name: fig:pulse_by_bias_by_genus
[[file:figs/ng_bias_n.png]]


We then averaged the bias curves for each genera and applied this mean
bias correction to each tree according to its genus and number of
pulses.  We also averaged the standard deviation of the bias estimates
and assigned them to each tree in order to provide information on the
amount of uncertainty in each correction.

This method assumes that the relationship between pulse density and
bias is the same for large trees as it is for small trees of the same
genus.  This assumption may not be true, but it is difficult to test
with the existing data.  We also tested estimating the bias correction
for each tree individually, so that the bias by sample size curve was
specific to that tree.  This may have minimized the issue with the
assumption that bias is not a function of tree height, but bias and
growth were confounded.  Nevertheless, results from both corrections
were similar, suggesting our findings are robust to the method of
correction.  Recognizing that there is a bias in the observed maximum
height and that the uncertainty in the bias is a function of sample
size is what appears to be crucial.


pulse density varies within year too (see tree ST55248).

**** Weighted regression for height growth rates

After the bias correction, we had an estimated bias-corrected height
for each year and the standard deviation of this height derived from
the bootstrap resampling procedure.  We then fit a weighted linear
regression for each tree with height as the response and year as the
predictor.  Weights were inversely proportional to the variance of
each bias-corrected height.  The result was an estimate of annual
growth rate for each tree.  The advantage of the weighted regression
is that we were able to include data points in the regression even if
they were highly uncertain rather than removing them completely.  ALS
from 2005 generally is very sparse in density, but there were some
trees for which the sample size was sufficiently large to provide some
information on growth.

Due to the nature of the measurement error and correcting for the mean
bias, at times a tree's height was over or under corrected.  Over
correction explains some of the slightly negative growth rates, while
under correction explains some of the high growth rates.  On average
we assume these errors cancel out.

#+name: fig:year_by_height
#+caption: Height of 40 trees in 2005, 2009, 2016, and 2017.  Grey points are observed height from ALS; grey line is unweighted linear regression for the observed heights.  Red points are bias-corrected heights; red line is weighted linear regression trend line for the corrected heights.
[[file:figs/correction_nogrowth_40_m_smooth_lm.png]]

**** COMMENT comments on lidar
2009 lidar is not well documented.  I think it appers as 2010 lidar on
the wisconsinview website.

i need to get the average point density across all the tiles because
it varies.

.07 pts per sq ft.  = .75 pts per sq meter
.06 
*** other
- street tree inventory, hill farms and atwood inventories
- lidar
  - how modified to create heights
- imaging spectrsopty
  - modified to create indicies of canopy foliar traits
  - because of variations across images, we adjusted trait maps to one
    image and derived indicies of  foliar tratis.
- dem?
  - topographic position.

** Modeling



maybe use a gam with a smoother for the effect of initial height on
growth rate.

y ~ b * height

b ~ s(initial.height) + foliar traits + environment (proximity to road etc)


Using lidar from 2005, 2009, and 2016, we 

We 


create 

finding buildings: https://github.com/Jean-Romain/lidR/issues/209


2005 lidar might not be good enough for a general tree canopy layer,
but it should still be reliable for treee heights if I know the trees
location ( street trees).



** work
*** creating normalized lidar and also trying to create point clouds with just trees
**** 2005 lidar
***** create lax
#+begin_src sh 
cd /media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+end_src

#+begin_src R
  library(lidR)
  l <- readLAS("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/tile014.las")
  plot(l, trim = 1000)
#+end_src


***** which have ground?
#+begin_src R
      library(stringr)
      f <- list.files("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/", pattern = ".*.las$", full.names = T)
      lapply(f, function(file) {
          i <- str_match(file, ".*tile([0-9]+).*.las$")[,2]
          l <- readLAS(file)
          n <- sum(l@data$Classification == 2)
          return(c(i, n))
    })
#+end_src

***** find ground
#+begin_src R
    ctg2005 <- catalog("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2005/LiDAR_PointClouds_LAS/")
    opt_output_files(ctg2005) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/ground/{ORIGINALFILENAME}_ground"
                                            #lasground(ctg2005, csf())
    ws = seq(6,24,6)
    th = seq(.1, 1.5, length.out = length(ws))

 lasground(ctg2005, pmf(ws, th))

  #  plot(ctg2005, map = T)


#+end_src

***** normalize
#+begin_src R 

  ctg2005ground <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/ground/")
  opt_output_files(ctg2005ground) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/{ORIGINALFILENAME}_normalized"
  lasnormalize(ctg2005ground, tin())

#+end_src

***** make lax for normalized
#+begin_src sh 
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+end_src

***** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
    ctg2005norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized")
    opt_output_files(ctg2005norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2005norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2005norm, res = 3, p2r(1))
#+end_src

#+RESULTS:
: Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
: Processing [>-------------------------------------------]   3% (1/34) eta: 39sError: filename exists; use overwrite=TRUE


#+BEGIN_SRC sh 
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../height_norm_2005.tif
#+END_SRC


***** get extents
#+begin_src R

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
  shapefile(p, "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/lidar_extents.shp")

#+end_src

#+RESULTS:


***** Get tree points
#+begin_src R
  library(lidR)
  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/"

  tile <- "tile014_ground_normalized.las"

  l <- readLAS(paste0(dir, tile), filter = "-drop_z_below 6")
  plot(l, trim = 100)

  e <- new("Extent", xmin = 826616.082997855, xmax = 828596.309091884, 
      ymin = 485978.641378534, ymax = 487311.522306307)

  l2 <- lasclip(l, e)

  writeLAS(l2, "test2005.las")


#+end_src

#+RESULTS:
: Error in rgl::rgl.setMouseCallbacks(button, begin, update, dev = dev,  : 
:   unused arguments (dev = dev, subscene = subscene)


#+begin_src R
  library(lidR)
  pct_x_is<- function(x, is) {
      return(list(pct_x = sum(x == is) / length(x)))
  }

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/"

  tiles.w.trees <- list.files(dir, 
                              pattern = ".*.las")


  lapply(tiles.w.trees, function(tile) {

      l <- readLAS(paste0(dir, tile), filter = "-drop_z_below 6")

      proj4string(l) <- "+init=epsg:7599"

      lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 9), "building")


      first.return.of.many <- (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1)
      lsp@data$building[first.return.of.many] <- FALSE

      pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 5)

      lsp@data$building[pm$pct_x <= .2] <- FALSE
      lsp@data$building[first.return.of.many] <- FALSE
  p
      lf <- lasfilter(lsp, building == FALSE)
      lfl <- lasdetectshape(lf, shp_line(th1 = 5, k = 8), "building")

      pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 20)

      lfl@data$building[pm$pct_x > .8] <- TRUE
      lfl@data$building[pm$pct_x < .2] <- FALSE
      lf <- lasfilter(lfl, building == FALSE)

      writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/trees_lidar/",tile))

  })

#+end_src

***** make lax
#+BEGIN_SRC sh 
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/trees_lidar
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+END_SRC

#+RESULTS:

***** tree chm
#+begin_src R
  library(lidR)
    ctg2005trees <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/trees_lidar")
    opt_output_files(ctg2005trees) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    chm <- grid_canopy(ctg2005trees, res = 3, p2r(1))
#+end_src

#+RESULTS:
: Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
: Processing [>-------------------------------------------]   3% (1/34) eta:  2mProcessing [==>-----------------------------------------]   6% (2/34) eta:  2mProcessing [===>----------------------------------------]   9% (3/34) eta:  2mProcessing [====>---------------------------------------]  12% (4/34) eta:  1mProcessing [=====>--------------------------------------]  15% (5/34) eta:  1mProcessing [=======>------------------------------------]  18% (6/34) eta:  1mProcessing [========>-----------------------------------]  21% (7/34) eta:  1mProcessing [=========>----------------------------------]  24% (8/34) eta:  1mProcessing [===========>--------------------------------]  26% (9/34) eta:  1mProcessing [============>------------------------------]  29% (10/34) eta:  1mProcessing [=============>-----------------------------]  32% (11/34) eta: 50sProcessing [==============>----------------------------]  35% (12/34) eta: 46sProcessing [===============>---------------------------]  38% (13/34) eta: 45sProcessing [=================>-------------------------]  41% (14/34) eta: 45sProcessing [==================>------------------------]  44% (15/34) eta: 43sProcessing [===================>-----------------------]  47% (16/34) eta: 42sProcessing [=====================>---------------------]  50% (17/34) eta: 38sProcessing [======================>--------------------]  53% (18/34) eta: 36sProcessing [=======================>-------------------]  56% (19/34) eta: 35sProcessing [========================>------------------]  59% (20/34) eta: 33sProcessing [==========================>----------------]  62% (21/34) eta: 31sProcessing [===========================>---------------]  65% (22/34) eta: 29sProcessing [============================>--------------]  68% (23/34) eta: 27sProcessing [=============================>-------------]  71% (24/34) eta: 25sProcessing [===============================>-----------]  74% (25/34) eta: 22sProcessing [================================>----------]  76% (26/34) eta: 19sProcessing [=================================>---------]  79% (27/34) eta: 17sProcessing [==================================>--------]  82% (28/34) eta: 15sProcessing [====================================>------]  85% (29/34) eta: 13sProcessing [=====================================>-----]  88% (30/34) eta: 10sProcessing [======================================>----]  91% (31/34) eta:  8sProcessing [=======================================>---]  94% (32/34) eta:  5sProcessing [=========================================>-]  97% (33/34) eta:  2sProcessing [===========================================] 100% (34/34) eta:  0s

#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tree_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../tree_height_norm_2005.tif
#+END_SRC

**** 2009 lidar

***** get tiles just over the tree inventory
This lidar covers all of dane county.  Only get the tiles that
intersect with the madison tree inventory.

#+name: tiles
#+begin_src R 
    library(raster)
    library(rgeos)
    trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/dd/MadisonTrees_WithAttributes.shp")
  tiles <- shapefile("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/TileIndex/StudyArea.shp")

  trees <- trees[!is.na(trees@data$DBH),]
  trees <- trees[as.numeric(trees@data$DBH) > 0,]

  trees <- spTransform(trees, crs(tiles))

    o <- over(trees, tiles)
    o <- unique(o)

  tiles <- na.omit(o$LASClass)

#+end_src

#+RESULTS: tiles

#+begin_src R :file tree_tiles_2009.txt
writeLines(tiles)
#+end_src

#+RESULTS:
[[file:tree_tiles_2009.txt]]

***** download tiles from wisconsin view ftp.  The data I had from the townsend lab hard drive had been modified and points dropped.

Download those tiles from ftp

#+BEGIN_SRC sh :session *a*

cd /media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/LAS/

while IFS= read -r line;
do
tile=${line}.las
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2010_County_Delivery/Classified_LAS/LAS/$tile
done < ~/git/hgt/tree_tiles_2009.txt

#+END_SRC

make lax
#+BEGIN_SRC sh :session *a*

cd /media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/LAS/

/home/erker/Downloads/LAStools/bin/lasindex -i *.las

#+END_SRC

***** normalize
#+begin_src R
        library(lidR)
          ctg2009 <- catalog("/media/erker/DATA_ERKER/data/madison_lidar/madison_lidar_2009/LAS")
          opt_output_files(ctg2009) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/{ORIGINALFILENAME}_normalized"
          lasnormalize(ctg2009, tin())


#+end_src

#+RESULTS:
#+begin_example
Loading required package: raster
Loading required package: sp
lidR 2.1.5 using 4 threads. Help on <gis.stackexchange.com>. Bug report on <github.com/Jean-Romain/lidR>.
Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
Processing [>-------------------------------------------]   1% (1/87) eta: 30mProcessing [>-------------------------------------------]   2% (2/87) eta: 26mProcessing [=>------------------------------------------]   3% (3/87) eta: 25mProcessing [=>------------------------------------------]   5% (4/87) eta: 39mProcessing [==>-----------------------------------------]   6% (5/87) eta:  1hProcessing [==>-----------------------------------------]   7% (6/87) eta:  1hProcessing [===>----------------------------------------]   8% (7/87) eta:  1hProcessing [===>----------------------------------------]   9% (8/87) eta:  1hProcessing [====>---------------------------------------]  10% (9/87) eta:  1hProcessing [====>--------------------------------------]  11% (10/87) eta:  1hProcessing [====>--------------------------------------]  13% (11/87) eta:  1hProcessing [=====>-------------------------------------]  14% (12/87) eta:  1hProcessing [=====>-------------------------------------]  15% (13/87) eta:  1hProcessing [======>------------------------------------]  16% (14/87) eta:  1hProcessing [======>------------------------------------]  17% (15/87) eta:  1hProcessing [=======>-----------------------------------]  18% (16/87) eta: 50mProcessing [=======>-----------------------------------]  20% (17/87) eta: 47mProcessing [========>----------------------------------]  21% (18/87) eta: 45mProcessing [========>----------------------------------]  22% (19/87) eta: 43mProcessing [=========>---------------------------------]  23% (20/87) eta: 41mProcessing [=========>---------------------------------]  24% (21/87) eta: 39mProcessing [==========>--------------------------------]  25% (22/87) eta: 37mProcessing [==========>--------------------------------]  26% (23/87) eta: 36mProcessing [===========>-------------------------------]  28% (24/87) eta: 34mProcessing [===========>-------------------------------]  29% (25/87) eta: 33mProcessing [============>------------------------------]  30% (26/87) eta: 33mProcessing [============>------------------------------]  31% (27/87) eta:  1hProcessing [=============>-----------------------------]  32% (28/87) eta:  1hProcessing [=============>-----------------------------]  33% (29/87) eta:  2hProcessing [==============>----------------------------]  34% (30/87) eta:  2hProcessing [==============>----------------------------]  36% (31/87) eta:  2hProcessing [===============>---------------------------]  37% (32/87) eta:  2hProcessing [===============>---------------------------]  38% (33/87) eta:  2hProcessing [================>--------------------------]  39% (34/87) eta:  2hProcessing [================>--------------------------]  40% (35/87) eta:  1hProcessing [=================>-------------------------]  41% (36/87) eta:  1hProcessing [=================>-------------------------]  43% (37/87) eta:  1hProcessing [==================>------------------------]  44% (38/87) eta:  1hProcessing [==================>------------------------]  45% (39/87) eta:  1hProcessing [===================>-----------------------]  46% (40/87) eta:  1hProcessing [===================>-----------------------]  47% (41/87) eta:  1hProcessing [====================>----------------------]  48% (42/87) eta:  1hProcessing [====================>----------------------]  49% (43/87) eta:  1hProcessing [=====================>---------------------]  51% (44/87) eta:  1hProcessing [=====================>---------------------]  52% (45/87) eta:  1hProcessing [======================>--------------------]  53% (46/87) eta:  1hProcessing [======================>--------------------]  54% (47/87) eta:  1hProcessing [=======================>-------------------]  55% (48/87) eta:  1hProcessing [=======================>-------------------]  56% (49/87) eta:  1hProcessing [========================>------------------]  57% (50/87) eta:  1hProcessing [=========================>-----------------]  60% (52/87) eta: 49mProcessing [=========================>-----------------]  61% (53/87) eta: 47mProcessing [==========================>----------------]  62% (54/87) eta: 45mProcessing [==========================>----------------]  63% (55/87) eta: 43mProcessing [===========================>---------------]  64% (56/87) eta: 45mProcessing [===========================>---------------]  66% (57/87) eta: 43mProcessing [============================>--------------]  67% (58/87) eta: 41mProcessing [=============================>-------------]  69% (60/87) eta: 37mProcessing [=============================>-------------]  70% (61/87) eta: 35mProcessing [==============================>------------]  71% (62/87) eta: 33mProcessing [==============================>------------]  72% (63/87) eta: 32mProcessing [===============================>-----------]  74% (64/87) eta: 30mProcessing [===============================>-----------]  75% (65/87) eta: 28mProcessing [================================>----------]  76% (66/87) eta: 27mProcessing [================================>----------]  77% (67/87) eta: 25mProcessing [=================================>---------]  78% (68/87) eta: 23mProcessing [=================================>---------]  79% (69/87) eta: 22mProcessing [==================================>--------]  80% (70/87) eta: 20mProcessing [==================================>--------]  82% (71/87) eta: 19mProcessing [===================================>-------]  83% (72/87) eta: 18mProcessing [===================================>-------]  84% (73/87) eta: 17mProcessing [====================================>------]  85% (74/87) eta: 15mProcessing [====================================>------]  86% (75/87) eta: 14mProcessing [=====================================>-----]  87% (76/87) eta: 13mProcessing [=====================================>-----]  89% (77/87) eta: 11mProcessing [======================================>----]  90% (78/87) eta: 10mProcessing [======================================>----]  91% (79/87) eta:  9mProcessing [=======================================>---]  92% (80/87) eta:  8mProcessing [=======================================>---]  93% (81/87) eta:  7mProcessing [========================================>--]  94% (82/87) eta:  5mProcessing [========================================>--]  95% (83/87) eta:  4mProcessing [=========================================>-]  97% (84/87) eta:  3mProcessing [=========================================>-]  98% (85/87) eta:  2mProcessing [==========================================>]  99% (86/87) eta:  1mProcessing [===========================================] 100% (87/87) eta:  0s
class       : LAScatalog
extent      : 773349.2 , 852886.3 , 461220.2 , 520962.4 (xmin, xmax, ymin, ymax)
coord. ref. : NA 
area        : 2518.94 kunits²
points      : 466.78 million points
density     : 0.2 points/units²
num. files  : 87 
There were 50 or more warnings (use warnings() to see the first 50)
#+end_example

***** make lax for normalized
#+begin_src sh :session b
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized
/home/erker/Downloads/LAStools/bin/lasindex -i *.las
#+end_src


***** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
    ctg2009norm <- catalog("~/hgt_data/madison_lidar_2009_heights/normalized")
    opt_output_files(ctg2009norm) <- "~/hgt_data/madison_lidar_2009_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2009norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2009norm, res = 3, p2r(1))
#+end_src

#+BEGIN_SRC sh
cd ~/hgt_data/madison_lidar_2009_heights/all_chm/
gdalbuildvrt ../height_2009.vrt *.tif
#+END_SRC

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.

#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../height_norm_2009.tif
#+END_SRC

***** pulse density
#+begin_src R
  library(lidR)
    ctg2009norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized")
    opt_output_files(ctg2009norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/grid_density/{ORIGINALFILENAME}_gd"
    opt_filter(ctg2009norm) <- "-drop_z_above 120"
  gd <- grid_density(ctg2009norm, res = 15)
#+end_src

#+RESULTS:
: Be careful, some tiles seem to overlap each other. lidR may return incorrect outputs with edge artifacts when processing this catalog.
: Processing [>-------------------------------------------]   1% (1/87) eta:  6mProcessing [>-------------------------------------------]   2% (2/87) eta:  4mProcessing [=>------------------------------------------]   3% (3/87) eta:  4mProcessing [=>------------------------------------------]   5% (4/87) eta:  7mProcessing [==>-----------------------------------------]   6% (5/87) eta:  9mProcessing [==>-----------------------------------------]   7% (6/87) eta: 10mProcessing [===>----------------------------------------]   8% (7/87) eta: 11mProcessing [===>----------------------------------------]   9% (8/87) eta: 11mProcessing [====>---------------------------------------]  10% (9/87) eta: 11mProcessing [====>--------------------------------------]  11% (10/87) eta: 10mProcessing [====>--------------------------------------]  13% (11/87) eta: 10mProcessing [=====>-------------------------------------]  14% (12/87) eta:  9mProcessing [=====>-------------------------------------]  15% (13/87) eta:  9mProcessing [======>------------------------------------]  16% (14/87) eta:  8mProcessing [======>------------------------------------]  17% (15/87) eta:  8mProcessing [=======>-----------------------------------]  18% (16/87) eta:  8mProcessing [=======>-----------------------------------]  20% (17/87) eta:  7mProcessing [========>----------------------------------]  21% (18/87) eta:  7mProcessing [========>----------------------------------]  22% (19/87) eta:  7mProcessing [=========>---------------------------------]  23% (20/87) eta:  6mProcessing [=========>---------------------------------]  24% (21/87) eta:  6mProcessing [==========>--------------------------------]  25% (22/87) eta:  6mProcessing [==========>--------------------------------]  26% (23/87) eta:  5mProcessing [===========>-------------------------------]  28% (24/87) eta:  5mProcessing [===========>-------------------------------]  29% (25/87) eta:  5mProcessing [============>------------------------------]  30% (26/87) eta:  5mProcessing [============>------------------------------]  31% (27/87) eta:  5mProcessing [=============>-----------------------------]  32% (28/87) eta:  5mProcessing [=============>-----------------------------]  33% (29/87) eta:  4mProcessing [==============>----------------------------]  34% (30/87) eta:  4mProcessing [==============>----------------------------]  36% (31/87) eta:  4mProcessing [===============>---------------------------]  37% (32/87) eta:  4mProcessing [===============>---------------------------]  38% (33/87) eta:  4mProcessing [================>--------------------------]  39% (34/87) eta:  4mProcessing [================>--------------------------]  40% (35/87) eta:  4mProcessing [=================>-------------------------]  41% (36/87) eta:  3mProcessing [=================>-------------------------]  43% (37/87) eta:  3mProcessing [==================>------------------------]  44% (38/87) eta:  3mProcessing [==================>------------------------]  45% (39/87) eta:  3mProcessing [===================>-----------------------]  46% (40/87) eta:  3mProcessing [===================>-----------------------]  47% (41/87) eta:  3mProcessing [====================>----------------------]  48% (42/87) eta:  3mProcessing [====================>----------------------]  49% (43/87) eta:  3mProcessing [=====================>---------------------]  51% (44/87) eta:  3mProcessing [=====================>---------------------]  52% (45/87) eta:  3mProcessing [======================>--------------------]  53% (46/87) eta:  2mProcessing [======================>--------------------]  54% (47/87) eta:  2mProcessing [=======================>-------------------]  55% (48/87) eta:  2mProcessing [=======================>-------------------]  56% (49/87) eta:  2mProcessing [========================>------------------]  57% (50/87) eta:  2mProcessing [=========================>-----------------]  60% (52/87) eta:  2mProcessing [=========================>-----------------]  61% (53/87) eta:  2mProcessing [==========================>----------------]  62% (54/87) eta:  2mProcessing [==========================>----------------]  63% (55/87) eta:  2mProcessing [===========================>---------------]  64% (56/87) eta:  2mProcessing [===========================>---------------]  66% (57/87) eta:  2mProcessing [============================>--------------]  67% (58/87) eta:  2mProcessing [=============================>-------------]  69% (60/87) eta:  1mProcessing [=============================>-------------]  70% (61/87) eta:  1mProcessing [==============================>------------]  71% (62/87) eta:  1mProcessing [==============================>------------]  72% (63/87) eta:  1mProcessing [===============================>-----------]  74% (64/87) eta:  1mProcessing [===============================>-----------]  75% (65/87) eta:  1mProcessing [================================>----------]  76% (66/87) eta:  1mProcessing [================================>----------]  77% (67/87) eta:  1mProcessing [=================================>---------]  78% (68/87) eta:  1mProcessing [=================================>---------]  79% (69/87) eta:  1mProcessing [==================================>--------]  80% (70/87) eta:  1mProcessing [==================================>--------]  82% (71/87) eta:  1mProcessing [===================================>-------]  83% (72/87) eta: 47sProcessing [===================================>-------]  84% (73/87) eta: 43sProcessing [====================================>------]  85% (74/87) eta: 40sProcessing [====================================>------]  86% (75/87) eta: 37sProcessing [=====================================>-----]  87% (76/87) eta: 34sProcessing [=====================================>-----]  89% (77/87) eta: 30sProcessing [======================================>----]  90% (78/87) eta: 27sProcessing [======================================>----]  91% (79/87) eta: 24sProcessing [=======================================>---]  92% (80/87) eta: 21sProcessing [=======================================>---]  93% (81/87) eta: 18sProcessing [========================================>--]  94% (82/87) eta: 15sProcessing [========================================>--]  95% (83/87) eta: 12sProcessing [=========================================>-]  97% (84/87) eta:  9sProcessing [=========================================>-]  98% (85/87) eta:  6sProcessing [==========================================>]  99% (86/87) eta:  3sProcessing [===========================================] 100% (87/87) eta:  0s
: There were 50 or more warnings (use warnings() to see the first 50)

it didn't finish, i'mnot sure why

#+begin_src sh
cd ~/hgt_data/madison_lidar_2017_heights/grid_density/

gdalbuildvrt ../gd_2017.vrt *.tif
#+end_src

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.

***** get extents to select a downtown tile?
#+begin_src R

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
  shapefile(p, "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/lidar_extents.shp")


#+end_src

#+RESULTS:
: There were 50 or more warnings (use warnings() to see the first 50)

same area as 2016:
"lc2t71007f_ground_normalized.las"
#+begin_src R

  l <- readLAS("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/lc2t71007f_ground_normalized.las")
  plot(l)
  #chm <- grid_canopy(l, 3, p2r(1))
  #plot(chm)
  #e <- drawExtent()
  e <- new("Extent", xmin = 827161.463391346, xmax = 828579.428253175, 
      ymin = 486162.738356131, ymax = 487289.679000948)
  l1 <- lasclip(l, e)
  writeLAS(l1, "test2009.las")

#+end_src

#+RESULTS:
: Warning message:
: There are 0 points flagged 'synthetic'.
: Error in rgl::rgl.setMouseCallbacks(button, begin, update, dev = dev,  : 
:   unused arguments (dev = dev, subscene = subscene)

testing
#+begin_src R


      pct_x_is<- function(x, is) {
          return(list(pct_x = sum(x == is) / length(x)))
          }

  #l <- readLAS("test2009.las", filter = "-drop_z_below 6")
  l <- readLAS("test2009.las", filter = "-keep_first -drop_z_below 6 -thin_with_voxel 3")  # thin so that point density is constant?
  proj4string(l) <- "+init=epsg:7599"
  plot(l)

    lsp <- lasdetectshape(l, shp_plane(th1 = 6, th2 = 6, k = 8), "building")
    plot(lsp, color = "building")

    pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 30)

  lsp@data$pct_x <- pm$pct_x
  plot(lsp, color = "pct_x")

    lsp@data$building[pm$pct_x > .6] <- TRUE
    lsp@data$building[pm$pct_x < .4] <- FALSE

  plot(lsp, color = "building")

    lf <- lasfilter(lsp, building == FALSE)
    lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")

  plot(lfl, color = "building")

    pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)

    lfl@data$building[pm$pct_x > .4] <- TRUE
    lfl@data$building[pm$pct_x < .1] <- FALSE
  lf <- lasfilter(lfl, building == FALSE)
  plot(lf)

#+end_src

extract tree points from the lidar, the variable point density might
make this challenging....
#+begin_src R

    library(lidR)

    pct_x_is<- function(x, is) {
        return(list(pct_x = sum(x == is) / length(x)))
    }

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/"
  tiles.w.trees <- list.files(dir, pattern = ".*.las")

    lapply(tiles.w.trees, function(tile) {
        l <- readLAS(paste0(dir, tile), filter = "-keep_first -drop_z_below 6 -thin_with_voxel 3")
        proj4string(l) <- "+init=epsg:7599"

        lsp <- lasdetectshape(l, shp_plane(th1 = 6, th2 = 6, k = 8), "building")


        pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 30)

        lsp@data$building[pm$pct_x > .6] <- TRUE
        lsp@data$building[pm$pct_x < .4] <- FALSE



        lf <- lasfilter(lsp, building == FALSE)
        lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")

        pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)

        lfl@data$building[pm$pct_x > .4] <- TRUE
        lfl@data$building[pm$pct_x < .1] <- FALSE
        lf <- lasfilter(lfl, building == FALSE)

        writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/trees_lidar/",tile))

    })


#+end_src

create lax
#+begin_src sh

#+end_src

#+begin_src R
  library(lidR)
    ctg2009trees <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/trees_lidar")
    opt_output_files(ctg2009trees) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    chm <- grid_canopy(ctg2009trees, res = 3, p2r(1))
#+end_src


#+BEGIN_SRC sh :session *a* :results verbatim
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/tree_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../tree_height_norm_2009.tif
#+END_SRC

#+RESULTS:
: 
: Input file size is 30105, 30256
: 0ERROR 5: lc2t81009f_ground_normalized_tree_chm.tif, band 1: Access window out of range in RasterIO().  Requested
: (0,0) of size 1773x256 on raster of 1771x1788.












chm, quick and easy algorithm
#+begin_src R
  library(lidR)
  ctg2009norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/")
  opt_output_files(ctg2009norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/chm/{ORIGINALFILENAME}_chm"
  grid_canopy(ctg2009norm, 4, p2r(6)) 
#+end_src

#+BEGIN_SRC sh
cd /media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/

gdalbuildvrt chm2.vrt *chm2.tif

#+END_SRC

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.



chm, pitless algoright, too slow to be worth running.
#+begin_src R :eval no
  library(lidR)
  ctg2009norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/normalized/")
  opt_output_files(ctg2009norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/{ORIGINALFILENAME}_chm_pitfree"
  grid_canopy(ctg2009norm, 4, pitfree(c(0,6,12), c(0,1), subcircle = 6)) 
#+end_src

**** TODO FIX THE RESOLUTION!!!!!!!  2010 lidar derived (NGA)

***** create height tif
There is no raw point cloud available.  It's been "destroyed"
(personal communication with John at the NGA (571 721 2159 or maybe
571 721 7999)

In the meta data it says the point cloud has "sub meter ground sample distance".

date april 9 2010

But there is a raster layer of the dem and the dsm (the elevation of
the ground and the elevation of the stuff above the ground).  I can
take their difference to find the height.



elevation
#+begin_src R
library(raster)
ground <- raster("/home/erker/hgt_data/madison_2010_nga_lidar_derived/US Cities/Madison_20100409/Digital Terrain Model (DTM)/DTM - Not Specified/U_US-Cities_dtm_ns_20191101.1118_6.tif")

  e <- new("Extent", xmin = 827161.463391346, xmax = 828579.428253175, 
      ymin = 486162.738356131, ymax = 487289.679000948)
ge <- crop(ground, e)
#+end_src

#+RESULTS:
: 
: Error in .local(x, y, ...) : extents do not overlap

surface
#+begin_src R
first <- raster("/home/erker/hgt_data/madison_2010_nga_lidar_derived/US Cities/Madison_20100409/Digital Surface Model (DSM)/DSM - First Return/U_US-Cities_dsm_first_return_20191101.1118_5.tif")
#+end_src

#+RESULTS:

#+begin_src R
diff <- first - ground
#+end_src

#+RESULTS:

#+begin_src R
    diff <- projectRaster(diff, crs = CRS("+init=epsg:7599"))
  # convert to feet like all the rest of the layers
  diff <- diff * 3.28084
    writeRaster(diff, "~/hgt_data/madison_lidar_2010_heights/height_2010.tif", overwrite = T)
#+end_src


***** tile chm
#+begin_src R
  library(TileManager)

  h2010 <- raster("~/hgt_data/madison_lidar_2010_heights/height_2010.tif")
  ts <- TileScheme(h2010, dimByDist = 10000, buffer = 20)

  lapply(1:length(ts$buffPolygons), function(i) {
      crop(h2010, ts$buffPolygons[i,], filename = paste0("~/hgt_data/madison_lidar_2010_heights/all_chm/",i,"_chm.tif"))
  })
#+end_src

#+RESULTS:

#+BEGIN_SRC sh
cd ~/hgt_data/madison_lidar_2010_heights/all_chm/

gdalbuildvrt ../height_2010.vrt *.tif

#+END_SRC

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.

**** 2016 lidar
epsg 7599
***** normalize
#+begin_src R
  library(stringr)
  library(lidR)

      f <- list.files("/media/erker/DATA_ERKER/data/madison_lidar_2016/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Madison_2016_City_Delivery/Classified_LAS/LAS/", 
                    pattern = ".*.las$",
                    full.names = T)

                                      #file 72.las seems to have errors, so I skip it.

  lapply(f[204:231], function(file) {
      i <- str_match(file, "([0-9]+).las$")[,2]
      if (i != "72") {
          l <- readLAS(file)
          if(sum(l@data$Classification == 2) != 0) {                  # if there are some ground points
              ln <- lasnormalize(l, tin())
              writeLAS(ln, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_normalized.las"))
          }
      }
  })

#+end_src

***** create lax (las index)

i had to download LAStools and run make in the directory.

#+BEGIN_SRC sh :session a
cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/
/home/erker/Downloads/LAStools/bin/lasindex -i *.las

#+END_SRC

#+RESULTS:

***** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2016norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src

#+RESULTS:


#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../height_norm_2016.tif
#+END_SRC


***** find the tiles that overlap with the madison tree inventory data
#+begin_src R
  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
                                          #shapefile(p, "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/lidar_extents.shp")


  p <- shapefile("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/lidar_extents.shp")

  proj4string(p) <- "+init=epsg:7599"

  trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  trees <- spTransform(trees, crs(p))

  o <- over(trees, p)
  o <- unique(o)

  tiles.w.trees <- na.omit(o$tile)

#+end_src

#+RESULTS:

#+begin_src R :results output :file tiles.w.trees.txt
writeLines(tiles.w.trees)

#+end_src

#+RESULTS:
[[file:tiles.w.trees.txt]]

***** extract tree points from the lidar
#+begin_src R
  #   library(devtools)
  #   install_github("Jean-Romain/lidR", ref = "devel")

  tiles.w.trees <- readLines("tiles.w.trees.txt")

     library(lidR)

      pct_x_is<- function(x, is) {
          return(list(pct_x = sum(x == is) / length(x)))
          }

     lapply(tiles.w.trees, function(tile) {
         l <- readLAS(paste0(dir, tile))

         proj4string(l) <- "+init=epsg:7599"

         lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 10), "building")

         pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 50)

         lsp@data$building[pm$pct_x > .6] <- TRUE
         lsp@data$building[pm$pct_x < .4] <- FALSE

         lf <- lasfilter(lsp, building == FALSE)
         lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")

         pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)

         lfl@data$building[pm$pct_x > .4] <- TRUE
         lfl@data$building[pm$pct_x < .1] <- FALSE
         lf <- lasfilter(lfl, building == FALSE)

         writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar/",tile))

     })


#+end_src


This worked pretty well, but there are some towers that I missed.
I'll need to filter by height when I read in to make the chm.  Or
maybe do another clean up with point metrics.


#+begin_src R
    library(lidR)

    pct_x_is<- function(x, is) {
        return(list(pct_x = sum(x == is) / length(x)))
    }

    dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar/"

  tiles.w.trees <- readLines("tiles.w.trees.txt")


    lapply(tiles.w.trees, function(tile) {
        l <- readLAS(paste0(dir, tile))

        proj4string(l) <- "+init=epsg:7599"

        lsp <- lasdetectshape(l, shp_line(th1 = 10, k = 5), "line")
        lsp@data$line[lsp@data$Z > 140] <- TRUE
        pm <- point_metrics(lsp, ~pct_x_is(x = line, is = TRUE), k = 10)
        lsp@data$line[pm$pct_x > .5] <- TRUE
        lsp@data$line[pm$pct_x < .3] <- FALSE
        pm <- point_metrics(lsp, ~pct_x_is(x = line, is = TRUE), k = 50)
        lsp@data$line[pm$pct_x > .4] <- TRUE
        lf <- lasfilter(lsp, Z < 140, line == FALSE)

        writeLAS(lf, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar_linefiltered/",tile))

    })


#+end_src

#+RESULTS:


***** Create the tree chm
#+begin_src R
  library(lidR)
    ctg2016trees <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/trees_lidar_linefiltered/")
    opt_output_files(ctg2016trees) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    chm <- grid_canopy(ctg2016trees, res = 3, p2r(1))
#+end_src

#+RESULTS:


#+BEGIN_SRC sh :session *a*
cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" grid_canopy.vrt ../tree_height_norm_2016.tif
#+END_SRC


STOP here until I have a good tree chm for each year.




#+begin_src R
  library(raster)
  chm <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/102_normalized_tree_chm.tif")

  trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  trees <- spTransform(trees, crs("+init=epsg:7599"))
  crowns = silva2016(chm, trees, max_cr_factor = .6)()  # crowns may be biased small, but I'm focusing on height, so this is OK for now
  writeRaster(crowns, "test2.tif", overwrite = T)


#+end_src

#+RESULTS:






***** testing finding trees






#+begin_src R

   l <- readLAS("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/102_normalized.las",
                 filter = "-drop_class 9 -drop_z_above 200 -drop_z_below 0")
      chm <- grid_canopy(l, res = 3, p2r(1))
  plot(chm)
  #e <- drawExtent()

  e <- new("Extent", xmin = 826616.082997855, xmax = 828596.309091884, 
      ymin = 485978.641378534, ymax = 487311.522306307)

  l2 <- lasclip(l, e)

  writeLAS(l2, "test2016.las")

#+end_src

#+RESULTS:



possible plan, 

- get only those points that are certainly tree
- add back in points that are near the certainly tree points.



I need a rule that if a point is within 1m of something I know for
sure is a building, to call it a building.


try voxel
#+begin_src R
  #install_github("Jean-Romain/lidR", ref = "devel")
  library(lidR) 
  library(devtools)

  pct_x_is<- function(x, is) {
      return(list(pct_x = sum(x == is) / length(x)))
      }

  # point_metrics https://github.com/Jean-Romain/lidR/issues/276
  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first")
  plot(l)
  lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 10), "building")
  plot(lsp, color = "building", col = c("green", "red"))
  lsl <- lasdetectshape(l, shp_line(th1 = 2, k = 17), "building")
  plot(lsl, color = "building", col = c("green", "red"))

  l <- lasadddata(l, (lsp@data$building == T) | (lsl@data$building == T), "building")


  pm <- point_metrics(l, ~pct_x_is(x = building, is = TRUE), k = 20)

  l <- lasadddata(l, pm$pct_x, "pct_x")
  plot(l, color = "pct_x", trim = 1)
  l@data$building[pm$pct_x > .9] <- TRUE
  l@data$building[pm$pct_x < .4] <- FALSE
  plot(l, color = "building", col = c("green", "red"))


  pm <- point_metrics(lsp, ~pct_x_is(x = building, is = TRUE), k = 50)
  lsp@data$building[pm$pct_x > .6] <- TRUE
  lsp@data$building[pm$pct_x < .4] <- FALSE
  plot(lsp, color = "building", col = c("green", "red"))



  # try to get powerlines and tower
  lf <- lasfilter(lsp, building == FALSE)
  lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")   #lfl <- lasdetectshape(lf, shp_line(th1 = 4, k = 15), "building")  
  plot(lfl, color = "building")
  pm <- point_metrics(lfl, ~pct_x_is(x = building, is = TRUE), k = 30)
  lfl <- lasadddata(lfl, pm$pct_x, "pct_x")
  plot(lfl, color = "pct_x", trim = 1)

  lfl@data$building[pm$pct_x > .4] <- TRUE
  lfl@data$building[pm$pct_x < .1] <- FALSE
  plot(lfl, color = "building", col = c("green", "red"))

#+end_src

****** point cloud viewer backedn
#+begin_src R
  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first")
  plot(l, backend = "pcv")

#+end_src

****** CHM for just trees
#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/{ORIGINALFILENAME}_tree_chm"
    opt_filter(ctg2016norm) <- "-keep_class 2 -drop_z_above 200 -drop_z_below 0"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src




#+begin_src R

  f2 <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/", ".*_normalized.las")

      lapply(f2, function(file) {
            i <- str_match(file, "([0-9]+).*.las$")[,2]
            l <- readLAS(file)
          if(sum(l@data$Classification == 2) != 0) {                  # if there are some ground points
            chm <- grid_canopy(l, res = 3, p2r(1))
            proj4string(chm) <- "+init=epsg:7599"
            writeRaster(chm, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_.tif"), overwrite = T)
          }
      })



  ctg <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/")
  opt_output_files(ctg) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/pitfree/{ORIGINALFILENAME}"
  chm.ctg <- grid_canopy(ctg, 3, pitfree(c(0,6,15,30,45), c(0,1), subcircle = 1.5))


      lapply(f2[44:length(f2)], function(file) {
            i <- str_match(file, "([0-9]+).*.las$")[,2]
            l <- readLAS(file)
          if(sum(l@data$Classification == 2) != 0) {                  # if there are some ground points
            chm <- grid_canopy(l, 3, pitfree(c(0,6,15,30,45), c(0,1), subcircle = 1.5))
            proj4string(chm) <- "+init=epsg:7599"
            writeRaster(chm, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_pitfree.tif"), overwrite = T)
          }
      })

  f3 <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/", ".*_pitfree.tif")


#+end_src

#+RESULTS:

#+BEGIN_SRC sh

cd /media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/

gdalbuildvrt height_.vrt *_.tif
gdalbuildvrt height_pitfree.vrt *_pitfree.tif

#+END_SRC

#+RESULTS:
| 0...10...20...30...40...50...60...70...80...90...100 | 0 | done. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0 | done. |



segment trees
#+begin_src R
      library(lidR)
        i <- 205

      f <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/",i,"_.tif")
      chm <- raster(f)


  fl <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/",i,"_normalized.las")
  l <- readLAS(fl, filter = "-drop_z_below 0")
  proj4string(l) <- "+init=epsg:7599"
  chm <- grid_canopy(l, res = 1, pitfree(c(0,6,15,30,45), c(0,1), subcircle = 1.5))

  chme <- crop(chm, e)
  writeRaster(chme, "test.tif", overwrite = T)






  library(raster)
  chm <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/101_pitfree.tif")

  ttops <- tree_detection(chme, lmf(ws = function(h){h+3}, hmin = 6, shape = "circular"))
  crowns = silva2016(chme, ttops)()
  writeRaster(crowns, "test2.tif", overwrite = T)



  trees <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  trees <- spTransform(trees, crs("+init=epsg:7599"))


    ttops = tree_detection(l, lmf(100, hmin = 6, shape = "circular"))
    plot(chm)
    plot(ttops, add = T)


  ttops <- tree_detection(
  crowns = silva2016(chme, ttops)()
  writeRaster(crowns, "test2.tif", overwrite = T)
#+end_src

#+RESULTS:
: Local maximum filter: 79%Local maximum filter: 80%Local maximum filter: 81%Local maximum filter: 82%Local maximum filter: 83%Local maximum filter: 84%Local maximum filter: 85%Local maximum filter: 86%Local maximum filter: 87%Local maximum filter: 88%Local maximum filter: 89%Local maximum filter: 90%Local maximum filter: 91%Local maximum filter: 92%Local maximum filter: 93%Local maximum filter: 94%Local maximum filter: 95%Local maximum filter: 96%Local maximum filter: 97%Local maximum filter: 98%Local maximum filter: 99%Local maximum filter: 100%> > > > > > > > > > > > > > > > > > > > > Local maximum filter: 1%Local maximum filter: 2%Local maximum filter: 3%Local maximum filter: 4%Local maximum filter: 5%Local maximum filter: 6%Local maximum filter: 7%Local maximum filter: 8%Local maximum filter: 9%Local maximum filter: 10%Local maximum filter: 11%Local maximum filter: 12%Local maximum filter: 13%Local maximum filter: 14%Local maximum filter: 15%Local maximum filter: 16%Local maximum filter: 17%Local maximum filter: 18%Local maximum filter: 19%Local maximum filter: 20%Local maximum filter: 21%Local maximum filter: 22%Local maximum filter: 23%Local maximum filter: 24%Local maximum filter: 25%Local maximum filter: 26%Local maximum filter: 27%Local maximum filter: 28%Local maximum filter: 29%Local maximum filter: 30%71316 points below 0 found.
: Local maximum filter: 31%Processing [=================================>---------]  79% (27/34) eta:  8mLocal maximum filter: 32%Local maximum filter: 33%Local maximum filter: 34%Local maximum filter: 35%Local maximum filter: 36%Local maximum filter: 37%Local maximum filter: 38%Local maximum filter: 39%Local maximum filter: 40%Local maximum filter: 41%Local maximum filter: 42%Local maximum filter: 43%Local maximum filter: 44%Local maximum filter: 45%Local maximum filter: 46%Local maximum filter: 47%Local maximum filter: 48%Local maximum filter: 49%Local maximum filter: 50%Local maximum filter: 51%Local maximum filter: 52%Local maximum filter: 53%Local maximum filter: 54%Local maximum filter: 55%Local maximum filter: 56%Local maximum filter: 57%Local maximum filter: 58%Local maximum filter: 59%Local maximum filter: 60%Local maximum filter: 61%Local maximum filter: 62%Local maximum filter: 63%Local maximum filter: 64%Local maximum filter: 65%Local maximum filter: 66%Local maximum filter: 67%Local maximum filter: 68%Local maximum filter: 69%Local maximum filter: 70%Local maximum filter: 71%Local maximum filter: 72%Local maximum filter: 73%Local maximum filter: 74%Local maximum filter: 75%Local maximum filter: 76%Local maximum filter: 77%Local maximum filter: 78%Local maximum filter: 79%Local maximum filter: 80%Local maximum filter: 81%Local maximum filter: 82%Local maximum filter: 83%Local maximum filter: 84%Local maximum filter: 85%Local maximum filter: 86%Local maximum filter: 87%Local maximum filter: 88%Local maximum filter: 89%Local maximum filter: 90%Local maximum filter: 91%Local maximum filter: 92%Local maximum filter: 93%Local maximum filter: 94%Local maximum filter: 95%Local maximum filter: 96%Local maximum filter: 97%Local maximum filter: 98%Local maximum filter: 99%Local maximum filter: 100%> > > > > + + Error: unexpected symbol in:
: "crowns = silva2016(chme, ttops)()
: writeRaster"









#+begin_src R
  library(lidR)
  ctg <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/")

i <- 205

  fl <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/",i,"_normalized.las")
  fh <- 
  l <- readLAS(f) #should specify only spatial coordinates

  l <- lastrees(l, li2012())

#+end_src

#+RESULTS:
: 1924 points below 0 found.

****** old stuff




CHM for multiple returns (approximately trees)
#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/multiple_chm/{ORIGINALFILENAME}_tree_chm"
    opt_filter(ctg2016norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src

#+RESULTS:


the multiple return approach also included building edges.  I need to find a way to just get tree points
#+begin_src R
      ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar")
      opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_las/{ORIGINALFILENAME}_tree_chm"
      opt_filter(ctg2016norm) <- "-drop_z_above 200 -drop_z_below 0"

  dir <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar/"
    files <- list.files(dir, pattern = ".*.las$",
                        full.names = F)

    lapply(files, function(f) {
        l <- readLAS(paste0(dir,f))
        ls <- lasdetectshape(l, shp_line(th1 = 10, k = 5), "Colinear")
        lsp <- lasdetectshape(ls, shp_plane(th1 = 4, th2 = 4, k = 11), "Coplanar")
        lsp@data[(!lsp@data$Coplanar) & (!lsp@data$Colinear) & (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1) & (lsp@data$Intensity < 100)]$Classification <- 5L
        writeLAS(lsp, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar_wtree/",f))
  })



#+end_src

#+RESULTS:

#+begin_src R
  library(lidR)
    ctg2016norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/normalized_lidar_wtree")
    opt_output_files(ctg2016norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2016norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0 -keep_class 5"
    chm <- grid_canopy(ctg2016norm, res = 3, p2r(1))
#+end_src

#+RESULTS:














**** 2017 lidar

***** get metadata and reports
#+BEGIN_SRC sh :session a
cd ~/hgt_data/dane_lidar_2017/
wget -r ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Metadata/
wget -r ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Reports/
#+END_SRC
***** download which tiles intersect with tree
download tiles
#+BEGIN_SRC sh
cd /home/erker/hgt_data/dane_lidar_2017/
wget -r ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Tile_Index/
#+END_SRC

find tiles that intersect
#+begin_src R
  library(raster)
  tiles <- shapefile("/home/erker/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Tile_Index/DaneCo_WI_Tile_Index.shp")

  trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

  trees <- spTransform(trees, crs(tiles))

  tree.tiles <- over(trees, tiles)

  tree.tiles.u <- unique(tree.tiles)

#+end_src

save out to file
#+begin_src R :file tree_tiles_2017.txt
  writeLines(tree.tiles.u$Name_Final)
#+end_src

#+RESULTS:
[[file:tree_tiles_2017.txt]]

Download those tiles from ftp

DOES USGS EVEN WORK? RIGHT HEADER????

do esri instead

actually it just might have been one of the tiles.  I may have to
manually fix the header.....

#+BEGIN_SRC sh :session *a*

cd ~/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/

while IFS= read -r line;
do
tile=${line}_esri.las
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/$tile
done < ~/git/hgt/tree_tiles_2017.txt

#+END_SRC

redoing troublesome tiles
#+BEGIN_SRC sh :session *a*
cd ~/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/
#wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/0817_esri.las
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/0671_esri.las
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/0724_esri.las
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/1121_esri.las
#+END_SRC






#+begin_src R
library(lidR)
l <- readLAS("/home/erker/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/0673_esri.las")
#plot(l, trim = 900)
plot(l, color = "Classification")
#+end_src

#+RESULTS:

***** think about checking out their raster dems
#+BEGIN_SRC sh
ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Raster_DEM_Tiles/
#+END_SRC

***** normlalize the lidar

#+BEGIN_SRC sh

#+END_SRC

#+begin_src R
library(lidR)
#l <- readLAS("/Users/erker/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/USGS/0523_usgs.las")
l <- readLAS("/Users/erker/Downloads/0523_esri.las")
#+end_src

#+RESULTS:

Reclassify water as ground so that normalization is faster.....
#+begin_src R
  dir <- "~/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/"
      fs <- list.files(dir,
                       full.names = F,
                       pattern = ".las$")

  out.dir <- "~/hgt_data/dane_lidar_2017/water_ground/"

    lapply(fs, function(f) {
      l <- readLAS(paste0(dir,f))
      l@data$Classification[l@data$Classification == 9] <- 2L
      writeLAS(l, paste0(out.dir, f))
    })

#+end_src

#+begin_src R
  library(lidR)
  ctg2017 <- catalog("~/hgt_data/dane_lidar_2017/water_ground/")
  opt_output_files(ctg2017) <- "~/hgt_data/dane_lidar_2017/normalized/{ORIGINALFILENAME}_normalized"
  lasnormalize(ctg2017, tin())
#+end_src

#+begin_src R :session *R:hggt2:
library(lidR)
l <- readLAS("/home/erker/hgt_data/dane_lidar_2017/normalized/0869_esri_normalized.las")
plot(l)
#+end_src

#+RESULTS:

***** make lax for normalized
#+begin_src sh :session b
cd /home/erker/hgt_data/dane_lidar_2017/normalized/
/home/erker/LAStools/bin/lasindex -i *.las
#+end_src

***** make normalized chm (this includes buildings, but excludes some points)
#+begin_src R
  library(lidR)
  l <- readLAS("/home/erker/hgt_data/dane_lidar_2017/normalized_notdone/1065_esri_normalized.las",
               filter = "-drop_z_above 120 -drop_z_below 6")
  plot(l)
#+end_src

#+RESULTS:
: Loading required package: raster
: Loading required package: sp
: lidR 2.2.0 using 4 threads. Help on <gis.stackexchange.com>. Bug report on <github.com/Jean-Romain/lidR>.


#+begin_src R
  library(lidR)
  library(stringr)
  dir <- "~/hgt_data/dane_lidar_2017/normalized_notdone/"
      fs <- list.files(dir,
                       full.names = F,
                       pattern = ".las$")

  out.dir <- "~/hgt_data/madison_lidar_2017_heights/all_chm/"

  lapply(fs, function(f) {
      bn <- basename(f)
      bn <- str_sub(bn, 1, -5)
      l <- readLAS(paste0(dir,f), filter = "-drop_z_above 120 -drop_z_below 6")
      chm <- grid_canopy(l, res = 3, p2r(1))
      writeRaster(chm, paste0(out.dir, bn, "_chm.tif"), overwrite = T)
  })

#+end_src

this isn't working well.  But I don't know why?  They run really fast
as singletons.  try just lapply through all the files
#+begin_src R :eval no
  library(lidR)
    ctg2017norm <- catalog("~/hgt_data/dane_lidar_2017/normalized_notdone")
    opt_output_files(ctg2017norm) <- "~/hgt_data/madison_lidar_2017_heights/all_chm/{ORIGINALFILENAME}_chm"
    opt_filter(ctg2017norm) <- "-drop_z_above 120 -drop_z_below 6"
    chm <- grid_canopy(ctg2017norm, res = 3, p2r(1))
#+end_src

#+RESULTS:
: Loading required package: raster
: Loading required package: sp
: lidR 2.2.0 using 4 threads. Help on <gis.stackexchange.com>. Bug report on <github.com/Jean-Romain/lidR>.
: 
:   |                                                                              |                                                                      |   0%  |                                                                              |=                                                                     |   1%Error: filename exists; use overwrite=TRUE

#+begin_src sh
cd ~/hgt_data/madison_lidar_2017_heights/all_chm/

gdalbuildvrt height_2017.vrt *.tif
#+end_src

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.


#+begin_src sh
cd ~/hgt_data/madison_lidar_2017_heights/all_chm/
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" -a_srs EPSG:7599 height_2017.vrt ../height_2017.tif
#+end_src

#+RESULTS:
|                                                Input | file | size  | is | 16623, | 8264 |
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |      |

***** get the pulse density 
#+begin_src R
  library(lidR)
    ctg2017norm <- catalog("~/hgt_data/madison_lidar_2017_heights/normalized")
    opt_output_files(ctg2017norm) <- "~/hgt_data/madison_lidar_2017_heights/grid_density/{ORIGINALFILENAME}_gd"
    opt_filter(ctg2017norm) <- "-drop_z_above 120 -drop_z_below 6 -keep_first"
  gd <- grid_density(ctg2017norm, res = 15)
#+end_src

it didn't finish, i'mnot sure why

#+begin_src sh
cd ~/hgt_data/madison_lidar_2017_heights/grid_density/

gdalbuildvrt ../gd_2017.vrt *.tif
#+end_src

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.

***** get lidar extents
#+begin_src R

  dir <- "~/hgt_data/madison_lidar_2017_heights/normalized/"
        fs <-   list.files(dir,
                   pattern = ".las",
                   full.names = F)

    es <-     lapply(fs, function(f) {
        e <- extent(readLAS(paste0(dir, f), select = "", filter = "-keep_every_nth 100"))
        a <- as(e, "SpatialPolygons")
        a <- SpatialPolygonsDataFrame(a, data.frame(tile = f))
        return(a)
    })

  p <- do.call("rbind", es)
  shapefile(p, "~/hgt_data/madison_lidar_2017_heights/normalized/lidar_extents.shp")

#+end_src

#+RESULTS:
: 
: Error in rgdal::writeOGR(x, filename, layer, driver = "ESRI Shapefile",  : 
:   Layer creation failed

*** make tree buffer shapefile, excluding neighbors that are too close with a lower DBH.  Note: trees with no dbh are dropped.
#+begin_src R
   library(raster)
   library(rgeos)
   library(dplyr)

   trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
   trees <- spTransform(trees, crs("+init=epsg:7599"))


   genera.to.filter <- dimnames(sort(table(trees@data$Genus), decreasing = T))[[1]][1:42]

   genera.to.filter <- genera.to.filter[!genera.to.filter %in% c("Stump", "Vacant", "Unkown")]

   trees <- trees[trees@data$Genus %in% genera.to.filter,]

   trees <- trees[as.numeric(trees@data$DBH) > 0,]
   trees <- trees[as.numeric(trees@data$DBH) < 200,]


   trees@data <-   select(trees@data, UID, DBH, Genus, Species)

   p <- gBuffer(trees, width = 8, byid = T)
   pa <- aggregate(p)
   pd <- disaggregate(pa)

   o <- over(pd, trees, returnList = T)

   uids <- lapply(o, function(e) {
       set.seed(1)
       sample(e$UID[e$DBH == max(as.numeric(e$DBH), na.rm = T)], 1) # randomly select 1 of many
   })

   po <- p[p@data$UID %in% unlist(uids),]

   po@data$DBH <- as.numeric(po@data$DBH)

   shapefile(po, "/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp", overwrite = T)

 #+end_src

*** extract lidar clouds within tree buffers  Note: since I have tree points, I"m going to sample from the entire lidar point cloud

I extract points at each tree from the tree point filtered point clouds, save in
"tree _ year _ treelas".  Extract points at each tree from the
normalized point cloud.

I think that the benefit of having all the points is greater than the
penalty of potentially including some non-tree points.  But I haven't
really tested this.

**** 2017
 #+begin_src R
   library(doParallel)
   library(foreach)
   library(lidR)
   library(dplyr)
   library(stringr)
   library(rgeos)

   b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
   b <- spTransform(b, crs("+init=epsg:7599"))
   b@data <- select(b@data, UID)

   fl <- list.files("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/",
                    pattern = ".*.las",
                    full.names = T)


   # crop the polygons so that a huge object doesn't need to be sent to each node
   tiles.w.trees.i <- unlist(lapply(str_extract_all(fl, "[0-9]{4}"), function(x) x[2]))

   tiles <- shapefile("/home/erker/hgt_data/dane_lidar_2017/ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Tile_Index/DaneCo_WI_Tile_Index.shp")
   tiles <- spTransform(tiles, crs(b))

   tiles.w.trees <- tiles[tiles@data$Name_Final %in% tiles.w.trees.i,]

   lapply(tiles.w.trees.i, function(i) {
       bo <- crop(b, tiles.w.trees[tiles.w.trees@data$Name_Final == i,])
                                           # rather than crop I should just get the tree buffers that are fully within the tile, so that no buffers are cropped to less than a circle.

       if(!is.null(bo)) {    # some will be null because we lost trees with no dbh
           shapefile(bo, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2017cropped/",i,".shp"), overwrite = T)
       }
   })

   rm(b)

   cl <- makeCluster(7)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
       l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
       i <- str_extract(str_extract(f, "[0-9]{4}_esri_norm"), "[0-9]{4}")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2017cropped/",i,".shp"))
       lapply((1:length(bc)), function(j) {
           if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
               lc <- lasclip(l, bc[j,])
               if(nrow(lc@data) > 0) {
                   writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_las/",bc[j,]$UID,"_",i,".las"))
               }
           }
       })
   }
   closeAllConnections()

 #+end_src
**** 2016
 #+begin_src R
   library(doParallel)
   library(foreach)
   library(lidR)
   library(dplyr)
   library(stringr)

#+end_src

#+RESULTS:

#+begin_src R
   b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
   b <- spTransform(b, crs("+init=epsg:7599"))
   b@data <- select(b@data, UID)

   fl <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar",
                    pattern = ".*.las",
                    full.names = T)


   # crop the polygons so that a huge object doesn't need to be sent to each node
   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
       l <- readLAS(f)
       proj4string(l) <- "+init=epsg:7599"
       bc <- crop(b, extent(l))
       i <- str_extract(f, "[0-9]+_norm")
       shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2016cropped/",i,".shp"))
   }

   closeAllConnections()

   rm(b)
#+end_src

#+begin_src R
   fl <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar",
                    pattern = ".*.las",
                    full.names = T)

   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
       l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
       i <- str_extract(f, "[0-9]+_norm")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2016cropped/",i,".shp"))
       lapply(seq(length(bc)), function(j) {
           if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
               lc <- lasclip(l, bc[j,])
               if(nrow(lc@data) > 0) {
                   writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2016_normlas/",bc[j,]$UID,"_",i,".las"))
               }
           }
       })
   }
   closeAllConnections()

 #+end_src

#+begin_src R
   fl <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/trees_lidar_linefiltered",
                    pattern = ".*.las",
                    full.names = T)

   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
       l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
       i <- str_extract(f, "[0-9]+_norm")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2016cropped/",i,".shp"))
       lapply(seq(length(bc)), function(j) {
           if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
               lc <- lasclip(l, bc[j,])
               if(nrow(lc@data) > 0) {
                   writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2016_treelas/",bc[j,]$UID,"_",i,".las"))
               }
           }
       })
   }
   closeAllConnections()

 #+end_src
**** 2009
#+begin_src R
  library(doParallel)
  library(foreach)
  library(lidR)
  library(dplyr)
  library(stringr)

#+end_src

#+RESULTS:

#+begin_src R
  b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
  b <- spTransform(b, crs("+init=epsg:7599"))
  b@data <- select(b@data, UID)

  fl <- list.files("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/",
                   pattern = ".*.las",
                   full.names = T)


  # crop the polygons so that a huge object doesn't need to be sent to each node
  cl <- makeCluster(4)
  registerDoParallel(cl)
  out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
      l <- readLAS(f)
      proj4string(l) <- "+init=epsg:7599"
      bc <- crop(b, extent(l))
      if(!is.null(bc)) {
          i <- str_extract(f, "lc2t[0-9]+")
          shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"), overwrite = T)
      }
  }
  closeAllConnections()

  rm(b)

#+end_src

#+begin_src R

  fl <- list.files("/home/erker/hgt_data/madison_lidar_2009_heights/normalized",
                   pattern = ".*.las",
                   full.names = T)

  cl <- makeCluster(4)
  registerDoParallel(cl)
  out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
      l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
      i <- str_extract(f, "lc2t[0-9]+")
      bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"))
      lapply(seq(length(bc)), function(j) {
          if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
              lc <- lasclip(l, bc[j,])
              if(nrow(lc@data) > 0) {
                  writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_normlas/",bc[j,]$UID,"_",i,".las"))
              }
          }
      })
  }
  closeAllConnections()

 #+end_src

TREES  I need to rerun the code to separate trees from the
renormalized data.  Do not run this code becuase "tree_lidar" is empty
and needs to get filled with just tree lidar point clouds.
#+begin_src R
   fl <- list.files("/home/erker/hgt_data/madison_lidar_2009_heights/trees_lidar"
                    pattern = ".*.las",
                    full.names = T)

   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
       l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
       i <- str_extract(f, "[0-9]+_norm")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"))
       lapply(seq(length(bc)), function(j) {
           if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
               lc <- lasclip(l, bc[j,])
               if(nrow(lc@data) > 0) {
                   writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_treelas/",bc[j,]$UID,"_",i,".las"))
               }
           }
       })
   }
   closeAllConnections()

 #+end_src

**** 2005
 #+begin_src R
      library(doParallel)
      library(foreach)
      library(lidR)
      library(dplyr)
      library(stringr)
#+end_src

#+begin_src R
      b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
      b <- spTransform(b, crs("+init=epsg:7599"))
      b@data <- select(b@data, UID)

      fl <- list.files("/home/erker/hgt_data/madison_lidar_2005_heights/trees_lidar",
                       pattern = ".*.las",
                       full.names = T)


      # crop the polygons so that a huge object doesn't need to be sent to each node
      cl <- makeCluster(4)
      registerDoParallel(cl)
      out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
          l <- readLAS(f)
          proj4string(l) <- "+init=epsg:7599"
          bc <- crop(b, extent(l))
          if(!is.null(bc)) {
              i <- str_extract(f, "tile[0-9]+")
              shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2005cropped/",i,".shp"), overwrite = T)
          }
      }
      closeAllConnections()

      rm(b)
#+end_src

#+begin_src R
      fl <- list.files("/home/erker/hgt_data/madison_lidar_2005_heights/trees_lidar",
                       pattern = ".*.las",
                       full.names = T)

      cl <- makeCluster(4)
      registerDoParallel(cl)
      out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
          l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
          i <- str_extract(f, "tile[0-9]+")
   #if(file.exists(....THE SHAPEFILE)... {
          bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2005cropped/",i,".shp"))
          lapply(seq(length(bc)), function(j) {
              if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
                  lc <- lasclip(l, bc[j,])
                  if(nrow(lc@data) > 0) {
                      writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2005_treelas/",bc[j,]$UID,"_",i,".las"))
                  }
              }
          })
   #}
      }
      closeAllConnections()

 #+end_src

#+begin_src R
      fl <- list.files("/home/erker/hgt_data/madison_lidar_2005_heights/normalized",
                       pattern = ".*.las",
                       full.names = T)

      cl <- makeCluster(4)
      registerDoParallel(cl)
      out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
          l <- readLAS(f, filter = "-drop_z_above 120 -drop_z_below 6 -keep_first", select = "")
          i <- str_extract(f, "tile[0-9]+")
   #if(file.exists(....THE SHAPEFILE)... {
          bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2005cropped/",i,".shp"))
          lapply(seq(length(bc)), function(j) {
              if(round(gArea(bc[j,])) == 198) {  # make sure we have the full circle.  if radius changes this will need to...
                  lc <- lasclip(l, bc[j,])
                  if(nrow(lc@data) > 0) {
                      writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2005_normlas/",bc[j,]$UID,"_",i,".las"))
                  }
              }
          })
   #}
      }
      closeAllConnections()

 #+end_src

**** test
#+begin_src R
library(lidR)

l2009 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST45429_lc2t70933.las")
plot(l2009)

#+end_src

#+RESULTS:

*** extract height and estimate bias for trees

plan [2019-11-08 Fri]:

Some of the difference in maximum height will be due to the randomness
of the sampling and due to the difference in the sample size across
years. This creates a bias in maximum height estimates. To estimate
the bias due to these factors, I selected trees with negligible growth
and I bootstrapped the lidar point clouds.  I assume that the points
all come from a single lidar collection over a tree tree.  That is,
all the points were acquired at the same time and that there was no
growth.  I assume footprint size is the same and all other
characteristics of the points are the same, the only difference is
that the number of pulses between years.

I select trees that haven't grown


I will then sample from the combined lidar clouds, new clouds for each
year of the same size as the original data.  For example, if there
were 200 pulses in the 2017 cloud and 50 pulses in the 2016 cloud, I
will randomly sample with replacement 200 of the 250 pulses and assign them to a new
2017 cloud and randomly sample with replacement 50 and assign them to a new 2016
cloud. I'll then calculate the maximum of each of these clouds and
find the difference.  This is an estimate of the bias in maximum
height due to differences in sample size.

By repeating the sampling many times (say 1000), I can get an accurate
estimate of the mean bias and the variance of that bias.  For example,
there are sometimes just one or two points from a tree in 2005 lidar.
This means that the bias estimate will be very uncertain.  But there
is some information in those points and it is still worthwhile to keep
them.

I will then correct for the bias by adding the bias to the observed
maximum height.  This is the expected maximum height.  I'll then
perform a weighted regression to estimate height growth rate, where
corrected heights are weighted by the inverse of the bias variance.
That is, the observations with an imprecise bias estimate were
weighted less.

Included implicitly in this method is the canopy structure for each tree.

I combined the two years because this makes sense.  We need the full
sample of points from which we resample from.  Also, later years,
while they usually have more points, don't always have the highest points.




maybe don't worry about it too much.  see if filtering down to a
decent number of points for 2005 gives appropriate biases.

it's never going to be perfect (it can't).



read roussel's paper.  he required a histogram from a very high res.
Do I have a very high res area in 2017 (overlap) that I can use and
assume applies to all trees?  Or maybe a few of them?  2017 is high
res, but still not high enough to know i'm not missing any ranches.
2009 and 2016 tenney oak have higher branches than the 2017.

correcting for pulse density may not correct quite right because of
differences in footprint size....

how to get footprint size?


I think the histogram approach is esstianlly the same as my
resampling.  resampling may be more precise because the lack of
binning, but you need to resample many times.  

The uncertainty in the bias is also important.  Especially wehn few
points.  But less important if averaging across many treees.



**** original extraction of heights and bias correction
#+begin_src R
    library(raster)
    library(dplyr)
    library(stringr)
    library(foreach)
    library(doParallel)

    b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
    b@data <- select(b@data, UID)


                                            #uids <- c("ST14603", "ST14604", "ST14599", "ST14547")

    fs2017 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_normlas/", full.names = F)
    fs2016 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2016_normlas/", full.names = F)
    fs2009 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_normlas/", full.names = F)
    fs2005 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2005_normlas/", full.names = F)

                                            #make sure there is only one of each trees
    uids2017 <- str_extract(fs2017, "^[A-Za-z0-9]+")
    head(sort(table(uids2017), decreasing = T))

    uids2016 <- str_extract(fs2016, "^[A-Za-z0-9]+")
    head(sort(table(uids2016), decreasing = T))

    uids2009 <- str_extract(fs2009, "^[A-Za-z0-9]+")
                                            #head(sort(table(uids2009), decreasing = T), 1800)
    head(sort(table(uids2009), decreasing = T))

    uids2005 <- str_extract(fs2005, "^[A-Za-z0-9]+")
    head(sort(table(uids2005), decreasing = T))

                                            # 2009 has more than one lidar file per tree.  around 1700- 1800 duplicates or triplicates.

  #  l1 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST01245_lc2t70836.las")
  #  l2 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST01245_lc2t70835.las")
  #  l3 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST01245_lc2t70826.las")

                                            #They are identical so I'll just select one of the duplicates to use and ignore the others.  This should be fixed upstream in the future.


                                            # put all the uids and las paths for ecah year in a dataframe to loop through

    uids2017 <- data.frame(str_match(fs2017, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2017) <- c("path2017", "uid")

    uids2016 <- data.frame(str_match(fs2016, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2016) <- c("path2016", "uid")

    uids2009 <- data.frame(str_match(fs2009, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2009) <- c("path2009", "uid")
                                            # remove duplicates for 2009
    uids2009 <- uids2009 %>% group_by(uid) %>% summarize(path2009 = path2009[1])


    uids2005 <- data.frame(str_match(fs2005, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2005) <- c("path2005", "uid")


    uids_df <- left_join(uids2017, uids2016)
    uids_df <- left_join(uids_df, uids2009)
    uids_df <- left_join(uids_df, uids2005)


    uids_df <- uids_df[complete.cases(uids_df),]



    treelasdir <- "/home/erker/hgt_data/madison_tree_inventories/hgt/"
    reps <- 1000

    cl <- makeCluster(6)
    registerDoParallel(cl)

    out <- foreach(i = (1:nrow(uids_df)), .packages = c("stringr","lidR", "rgeos"), .combine = "rbind") %dopar% {  

        path2017 <- paste0(treelasdir, "trees_2017_normlas/", uids_df$path2017[i])
        path2016 <- paste0(treelasdir, "trees_2016_normlas/", uids_df$path2016[i])
        path2009 <- paste0(treelasdir, "trees_2009_normlas/", uids_df$path2009[i])
        path2005 <- paste0(treelasdir, "trees_2005_normlas/", uids_df$path2005[i])

        l2017 <- readLAS(path2017, select = "")
        l2017@data$Z <-     l2017@data$Z  * .3048  # convert to meters
        n17 <- nrow(l2017@data)
        emp_max2017 <- max(l2017@data$Z)

        l2016 <- readLAS(path2016, select = "")
        l2016@data$Z <-     l2016@data$Z  * .3048  # convert to meters
        n16 <- nrow(l2016@data)
        emp_max2016 <- max(l2016@data$Z)

        l2009 <- readLAS(path2009, select = "")
        l2009@data$Z <-     l2009@data$Z  * .3048  # convert to meters
        n09 <- nrow(l2009@data)
        emp_max2009 <- max(l2009@data$Z)

        l2005 <- readLAS(path2005, select = "")
        l2005@data$Z <-     l2005@data$Z  * .3048  # convert to meters
        n05 <- nrow(l2005@data)
        emp_max2005 <- max(l2005@data$Z)


                                            # here is where I am [2019-11-07 Thu]  I need to think of which clouds to combine for each calculation of bias?  Should I combine all the clouds??  The years that are adjacent?
      # combine all of them.  this gives a pulse bias.  I may have to do a footprint correction later.


        Z <- c(l2017@data$Z, l2016@data$Z, l2009@data$Z, l2005@data$Z)
        mZ <- max(Z)

        bias_17 <- replicate(reps, mZ - max(sample(Z, n17, replace = T)))
        bias_16 <- replicate(reps, mZ - max(sample(Z, n16, replace = T)))
        bias_09 <- replicate(reps, mZ - max(sample(Z, n09, replace = T)))
        bias_05 <- replicate(reps, mZ - max(sample(Z, n05, replace = T)))

        mean_bias17 <- mean(bias_17)
        var_bias17 <- var(bias_17)

        mean_bias16 <- mean(bias_16)
        var_bias16 <- var(bias_16)

        mean_bias09 <- mean(bias_09)
        var_bias09 <- var(bias_09)

        mean_bias05 <- mean(bias_05)
        var_bias05 <- var(bias_05)



        res <- data.frame(uid = uids_df[i,"uid"],
                 emp_max2017 = emp_max2017,
                 n2017 = n17,
                 emp_max2016 = emp_max2016,
                 n2016 = n16,
                 emp_max2009 = emp_max2009,
                 n2009 = n09,
                 emp_max2005 = emp_max2005,
                 n2005 = n05,
                 mean_bias17 = mean_bias17,
                 mean_bias16 = mean_bias16,
                 mean_bias09 = mean_bias09,
                 mean_bias05 = mean_bias05,
                 var_bias17 = var_bias17,
                 var_bias16 = var_bias16,
                 var_bias09 = var_bias09, 
                 var_bias05 = var_bias05, 
                 stringsAsFactors = F)

        saveRDS(res, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_norm/", uids_df[i,"uid"], ".rds"))
        return(res)

    }
    closeAllConnections()

  saveRDS(out, "/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_norm.rds")

#+end_src



**** plotting the original bias correction method
#+begin_src R
library(lidR)
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
h <-   readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_norm.rds")
#+end_src

#+RESULTS:
#+begin_example
Loading required package: raster
Loading required package: sp
lidR 2.2.0 using 4 threads. Help on <gis.stackexchange.com>. Bug report on <github.com/Jean-Romain/lidR>.

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Attaching package: ‘tidyr’

The following object is masked from ‘package:raster’:

    extract
#+end_example

which trees have many points
#+begin_src R 
head(arrange(h, desc(n2017)))
#+end_src

#+RESULTS:
#+begin_example
      uid emp_max2017 n2017 emp_max2016 n2016 emp_max2009 n2009 emp_max2005
1 ST16124   13.789152   421    12.87170    25   11.305032    39    8.708136
2 ST31236   18.231002   410    17.61439    23   17.900904    27   16.873728
3 ST12970   15.065350   393    14.83462    31   13.795248    24   13.167360
4 ST20601    7.983931   392     8.15340    27    8.677656    22    6.059424
5 ST27840   17.637557   392    17.34617    68   16.898112   111   16.282416
6 ST37466   11.432743   392    11.05510    21    8.494776    49    5.809488
  n2005 mean_bias17 mean_bias16 mean_bias09 mean_bias05   var_bias17 var_bias16
1     3  0.03373496   0.3338587   0.2512799   1.2480615 0.0018073612 0.04375007
2     4  0.06898173   0.6964613   0.6007227   1.7324329 0.0065914972 0.22087593
3     5  0.02168195   0.2133618   0.2698309   0.6755279 0.0007244736 0.03414513
4     3  0.24741927   0.9385350   0.9903571   1.6825734 0.0953358387 0.09630880
5     4  0.03272760   0.1530587   0.1123551   0.7762921 0.0024155800 0.01080705
6     2  0.03644067   0.5475202   0.2644576   2.2110984 0.0020779359 0.21029391
   var_bias09 var_bias05
1 0.027922314  0.9847051
2 0.174923225  1.3632906
3 0.046877821  0.1161689
4 0.093125578  0.3771462
5 0.007933116  0.2378079
6 0.051733141  1.3968688
#+end_example

#+begin_src R
  library(ggthemes)
      terk <- list(theme_solarized_2(base_size = 16) +
                   theme(legend.title = element_text(size = 10),
                         legend.text = element_text(size = 8),
                         axis.ticks = element_line(size = .3),
                         rect = element_rect(fill = "transparent"),
                         panel.background = element_rect(fill = "transparent"),
                         panel.grid.major = element_line(color = "#839496", size = .1),
                         panel.grid.minor = element_line(color = "#839496", size = .05)))

  base1 <- "#93a1a1"
  blue <- scale_color_solarized("blue")

  red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:


correct heights and add bias uncertainty
#+begin_src R

        hc <- h %>%
          mutate(cor_max2017 = emp_max2017 + mean_bias17,
                 cor_max2016 = emp_max2016 + mean_bias16,
                 cor_max2009 = emp_max2009 + mean_bias09,
                 cor_max2005 = emp_max2005 + mean_bias05,
                 sd17 = sqrt(var_bias17),
                 sd16 = sqrt(var_bias16),
                 sd09 = sqrt(var_bias09),
                 sd05 = sqrt(var_bias05))

    h_corheight <-   hc %>% select(uid, cor_max2017, cor_max2016, cor_max2009, cor_max2005) %>%
        gather(year, cor_height, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

    h_empheight <-   hc %>% select(uid, emp_max2017, emp_max2016, emp_max2009, emp_max2005) %>%
        gather(year, emp_height, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

    h_sdbias <-   hc %>% select(uid, sd17, sd16, sd09, sd05) %>%
        gather(year, sdbias, -uid) %>%
        mutate(year = as.numeric(paste0("20",str_extract(year, "[0-9]{2}"))))


  hc <- left_join(h_corheight, h_sdbias)

  hc <- left_join(hc, h_empheight)

#+end_src

#+RESULTS:
: 
: Joining, by = c("uid", "year")
: 
: Joining, by = c("uid", "year")

On average, I'd say that this correction looks pretty good!
#+begin_src R :exports results :results graphics :file figs/correction_oldway.png :width 1300 :height 800 :bg transparent :res 100

  n <- 40
  set.seed(4)
  uids <- sample(unique(hc$uid), n)
  hcf <- filter(hc, uid %in% uids)

    ggplot(data = hcf) + 
        geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
        geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sdbias, ymin = cor_height - 1.96 *sdbias, x = year), color = red) + 
        facet_wrap(~uid, ncol = 8) +
        terk +
        scale_x_continuous(breaks = c(2005,2009, 2017)) +
        theme(axis.text.x = element_text(angle = 60, hjust = 1))


#+end_src

#+RESULTS:
[[file:figs/correction_oldway.png]]

#+begin_src R :exports results :results graphics :file figs/correction_st14603.png :width 300 :height 200 :bg transparent :res 100
  hcf <- filter(hc, uid == "ST14603")

    ggplot(data = hcf) + 
        geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
        geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sdbias, ymin = cor_height - 1.96 *sdbias, x = year), color = red) + 
#        facet_wrap(~uid, ncol = 1) +
        terk +
        scale_x_continuous(breaks = c(2005, 2009, 2017)) 



#+end_src

#+RESULTS:
[[file:figs/correction_st14603.png]]

#+begin_src R :exports results :results graphics :file figs/correction_st16209.png :width 300 :height 200 :bg transparent :res 100
  hcf <- filter(hc, uid == "ST16209")

    ggplot(data = hcf) + 
        geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
        geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sdbias, ymin = cor_height - 1.96 *sdbias, x = year), color = red) + 
#        facet_wrap(~uid, ncol = 1) +
        terk +
        scale_x_continuous(breaks = c(2005, 2009, 2017)) 



#+end_src

#+RESULTS:
[[file:figs/correction_st16209.png]]


center hc
#+begin_src R
hc$year <- hc$year - 2005
#+end_src

#+RESULTS:

Good example of why weights are needed
#+begin_src R
dt <- filter(hc, uid == "ST16209")
mw <- lm(cor_height ~ year, weights = 1/ sdbias^2, data = dt)
mnw <- lm(cor_height ~ year, data = dt)
summary(mw)
summary(mnw)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = cor_height ~ year, data = dt, weights = 1/sdbias^2)

Weighted Residuals:
       1        2        3        4 
 0.58168 -0.59071 -0.09986  0.70543 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept) 15.98340    0.70779  22.582  0.00196 **
year         0.16328    0.07147   2.285  0.14971   
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.7729 on 2 degrees of freedom
Multiple R-squared:  0.723,	Adjusted R-squared:  0.5845 
F-statistic:  5.22 on 1 and 2 DF,  p-value: 0.1497

Call:
lm(formula = cor_height ~ year, data = dt)

Residuals:
      1       2       3       4 
 0.5790 -0.2249 -1.1184  0.7644 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)   
(Intercept) 17.699412   0.888808  19.914  0.00251 **
year        -0.001289   0.106044  -0.012  0.99140   
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.054 on 2 degrees of freedom
Multiple R-squared:  7.39e-05,	Adjusted R-squared:  -0.4999 
F-statistic: 0.0001478 on 1 and 2 DF,  p-value: 0.9914
#+end_example



Coeffiecient estimates are better than if a point were dropped, and
better than if you assume all points contain equal information.

**** Drop Trees with "bad" data

#+begin_src R
  hs <- hc %>% select(uid, year, emp_height) %>% pivot_wider(names_from = year, values_from = emp_height)

  head(hs)

  bad_uids <- hs %>%
      mutate(dif1716_big = abs(`12` - `11`) > 1.5,
             dif1609_big = abs(`11` - `4`) > 10) %>%
      filter(dif1716_big == T | dif1609_big == T) %>%
      pull(uid)

  hc <- filter(hc, ! uid %in% bad_uids)
#+end_src

**** Fitting many weighted regressions and getting estimates
#+begin_src R

        lms <- list()
        uids <- unique(hc$uid)
      for(i in 1:length(uids)) {
            lms[[i]] <- lm(cor_height ~ year, data = subset(hc, uid == uids[i]))
        }
  names(lms) <- uids
    saveRDS(lms, "/home/erker/hgt_data/madison_tree_inventories/hgt/growth_rates_lms_norm.rds")
#+end_src

#+RESULTS:

#+begin_src R
      growth.rates <- sapply(lms, function(lm) coef(lm)[2])
      growth.rates.se <- sapply(lms, function(lm) summary(lm)$coefficients[2,2])
      est.hgt.at2005 <- sapply(lms, function(lm) coef(lm)[1])
      growth.rates <- data.frame(uid = names(lms), 
                                 growth.rate = growth.rates, 
                                 growth.rate.se = growth.rates.se, 
                                 est.hgt.at2005 = est.hgt.at2005, stringsAsFactors = F)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/growthrates_lm_n.png :width 1000 :res 120 :bg transparent
  ggplot(growth.rates, aes(x = growth.rate)) + geom_histogram(binwidth = .03, color = base1) +
    terk +
    scale_x_continuous("growth rate (ft/year)")
#+end_src

#+RESULTS:
[[file:figs/growthrates_lm_n.png]]


[[file:figs/growthrates_lm_f.png]]
[[file:figs/growthrates_lm.png]]

#+begin_src R :exports results :results graphics :file figs/growthrates_lm_clip_n.png :width 1000 :res 120 :bg transparent
  ggplot(growth.rates, aes(x = 100 * growth.rate)) + geom_histogram(binwidth = 2, color = base1) +
    terk +
    scale_x_continuous("growth rate (cm/year)", lim = c(-100,100), breaks = c(-100,-50,0, round(mean(growth.rates$growth.rate * 100),1), 50, 100)) +
    geom_vline(data = growth.rates, aes(xintercept = mean(growth.rate)*100), color = red)
#+end_src

#+RESULTS:
[[file:figs/growthrates_lm_clip_n.png]]



[[file:figs/growthrates_lm_clip_f.png]]



#+begin_src R :exports results :results graphics :file figs/rate_by_int.png :bg transparent :width 1000 :res 100
hn <- left_join(h, growth.rates)

  ggplot(hn, aes(x = emp_max2005, y = growth.rate)) + geom_point(color = base1, size = .5, alpha = .5) + terk +
    geom_smooth()
#+end_src

#+RESULTS:
[[file:figs/rate_by_int.png]]


#+begin_src R
saveRDS(hn, "/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates.rds")
#+end_src

#+RESULTS:

join growth rates to trees

#+begin_src R
  library(raster)
  trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

  hn <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates.rds")

  trees@data <- left_join(trees@data, hn, by = c("UID" = "uid"))

  shapefile(trees, "/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_Withlidarextractedheights_growthrates.rds", overwrite = T)

#+end_src

**** revised bias correction (only trees that have stopped growing)
Revised way of doing bias with just trees already almost at their
maximum height by species.

Becuse there are potentially issues with the trees that are still
growing.  See TS00189 and ts01030: are they over corrected?

Goal is to get a bias correction for every species for every size
point cloud.

Also standard deviation?  for uncertainty.  

Here i'm saying that a tree that hasn't grown can be used to find by
how much the different lidar point densitys underestimate height.


***** read in extracted heights from above and find trees that haven't grown

there is a bit of circularity here so I need to be smart about how I
select which trees haven't grown.

They could be the largest trees for each species......

this is only going to work for large genera.

#+begin_src R
    library(dplyr)
  trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

  h <-   readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias.rds")

  h <- left_join(h, select(unique(trees@data), UID, Genus, DBH), by = c("uid" = "UID")) # use unique because for some reason there are duplicate trees

#+end_src

#+begin_src R :results org
      library(orgutils)
      #  h %>%
       #     filter(emp_max2009 > emp_max2016)

    large.genera <- c("Fraxinus", "Robinia", "Celtis", "Tilia", "Betula", "Gleditsia", 
  "Acer", "Picea", "Pinus", "Populus", "Juglans",
  "Ulmus", "Quercus", "Abies", "Catalpa", "Salix", 
  "Platanus", "Carya", "Ginkgo", "Gymnocladus")

    broad.genera <- c("Fraxinus", "Robinia", "Celtis", "Tilia", "Betula", "Gleditsia", 
  "Acer", "Pinus", "Populus", "Juglans",
  "Ulmus", "Quercus", "Catalpa", "Salix", 
  "Platanus", "Carya", "Ginkgo", "Gymnocladus")


  #number of big trees to use
  nbigtrees <- 40
        hg <- h %>%
            filter(Genus %in% large.genera) %>%
            mutate(DBH = as.numeric(DBH)) %>%
            filter(DBH > 10) %>%
            filter((Genus %in% broad.genera & DBH > 20) | (!(Genus %in% broad.genera) & DBH > 10)) %>%
            group_by(Genus) %>%
            filter(abs(emp_max2017 - emp_max2016) < 1,
                   abs(emp_max2017 - emp_max2009) < 1,
                   abs(emp_max2016 - emp_max2009) < 1) %>%
        top_n(nbigtrees, emp_max2017) %>%
          arrange(Genus, desc(emp_max2017)) 


      hg %>%  select(Genus, DBH, emp_max2017, emp_max2016, emp_max2009, emp_max2005, n2017, n2016, n2009, n2005, uid) %>% data.frame() %>% toOrg


#+end_src

#+RESULTS:
#+BEGIN_SRC org

| Genus       |              DBH | emp_max2017 | emp_max2016 | emp_max2009 | emp_max2005 | n2017 | n2016 | n2009 | n2005 | uid     |
|-------------+------------------+-------------+-------------+-------------+-------------+-------+-------+-------+-------+---------|
| Abies       |               15 |  15.3866088 |   15.328392 |   14.618208 |   14.456664 |    97 |    18 |    26 |     3 | HF3357  |
| Abies       |               17 |  15.2619456 |    15.28572 |   15.014448 |   14.944344 |    23 |     6 |    15 |     2 | HF847   |
| Abies       |               14 |  13.1966208 |   12.807696 |   12.277344 |    9.162288 |    49 |    34 |    33 |     3 | HF567   |
| Acer        | 55.1181102362205 |  27.5060664 |    27.49296 |   27.267408 |    27.29484 |    31 |    12 |    11 |     5 | AS01583 |
| Acer        |               47 |  26.5310112 |     26.4414 |    26.27376 |   25.530048 |    40 |    49 |    18 |     2 | ST68961 |
| Acer        |               26 |  25.9579872 |   26.493216 |    26.60904 |    23.57628 |    40 |    54 |    15 |     4 | SS01411 |
| Acer        |               36 |  25.8442968 |   26.221944 |   25.630632 |   25.380696 |    70 |    12 |    20 |     2 | SS00855 |
| Acer        |               37 |  25.3041912 |    24.90216 |   25.453848 |   23.557992 |    85 |    33 |    15 |     6 | SS02542 |
| Acer        |               45 |  25.1700792 |   25.152096 |   24.990552 |   24.350472 |   110 |    29 |    28 |     5 | HF1741  |
| Acer        |               40 |  25.0448064 |   25.210008 |   24.655272 |   24.484584 |    95 |    16 |    17 |     4 | SS00226 |
| Acer        |               35 |  24.9652536 |   25.142952 |   25.045416 |   23.009352 |    42 |    53 |    17 |     4 | ST12270 |
| Acer        | 61.8110236220472 |  24.4455696 |    24.41448 |    24.70404 |    23.66772 |    92 |    44 |    19 |     6 | AS04134 |
| Acer        |               21 |  24.4233192 |   24.560784 |   23.981664 |   22.988016 |    48 |    38 |    24 |     4 | ST22647 |
| Acer        |               49 |   24.408384 |    24.21636 |    24.06396 |    23.11908 |    97 |    20 |    28 |     2 | ST04680 |
| Acer        |               29 |   24.382476 |   24.097488 |     24.0792 |   23.289768 |    91 |    17 |    15 |     4 | SS02594 |
| Acer        |               35 |  24.3297456 |     24.3078 |   24.137112 |   22.954488 |   193 |    60 |     5 |     4 | ST12433 |
| Acer        | 49.6062992125984 |  24.3151152 |   24.484584 |   23.731728 |    17.78508 |    49 |    27 |    20 |     1 | AS04058 |
| Acer        |               50 |  24.2919504 |   23.853648 |   23.969472 |   24.054816 |    49 |    28 |    24 |     4 | AS02418 |
| Acer        |               40 |  24.2370864 |   24.289512 |   24.091392 |    23.57628 |   127 |    80 |    34 |     4 | ST46200 |
| Acer        |               50 |  24.1846608 |   24.207216 |   23.658576 |   22.622256 |   104 |    24 |    20 |     2 | SS00221 |
| Acer        |               52 |  24.1328448 |    24.18588 |   23.649432 |   21.942552 |    86 |    21 |    21 |     4 | HF5419  |
| Acer        |               47 |   24.111204 |   24.557736 |    24.81072 |   24.347424 |    41 |    56 |    36 |     8 | ST08304 |
| Acer        |               26 |  24.0758472 |   24.685752 |   24.112728 |   22.984968 |    30 |    34 |    20 |     4 | SS01329 |
| Acer        |               38 |  23.9365536 |   24.057864 |   23.664672 |   23.247096 |    93 |    27 |    18 |     2 | SS00853 |
| Acer        |               46 |  23.9332008 |   23.841456 |   23.673816 |   23.292816 |    65 |    21 |    25 |     2 | SS00852 |
| Acer        |               41 |  23.9121696 |   24.067008 |   23.457408 |   23.356824 |   111 |    22 |    17 |     6 | SS00876 |
| Acer        | 40.5511811023622 |   23.906988 |   23.554944 |   23.183088 |    21.59508 |    47 |    28 |    28 |     4 | AS02623 |
| Acer        |               29 |  23.8938816 |   23.780496 |   23.594568 |   22.933152 |   114 |    72 |    22 |     4 | ST49005 |
| Acer        |               39 |  23.8222536 |   23.655528 |    23.30196 |   20.948904 |    42 |    14 |    24 |     3 | ST71780 |
| Acer        |               37 |  23.8207296 |    23.86584 |   23.603712 |   23.219664 |    88 |    24 |    16 |     6 | SS00877 |
| Acer        |               42 |  23.8057944 |   23.536656 |   23.420832 |   22.497288 |    42 |    23 |    22 |     3 | SS02279 |
| Acer        |               43 |  23.8054896 |   23.405592 |   24.088344 |   22.991064 |   196 |    44 |    14 |     2 | ST12436 |
| Acer        |               36 |  23.7512352 |   24.009096 |   23.487888 |   21.921216 |   119 |    49 |    13 |     4 | ST68195 |
| Acer        |               36 |   23.727156 |   23.594568 |   22.972776 |   21.470112 |   127 |    22 |    28 |     7 | HF4994  |
| Acer        |               39 |  23.7146592 |   23.948136 |   23.369016 |   21.805392 |    43 |    25 |    15 |     1 | ST49174 |
| Acer        | 21.6535433070866 |  23.6985048 |    23.27148 |    22.79904 |   18.519648 |    79 |    30 |    24 |     3 | AS04755 |
| Acer        |               45 |   23.672292 |   23.701248 |   22.942296 |   22.564344 |    91 |    23 |    12 |     3 | SS00227 |
| Acer        |               35 |  23.6530896 |   23.506176 |   22.811232 |   20.080224 |    87 |    20 |    20 |     3 | ST07946 |
| Acer        |               42 |  23.5482384 |    23.48484 |   22.820376 |   21.585936 |   101 |    17 |    35 |     5 | ST42117 |
| Acer        |               46 |   23.518368 |    22.98192 |   23.557992 |   22.329648 |    93 |    22 |    16 |     5 | SS02588 |
| Acer        |               39 |  23.5156248 |   23.625048 |   23.140416 |     21.7932 |    81 |    44 |     9 |     4 | ST68654 |
| Acer        |               36 |  23.4522264 |   23.106888 |   22.978872 |   22.512528 |    87 |    15 |    26 |     4 | SS00442 |
| Acer        |               39 |  23.3144568 |   23.216616 |   22.917912 |    22.06752 |   105 |    21 |    14 |     3 | SS00881 |
| Betula      |               34 |  20.9540856 |    20.97024 |    20.97024 |   20.506944 |    98 |    22 |    22 |     4 | HF31    |
| Betula      |               27 |  18.4720992 |    18.39468 |   17.657064 |   15.995904 |   238 |    41 |    17 |     5 | HF5179  |
| Betula      |               65 |  18.0789072 |   17.614392 |   17.291304 |   14.465808 |    96 |    18 |    27 |     2 | HF1204  |
| Betula      |               28 |  17.9478432 |    17.02308 |   17.791176 |    13.91412 |    55 |    11 |    17 |     2 | HF308   |
| Betula      |               21 |  16.5884352 |   17.288256 |   16.501872 |   15.115032 |    37 |    26 |    13 |     5 | HF1535  |
| Betula      |               38 |  16.3497768 |   16.294608 |   15.755112 |   13.911072 |    98 |    22 |    24 |     1 | HF4208  |
| Betula      |               29 |  16.1851848 |   16.166592 |   16.187928 |   16.050768 |    39 |    21 |    25 |     4 | HF334   |
| Betula      |               26 |  15.9955992 |    15.89532 |   15.060168 |   13.536168 |    86 |    27 |    20 |     4 | HF3315  |
| Betula      |               21 |   15.991332 |     16.2306 |    15.33144 |   15.111984 |    48 |    28 |    18 |     3 | HF5396  |
| Betula      |               22 |  15.6935424 |   15.745968 |   15.413736 |   16.898112 |    39 |    16 |    22 |     6 | HF4179  |
| Betula      |               23 |   15.614904 |   15.739872 |    15.07236 |     9.15924 |   135 |    20 |    17 |     2 | HF3456  |
| Betula      |               21 |  15.5246832 |   15.602712 |   14.697456 |    13.99032 |    46 |    33 |    15 |     5 | HF4882  |
| Betula      |               22 |  15.5195016 |   15.578328 |   15.959328 |   14.849856 |    32 |     5 |     8 |     2 | HF3667  |
| Betula      |               22 |   15.299436 |    15.04188 |   14.487144 |   12.697968 |   118 |    28 |    20 |     5 | HF1758  |
| Betula      |               21 |   15.253716 |   15.203424 |   14.548104 |   14.581632 |    70 |    35 |    22 |     4 | ST40589 |
| Betula      |               27 |  14.9742144 |   15.115032 |   14.612112 |    9.912096 |   101 |    24 |    14 |     3 | HF1562  |
| Betula      |               43 |  14.9629368 |   14.785848 |   14.499336 |   13.810488 |   113 |    23 |    22 |     4 | HF895   |
| Betula      |               28 |  14.9035008 |   15.398496 |   14.852904 |   12.097512 |   116 |    27 |    22 |     3 | HF896   |
| Betula      |               23 |   14.894052 |   14.743176 |    14.35608 |   15.157704 |   117 |    23 |    25 |     2 | HF2049  |
| Betula      |               44 |  14.8657056 |   14.670024 |   13.962888 |   13.911072 |    88 |    23 |    19 |     2 | HF1445  |
| Betula      |               31 |  14.7940776 |   14.816328 |   13.935456 |    12.74064 |    40 |    19 |    15 |     5 | HF6917  |
| Betula      |               23 |  14.6779488 |   14.956536 |    15.42288 |   14.301216 |    14 |     4 |    14 |     2 | HF5858  |
| Betula      |               35 |   14.445996 |   14.161008 |   13.584936 |   13.557504 |    92 |    22 |    12 |     4 | HF5068  |
| Betula      |               24 |  14.3975328 |   14.712696 |   13.978128 |   11.411712 |    39 |    23 |    11 |     1 | HF6913  |
| Betula      |               51 |  14.2762224 |   14.069568 |   13.597128 |   13.734288 |    46 |    36 |    15 |     4 | HF5223  |
| Betula      |               33 |  14.1738096 |    14.21892 |   13.261848 |   13.283184 |    51 |    22 |    18 |     4 | HF366   |
| Betula      |               31 |  14.1677136 |   14.292072 |     13.9446 |    8.220456 |    47 |    11 |    24 |     2 | HF3212  |
| Betula      |               24 |   14.061948 |   14.023848 |   13.341096 |   10.067544 |    74 |    15 |    22 |     2 | HF5250  |
| Betula      |               50 |  14.0595096 |   13.755624 |   13.133832 |   12.036552 |   117 |    22 |    20 |     3 | HF3558  |
| Betula      |               28 |  13.9561824 |   13.511784 |    13.24356 |   13.194792 |    43 |    31 |    24 |     4 | HF6387  |
| Betula      |               33 |   13.947648 |   13.758672 |    13.27404 |    12.00912 |    51 |    39 |    14 |     3 | HF6851  |
| Betula      |               28 |  13.8656568 |   13.938504 |   13.965936 |   14.060424 |    76 |    16 |    20 |     7 | HF1789  |
| Betula      |               34 |  13.8098784 |   13.798296 |      12.954 |    11.52144 |   112 |    21 |    17 |     3 | HF4658  |
| Betula      |               35 |  13.7522712 |   13.597128 |   13.191744 |   12.765024 |    50 |    38 |    22 |     5 | HF6858  |
| Betula      |               49 |    13.73886 |   13.621512 |   12.774168 |    9.595104 |   158 |    15 |    13 |     2 | HF5007  |
| Betula      |               26 |  13.7379456 |    13.31976 |    12.83208 |   12.685776 |   110 |    23 |    20 |     3 | HF3083  |
| Betula      |               31 |  13.7178288 |    14.06652 |   13.706856 |   12.777216 |    46 |    27 |    10 |     1 | HF5282  |
| Betula      |               23 |  13.6846056 |   12.889992 |    13.13688 |   11.542776 |   103 |    17 |    21 |     2 | HF5545  |
| Betula      |               37 |  13.6745472 |   13.862304 |    13.13688 |   12.963144 |   112 |    27 |    22 |     6 | HF3703  |
| Betula      |               23 |   13.659612 |   12.902184 |   13.484352 |   11.667744 |    46 |    38 |    14 |     3 | HF720   |
| Carya       |               26 |  23.8853472 |   24.143208 |   23.487888 |   15.816072 |    34 |    40 |    21 |     4 | ST33238 |
| Carya       |               28 |  22.9685088 |    23.04288 |   22.588728 |   21.543264 |    98 |    20 |    21 |     5 | HF2198  |
| Carya       |               21 |  21.3609936 |     21.1836 |     20.8026 |    20.36064 |    43 |    37 |    25 |     5 | ST66384 |
| Carya       |               26 |  20.9495136 |    20.83308 |    19.97964 |   18.742152 |    48 |    25 |     7 |     4 | SS02758 |
| Carya       |               23 |   20.883372 |   20.903184 |   19.961352 |   19.068288 |    46 |    19 |    28 |     6 | HF1185  |
| Carya       |               23 |  20.8068672 |    21.57984 |   21.720048 |   19.702272 |    40 |    21 |    13 |     4 | SS02185 |
| Carya       |               23 |  20.3874624 |   20.263104 |   20.159472 |   19.680936 |    46 |    52 |    36 |     3 | ST49102 |
| Carya       |               24 |  20.1174096 |   20.183856 |   19.866864 |    20.02536 |    44 |    53 |    23 |     5 | ST73740 |
| Carya       |               24 |  19.6684392 |    20.45208 |   20.022312 |   15.785592 |    43 |    85 |    13 |     2 | ST73743 |
| Carya       |               23 |  19.0902336 |   19.299936 |    18.45564 |    16.93164 |   110 |    28 |    23 |     3 | HF2402  |
| Carya       |               25 |   19.085052 |   19.485864 |   19.053048 |   15.995904 |    46 |    26 |    13 |     2 | ST71962 |
| Carya       |               23 |  18.4794144 |    18.77568 |   18.522696 |   16.605504 |    38 |    48 |    26 |     4 | ST15567 |
| Carya       |               22 |  15.9325056 |    15.30096 |   15.950184 |   14.892528 |    40 |    42 |    19 |     4 | SS03222 |
| Carya       |               22 |    15.83436 |   15.947136 |   15.294864 |    12.86256 |    85 |    20 |    17 |     2 | ST13440 |
| Carya       |               26 |  15.3658824 |    15.27048 |     14.4018 |   13.155168 |    72 |    19 |    21 |     3 | ST40074 |
| Carya       |               28 |  14.5490184 |   14.990064 |     14.3256 |    8.820912 |    37 |    23 |    18 |     3 | HF3475  |
| Carya       |               24 |  14.4865344 |   14.435328 |   13.557504 |    11.52144 |    38 |    37 |    17 |     4 | HF1550  |
| Catalpa     |               33 |  24.2099592 |   25.027128 |   24.301704 |   23.506176 |   242 |    53 |    12 |     1 | ST36828 |
| Catalpa     |               35 |  23.3473752 |   23.762208 |    23.10384 |   21.476208 |    46 |    63 |    11 |     4 | SS02330 |
| Catalpa     |               25 |  21.9449904 |   21.750528 |   21.247608 |   21.500592 |   168 |    30 |    24 |     5 | ST67348 |
| Catalpa     |               23 |  21.0147408 |    21.36648 |     20.4978 |   15.550896 |    47 |    31 |    11 |     3 | SS02052 |
| Catalpa     |               36 |   20.767548 |   20.366736 |    19.87296 |   19.315176 |    48 |    56 |    14 |     4 | ST66824 |
| Catalpa     | 33.8582677165354 |  20.4938376 |   20.506944 |    19.91868 |   19.565112 |   153 |    29 |    16 |     5 | AS04952 |
| Catalpa     | 33.4645669291339 |  20.2268328 |   20.622768 |   20.241768 |    17.84604 |    45 |    27 |    17 |     2 | AS01624 |
| Catalpa     |               35 |  19.4331336 |   18.815304 |   19.315176 |    15.83436 |    45 |    42 |     9 |     4 | ST58930 |
| Catalpa     |               31 |  19.0274448 |   19.062192 |    18.94332 |   16.422624 |    42 |    62 |    22 |     3 | SS02324 |
| Catalpa     | 44.8818897637795 |  18.7113672 |   18.733008 |   18.571464 |   14.557248 |    92 |    44 |    16 |     2 | AS02141 |
| Catalpa     |               27 |  18.2185056 |   18.495264 |   17.931384 |   15.364968 |    29 |    13 |     5 |     2 | SS02043 |
| Catalpa     |               31 |  17.5241712 |   17.385792 |   17.010888 |   15.809976 |   103 |    32 |    20 |     3 | ST72126 |
| Catalpa     |               29 |  17.4647352 |   17.437608 |    16.73352 |   18.010632 |    27 |    18 |     2 |     3 | SS02322 |
| Catalpa     |               41 |  17.2016928 |   17.224248 |    16.80972 |   15.907512 |   118 |    81 |    20 |     4 | ST42767 |
| Catalpa     |               22 |  17.1654216 |   17.090136 |   16.742664 |   14.023848 |   343 |    34 |    21 |     5 | ST12365 |
| Catalpa     |               29 |  16.8840912 |   16.904208 |   16.910304 |    15.98676 |    76 |    20 |    22 |     2 | ST52460 |
| Catalpa     |               25 |  16.7408352 |   17.248632 |   17.041368 |    8.894064 |    82 |    43 |    16 |     1 | ST58927 |
| Catalpa     |               24 |  16.7185848 |   17.016984 |   17.452848 |    13.42644 |     8 |     9 |     3 |     3 | SS02332 |
| Catalpa     |               24 |  16.6838376 |   16.888968 |    16.47444 |    15.94104 |    45 |    68 |    21 |     3 | ST08233 |
| Catalpa     |               26 |  16.6109904 |   16.907256 |   16.480536 |   16.038576 |    97 |    31 |     8 |     5 | ST10611 |
| Catalpa     |               29 |  16.3028376 |   16.666464 |    15.74292 |   13.612368 |    46 |    58 |    15 |     3 | ST58872 |
| Catalpa     | 29.5275590551181 |   15.976092 |   16.029432 |   15.563088 |   11.210544 |    99 |    36 |    25 |     2 | AS02540 |
| Catalpa     |               32 |  15.8901384 |   16.218408 |   15.444216 |    14.87424 |    45 |    34 |    12 |     4 | ST14266 |
| Catalpa     |               21 |  15.4375104 |    15.59052 |   14.990064 |   13.082016 |   125 |    23 |    15 |     2 | ST70097 |
| Catalpa     |               31 |  14.9888448 |    15.25524 |   14.944344 |   13.621512 |   102 |    34 |    20 |     3 | ST67067 |
| Catalpa     | 33.4645669291339 |  14.5642584 |   13.840968 |   13.688568 |   12.752832 |    48 |    29 |    22 |     5 | AS02477 |
| Catalpa     |               27 |  14.3365728 |   14.606016 |   13.859256 |    12.43584 |    46 |    27 |    28 |     3 | ST58871 |
| Catalpa     |               28 |   9.6630744 |   10.040112 |     10.1346 |    9.689592 |    48 |    50 |    65 |     5 | ST87019 |
| Celtis      |               48 |  25.3922784 |   26.295096 |   25.886664 |   24.996648 |    38 |    77 |    30 |     2 | ST11707 |
| Celtis      |               25 |  25.1075952 |   25.408128 |   24.646128 |   23.981664 |    30 |    18 |     9 |    11 | ST26319 |
| Celtis      |               34 |   24.790908 |   24.771096 |   24.390096 |   24.423624 |   100 |    29 |    20 |     3 | ST63692 |
| Celtis      |               35 |  24.1136424 |   24.039576 |   23.969472 |   22.872192 |    41 |    37 |    13 |     5 | SS00615 |
| Celtis      |               22 |  23.6390688 |   23.981664 |   23.006304 |   23.106888 |   175 |    63 |    14 |     5 | ST52946 |
| Celtis      |               40 |   23.612856 |      23.622 |   23.777448 |   20.153376 |    68 |    18 |    22 |     2 | ST63693 |
| Celtis      |               31 |  23.1422448 |    23.37816 |   22.893528 |   20.814792 |    85 |    23 |    23 |     3 | ST32052 |
| Celtis      |               22 |  22.9505256 |   23.237952 |   22.674072 |   22.055328 |    41 |    31 |    13 |     5 | SS03150 |
| Celtis      |               31 |    22.57806 |   22.960584 |   22.924008 |    21.42744 |    51 |    51 |    24 |     3 | SS02271 |
| Celtis      |               29 |   22.491192 |   22.482048 |   22.378416 |   20.549616 |    92 |    23 |    23 |     3 | ST63589 |
| Celtis      |               30 |  21.4539576 |   21.973032 |   21.131784 |   20.973288 |    25 |    26 |    29 |     5 | TS01466 |
| Celtis      |               25 |  21.3929976 |    21.27504 |   21.101304 |    19.26336 |    75 |    19 |    16 |     1 | ST37058 |
| Celtis      |               35 |  21.2793072 |   21.470112 |   21.418296 |    18.10512 |    47 |    47 |    25 |     2 | ST11734 |
| Celtis      |               29 |  21.2680296 |    21.65604 |    21.16836 |   20.439888 |    47 |    26 |    24 |     3 | HF2785  |
| Celtis      |               33 |  21.1589112 |   20.958048 |    20.74164 |     20.4216 |    46 |    27 |    21 |     3 | ST35152 |
| Celtis      |               25 |   21.083016 |    20.86356 |   20.430744 |   20.784312 |   309 |    29 |    25 |     9 | ST78441 |
| Celtis      | 33.0708661417323 |  21.0119976 |   20.747736 |   20.150328 |   20.753832 |    46 |    17 |    24 |     4 | AS05205 |
| Celtis      |               38 |  21.0119976 |   21.147024 |   20.793456 |   20.674584 |   100 |    44 |    21 |     2 | ST28303 |
| Celtis      | 39.7637795275591 |  20.8611216 |    20.98548 |   20.092416 |   20.052792 |    13 |     3 |     3 |     3 | AS05071 |
| Celtis      |               34 |  20.7276192 |   20.948904 |   20.897088 |   19.671792 |    42 |    31 |    19 |     4 | ST63731 |
| Celtis      |               26 |  20.2567032 |   20.897088 |   20.363688 |   19.970496 |    42 |    58 |    25 |     2 | ST11391 |
| Celtis      |               31 |   20.112228 |   20.336256 |   19.757136 |   19.985736 |   107 |    28 |    23 |     4 | ST59637 |
| Celtis      |               29 |    19.85772 |   19.961352 |    19.76628 |   18.751296 |    89 |    44 |    21 |     1 | ST70167 |
| Celtis      |               22 |  19.7717664 |   20.107656 |   19.132296 |    20.07108 |   122 |    24 |     7 |     3 | ST53041 |
| Celtis      |               22 |    19.47672 |   19.348704 |   19.001232 |   17.458944 |    89 |    17 |    11 |     5 | SS02624 |
| Celtis      |               34 |  19.4114928 |   19.665696 |   19.053048 |    18.45564 |    45 |    30 |    23 |     4 | ST58643 |
| Celtis      |               31 |  18.9923928 |   19.257264 |   18.614136 |   17.955768 |   172 |    59 |    32 |     5 | ST25184 |
| Celtis      | 24.0157480314961 |   18.906744 |   18.891504 |   18.778728 |   17.212056 |    77 |    43 |    17 |     4 | AS03201 |
| Celtis      |               36 |   18.838164 |   19.470624 |   19.208496 |    15.98676 |    61 |    19 |    21 |     1 | ST63713 |
| Celtis      |               29 |   18.801588 |   18.894552 |   18.693384 |   18.662904 |    95 |    60 |    24 |     3 | ST70522 |
| Celtis      |               32 |   18.748248 |   18.452592 |   18.495264 |   18.711672 |    94 |    24 |    21 |     4 | ST59390 |
| Celtis      | 36.2204724409449 |  18.7168536 |   19.013424 |   18.339816 |   16.675608 |    41 |    29 |    25 |     3 | AS00498 |
| Celtis      |               30 |  18.6936888 |   18.800064 |   18.202656 |   15.852648 |    31 |    20 |    25 |     1 | ST57275 |
| Celtis      | 40.5511811023622 |  18.6433968 |   18.812256 |   18.220944 |    18.07464 |    56 |    17 |    30 |     3 | AS00452 |
| Celtis      |               28 |    18.47088 |   18.614136 |   17.980152 |   15.630144 |    87 |    39 |    21 |     2 | ST70291 |
| Celtis      |               25 |   18.359628 |   18.824448 |    17.84604 |   16.212312 |    36 |    80 |    14 |     3 | ST40521 |
| Celtis      |               28 |  18.3206136 |   18.291048 |   17.885664 |   17.757648 |    45 |    25 |    29 |     3 | ST48788 |
| Celtis      | 31.1023622047244 |   18.083784 |   18.086832 |    17.31264 |   16.254984 |    45 |    30 |    11 |     2 | AS01697 |
| Celtis      |               34 |   18.009108 |   18.117312 |   17.736312 |   18.080736 |    42 |    30 |    26 |     3 | ST36576 |
| Celtis      |  34.251968503937 |    18.00606 |   17.818608 |     17.6784 |   16.407384 |    72 |    34 |    16 |     2 | AS04775 |
| Fraxinus    |               43 |   25.645872 |   25.767792 |   25.856184 |   25.188672 |   106 |    43 |    32 |     5 | ST14603 |
| Fraxinus    |               36 |  22.9828344 |   22.680168 |   22.546056 |   17.590008 |   147 |    40 |    27 |     1 | ST15038 |
| Fraxinus    |               38 |  22.8045264 |   22.628352 |   22.003512 |   21.387816 |    90 |    51 |    26 |     4 | ST16316 |
| Fraxinus    |               22 |  22.6838256 |   22.698456 |   22.247352 |   22.195536 |    92 |    32 |    20 |     5 | ST89333 |
| Fraxinus    |               31 |  22.5091752 |   23.070312 |    22.46376 |   16.425672 |    43 |    50 |    29 |     3 | SS01331 |
| Fraxinus    |               35 |  22.2583248 |   22.195536 |   21.619464 |   20.525232 |    51 |    50 |    27 |     2 | SS02832 |
| Fraxinus    |               40 |  22.1184216 |   21.942552 |   21.872448 |   20.820888 |   109 |    49 |    37 |     3 | ST70358 |
| Fraxinus    |               38 |    22.09038 |   22.518624 |    21.53412 |   20.449032 |    47 |    50 |    15 |     4 | ST30959 |
| Fraxinus    |               34 |    21.81606 |   22.073616 |   21.195792 |   20.028408 |    90 |    62 |    18 |     4 | ST11212 |
| Fraxinus    |               40 |  21.6313512 |   21.415248 |    21.70176 |   22.683216 |   113 |    23 |    28 |     4 | ST64025 |
| Fraxinus    |               28 |   21.211032 |   20.692872 |   20.503896 |    18.24228 |    54 |    47 |    19 |     1 | ST84293 |
| Fraxinus    |               25 |  21.0519264 |    21.42744 |   21.079968 |   20.958048 |    42 |    38 |    23 |     4 | ST34493 |
| Fraxinus    |               22 |  20.8922112 |   20.442936 |   20.427696 |   18.492216 |    68 |    16 |    17 |     4 | SS00243 |
| Fraxinus    |               24 |  20.7620616 |   20.945856 |    21.13788 |   19.485864 |   118 |    25 |    28 |     3 | ST63747 |
| Fraxinus    |               26 |  20.7495648 |    20.83308 |   20.363688 |   19.373088 |   118 |    55 |    19 |     2 | ST77140 |
| Fraxinus    |               34 |    20.66544 |    20.68068 |   19.775424 |   18.205704 |    99 |    33 |    24 |     2 | ST67815 |
| Fraxinus    |               37 |  20.5139544 |    21.27504 |   20.845272 |   18.492216 |    33 |    31 |    12 |     2 | ST31193 |
| Fraxinus    |               21 |  20.4328776 |   20.156424 |   20.293584 |   20.046696 |    42 |    41 |    27 |     8 | ST08303 |
| Fraxinus    |               31 |  20.4289152 |   20.217384 |   20.311872 |   20.555712 |   106 |    41 |    16 |     3 | ST09952 |
| Fraxinus    |               21 |  20.4045312 |   20.921472 |      20.193 |   20.656296 |    32 |    30 |    12 |     6 | SS01490 |
| Fraxinus    |               25 |  20.3868528 |   20.607528 |   19.623024 |    18.77568 |    39 |    29 |    21 |     2 | ST34786 |
| Fraxinus    |               25 |  20.2877928 |   20.412456 |   19.958304 |   19.117056 |    43 |    85 |    20 |     3 | ST59203 |
| Fraxinus    |               26 |  20.2591416 |   20.403312 |   19.824192 |    18.48612 |   103 |    42 |    25 |     4 | ST67829 |
| Fraxinus    |               26 |  20.2472544 |   20.205192 |     19.8882 |   19.053048 |    30 |    42 |    57 |     5 | ST14285 |
| Fraxinus    |               25 |  20.2085448 |   19.930872 |   19.214592 |   18.559272 |    70 |    21 |    31 |     5 | ST41958 |
| Fraxinus    |               32 |  20.2054968 |   19.976592 |   19.376136 |   18.854928 |    45 |    22 |    23 |     7 | HF2313  |
| Fraxinus    |               21 |  20.1737976 |    20.33016 |     19.3548 |   18.620232 |    26 |    28 |    24 |     5 | ST41695 |
| Fraxinus    |               38 |  20.1658728 |   20.762976 |   20.720304 |   20.022312 |   167 |    49 |    30 |     5 | ST64101 |
| Fraxinus    |               23 |  20.1603864 |   20.080224 |   19.412712 |   18.583656 |   125 |    26 |    21 |     4 | ST21631 |
| Fraxinus    |               22 |  20.1494136 |   20.278344 |   19.366992 |   16.666464 |    88 |    24 |    22 |     1 | ST63696 |
| Fraxinus    |               22 |  20.1451464 |   20.083272 |   20.449032 |   18.275808 |    38 |    48 |    35 |     5 | ST27726 |
| Fraxinus    |               21 |  20.1113136 |    20.33016 |   19.967448 |   20.232624 |   114 |    23 |    25 |     3 | ST63746 |
| Fraxinus    |               26 |  20.1058272 |   20.531328 |   19.601688 |   18.815304 |    70 |    21 |    15 |     3 | ST70506 |
| Fraxinus    |               24 |   20.052792 |   20.144232 |   20.308824 |   17.315688 |    43 |    63 |    22 |     4 | ST59205 |
| Fraxinus    |               22 |  19.9997568 |   20.260056 |     19.5072 |       19.05 |    40 |    47 |    29 |     4 | ST41013 |
| Fraxinus    |               25 |  19.9912224 |   20.531328 |   20.138136 |   17.422368 |    99 |    48 |    26 |     3 | ST68095 |
| Fraxinus    |               22 |  19.9208136 |   20.235672 |   19.257264 |   16.895064 |    44 |    47 |    33 |     1 | ST41303 |
| Fraxinus    |               27 |   19.920204 |    20.08632 |    20.01012 |   18.245328 |   102 |    34 |    29 |     5 | HF5420  |
| Fraxinus    |               30 |  19.9083168 |   19.257264 |   19.955256 |   18.854928 |    82 |    25 |    12 |     4 | ST39200 |
| Fraxinus    |               31 |  19.8784464 |   19.693128 |   19.028664 |   17.568672 |   112 |    22 |    23 |     3 | ST31598 |
| Ginkgo      |               22 |    16.28394 |   16.102584 |   15.752064 |   13.069824 |   105 |    34 |    36 |     4 | ST05181 |
| Ginkgo      |               21 |   15.147036 |   14.764512 |   14.465808 |    9.079992 |    46 |    32 |    14 |     2 | ST72216 |
| Ginkgo      |               21 |   13.565124 |    13.22832 |   13.124688 |    9.823704 |    43 |    41 |    21 |     4 | ST33022 |
| Gleditsia   |               24 |   25.223724 |   24.822912 |   25.167336 |   23.503128 |   102 |    28 |    29 |     6 | HF400   |
| Gleditsia   |               25 |  22.7072952 |   22.792944 |   21.988272 |   19.604736 |   110 |    42 |    22 |     3 | ST49312 |
| Gleditsia   |               44 |  22.6173792 |   22.030944 |   22.015704 |   19.958304 |    38 |    30 |    28 |     4 | ST68174 |
| Gleditsia   | 29.1338582677165 |  22.5728784 |   22.226016 |    21.96084 |   20.211288 |    41 |    30 |    27 |     2 | AS03546 |
| Gleditsia   |               24 |  22.3461072 |   22.088856 |     21.4122 |   19.434048 |   105 |    49 |    27 |     3 | ST49396 |
| Gleditsia   |               21 |  22.3262952 |   22.533864 |   22.165056 |   21.098256 |   104 |    25 |    21 |     3 | HF1983  |
| Gleditsia   |               28 |  22.0626432 |   21.357336 |   21.308568 |   20.016216 |    43 |    45 |    25 |     3 | ST68161 |
| Gleditsia   |               26 |   21.873972 |   22.055328 |   21.220176 |   20.308824 |    23 |    18 |    13 |     2 | HF323   |
| Gleditsia   |               30 |  21.6054432 |   21.979128 |   21.918168 |   17.675352 |    51 |    42 |    24 |     3 | HF654   |
| Gleditsia   |               25 |  21.6023952 |   20.644104 |   20.961096 |    17.32788 |   209 |    24 |    25 |     4 | ST07516 |
| Gleditsia   |               29 |  21.5338152 |   21.445728 |   20.616672 |   15.718536 |    74 |    24 |    23 |     2 | ST49506 |
| Gleditsia   |               26 |   21.476208 |   21.360384 |   20.537424 |   17.638776 |   226 |    50 |    23 |     5 | ST49743 |
| Gleditsia   |               26 |  21.4631016 |   20.717256 |   20.702016 |   16.782288 |   106 |    38 |    26 |     4 | ST18291 |
| Gleditsia   |               29 |  21.3990936 |   21.832824 |   21.022056 |     17.0688 |    52 |    28 |    22 |     3 | HF2781  |
| Gleditsia   |               24 |   21.369528 |   20.887944 |    20.60448 |   17.949672 |    49 |    31 |    25 |     3 | ST35741 |
| Gleditsia   |               25 |  21.1814664 |   20.851368 |   20.317968 |   12.591288 |    45 |    42 |    21 |     3 | ST36690 |
| Gleditsia   |               24 |  21.1616544 |   20.906232 |    20.23872 |   16.873728 |    53 |    61 |    13 |     4 | ST81759 |
| Gleditsia   |               28 |  21.1613496 |    20.98548 |   20.445984 |   17.330928 |    47 |    35 |    20 |     5 | ST67575 |
| Gleditsia   |               23 |  21.1494624 |   21.826728 |   21.070824 |   18.144744 |    37 |    31 |    22 |     4 | ST50401 |
| Gleditsia   |               26 |  21.1275168 |     20.3454 |   20.232624 |     6.58368 |    33 |    15 |    16 |     1 | ST36678 |
| Gleditsia   |               24 |    21.03882 |   20.506944 |   20.427696 |   17.288256 |    88 |    41 |    15 |     4 | ST56095 |
| Gleditsia   |               40 |  21.0180936 |   21.271992 |   20.354544 |   18.376392 |   349 |    60 |    15 |     3 | HF858   |
| Gleditsia   |               24 |   21.011388 |   20.897088 |   20.625816 |   17.172432 |   112 |    20 |    24 |     2 | ST18290 |
| Gleditsia   |               24 |  20.9681064 |   20.260056 |   20.135088 |   15.410688 |    34 |    23 |    18 |     1 | ST03942 |
| Gleditsia   |               23 |  20.9364072 |   20.369784 |   20.007072 |   16.166592 |    42 |    53 |    25 |     3 | ST73079 |
| Gleditsia   |               25 |  20.7760824 |   20.595336 |   20.113752 |   18.172176 |    88 |    51 |    25 |     5 | SS03435 |
| Gleditsia   |               31 |  20.7459072 |    20.46732 |   19.961352 |   16.410432 |   290 |    38 |    18 |     3 | HF1150  |
| Gleditsia   |               28 |    20.66544 |   20.903184 |    20.46732 |   19.702272 |    50 |    57 |    24 |     2 | ST04613 |
| Gleditsia   |               24 |  20.6386176 |    20.58924 |   20.232624 |   16.776192 |    33 |    17 |    18 |     3 | ST50402 |
| Gleditsia   |               22 |  20.6343504 |   20.897088 |   20.455128 |   17.995392 |   108 |    24 |    20 |     3 | ST03515 |
| Gleditsia   |               27 |  20.6300832 |   20.519136 |   20.424648 |   17.035272 |    36 |    24 |    14 |     3 | ST36894 |
| Gleditsia   |               30 |  20.5304136 |   19.714464 |   19.623024 |   15.325344 |    52 |    25 |    24 |     2 | HF645   |
| Gleditsia   |               29 |   20.517612 |   20.494752 |   19.647408 |   18.797016 |   100 |    27 |    19 |     2 | HF1811  |
| Gleditsia   |               27 |   20.473416 |   20.272248 |   19.574256 |    16.80972 |   185 |    17 |    21 |     2 | ST80381 |
| Gleditsia   |               29 |  20.4706728 |   20.290536 |   20.202144 |   17.852136 |    48 |    63 |    17 |     3 | ST36060 |
| Gleditsia   |               22 |    20.46732 |   20.061936 |   19.559016 |    16.24584 |   103 |    43 |    33 |     5 | ST81082 |
| Gleditsia   |               42 |  20.4289152 |   20.369784 |   19.778472 |   17.279112 |   105 |    25 |    16 |     1 | HF4215  |
| Gleditsia   |               23 |    20.39874 |    20.54352 |   19.754088 |   16.014192 |    47 |    57 |    29 |     2 | ST41010 |
| Gleditsia   |               25 |  20.3969112 |   19.863816 |   19.668744 |   15.502128 |   125 |    33 |    16 |     3 | ST19955 |
| Gleditsia   |               22 |  20.3923392 |   20.388072 |   19.747992 |   16.767048 |    43 |    40 |    32 |     3 | ST41654 |
| Gymnocladus |               27 |  17.1559728 |   16.258032 |     16.2306 |   13.786104 |   113 |    26 |    17 |     3 | HF2727  |
| Gymnocladus |               22 |  15.7633416 |   15.944088 |   15.130272 |    11.68908 |   126 |    24 |    26 |     1 | ST10604 |
| Juglans     | 43.3070866141732 |  23.4092496 |   23.609808 |    22.76856 |    21.22932 |    49 |    38 |    23 |     2 | AS03576 |
| Juglans     | 32.6771653543307 |  22.6310952 |   22.945344 |   22.256496 |   16.715232 |   187 |    24 |    22 |     2 | AS04252 |
| Juglans     |  31.496062992126 |  22.4646744 |   22.457664 |   21.521928 |   17.681448 |    52 |    16 |    15 |     1 | AS02810 |
| Juglans     |               26 |  22.2589344 |   22.332696 |    21.70176 |   13.392912 |    55 |    26 |    19 |     2 | ST25012 |
| Juglans     |               21 |  21.6920064 |    21.62556 |     20.8788 |    8.272272 |   166 |    23 |    19 |     2 | TS01463 |
| Juglans     |               22 |  21.5487504 |   22.015704 |   21.750528 |   15.517368 |    38 |    40 |    28 |     2 | SS02285 |
| Juglans     |               26 |  21.4582248 |   21.662136 |     21.0312 |   18.940272 |    77 |    36 |    24 |     4 | ST70191 |
| Juglans     | 24.8031496062992 |  21.3667848 |     20.8788 |    20.98548 |   18.382488 |    98 |    50 |    25 |     2 | AS05388 |
| Juglans     | 20.0787401574803 |  21.2259672 |    20.89404 |   20.485608 |    15.75816 |    48 |    36 |    25 |     3 | AS04782 |
| Juglans     |               36 |  21.0336384 |   21.464016 |   21.524976 |    8.705088 |    38 |    37 |    25 |     2 | SS00721 |
| Juglans     | 27.9527559055118 |   20.904708 |   21.204936 |   20.638008 |   18.876264 |    34 |    30 |    27 |     3 | AS03493 |
| Juglans     | 22.0472440944882 |  20.2195176 |   20.202144 |    19.38528 |   16.102584 |    38 |    49 |    13 |     2 | AS03870 |
| Juglans     | 30.3149606299213 |    20.13966 |   20.293584 |    19.76628 |   14.374368 |    36 |    25 |    23 |     3 | AS03522 |
| Juglans     | 33.4645669291339 |   20.014692 |   20.674584 |   19.882104 |    17.11452 |    41 |    25 |    21 |     2 | AS03505 |
| Juglans     |               23 |  19.8354696 |   19.885152 |   19.815048 |   17.352264 |    37 |    25 |    27 |     2 | ST38309 |
| Juglans     |               36 |  19.7592696 |   19.915632 |   19.373088 |   16.190976 |   123 |    23 |    28 |     3 | HF7297  |
| Juglans     |               31 |  19.7455536 |   20.491704 |   20.287488 |    12.74064 |    37 |    23 |    17 |     2 | ST32779 |
| Juglans     |               24 |  19.5885816 |   19.257264 |   18.830544 |   15.566136 |   150 |    24 |    24 |     5 | ST20528 |
| Juglans     | 23.6220472440945 |   19.578828 |    18.92808 |   19.162776 |   17.077944 |    31 |    23 |    18 |     2 | AS02714 |
| Juglans     |               30 |  19.0762128 |   18.726912 |   18.236184 |   17.593056 |    43 |    37 |    28 |     4 | TS01102 |
| Juglans     |               26 |  19.0710312 |   19.744944 |    18.77568 |   17.565624 |    43 |    21 |    23 |     3 | ST58766 |
| Juglans     |               24 |  18.7698888 |   18.266664 |   18.031968 |   13.341096 |    67 |    20 |    17 |     1 | HF6393  |
| Juglans     | 23.6220472440945 |  18.7448952 |      19.431 |   18.473928 |   16.133064 |    41 |    23 |    28 |     1 | AS02748 |
| Juglans     |               33 |   18.681192 |    19.08048 |     18.2118 |   17.123664 |   127 |    24 |    16 |     2 | ST72469 |
| Juglans     |               24 |  18.5528712 |   18.803112 |   18.857976 |   16.190976 |    65 |    18 |    27 |     4 | ST80092 |
| Juglans     |               21 |  18.4364376 |    18.62328 |   18.321528 |   16.495776 |    21 |    18 |    16 |     5 | HF5145  |
| Juglans     |               33 |  18.2980584 |   18.495264 |   17.900904 |   15.252192 |    33 |    21 |    19 |     3 | ST42187 |
| Juglans     | 29.5275590551181 |  18.2828184 |    17.86128 |    17.89176 |   12.368784 |   119 |    13 |    14 |     2 | AS02834 |
| Juglans     |               26 |  18.0767736 |   18.202656 |     18.0594 |   16.873728 |    46 |    50 |    23 |     4 | SS03257 |
| Juglans     |               25 |  17.3120304 |   17.788128 |   17.041368 |   15.090648 |    22 |    29 |    22 |     2 | ST20199 |
| Juglans     |               27 |  17.3068488 |    17.26692 |   16.635984 |   14.420088 |    38 |    37 |    27 |     1 | ST20200 |
| Juglans     |               23 |  17.2492416 |   17.727168 |   16.925544 |   13.764768 |    50 |    47 |    14 |     5 | ST45769 |
| Juglans     |               25 |   17.163288 |   17.138904 |   17.050512 |   13.673328 |    95 |    26 |    19 |     2 | ST42003 |
| Juglans     | 21.6535433070866 |  17.1428664 |   16.468344 |   16.892016 |   13.962888 |    41 |    20 |    19 |     1 | AS02514 |
| Juglans     | 25.5905511811024 |  17.0072304 |   16.998696 |   16.739616 |   15.157704 |    32 |    33 |    25 |     2 | AS02373 |
| Juglans     |               35 |  16.9755312 |   17.666208 |   16.727424 |    8.491728 |    57 |    16 |    19 |     1 | HF1599  |
| Juglans     |               27 |  16.7002968 |   16.660368 |   16.834104 |   13.417296 |    38 |    59 |    32 |     3 | ST72289 |
| Juglans     |               26 |  16.6807896 |     16.3068 |   17.065752 |   16.157448 |    37 |    21 |    23 |     4 | ST53791 |
| Juglans     |               26 |  16.2757104 |   16.925544 |   16.651224 |    13.12164 |    54 |    42 |    24 |     2 | ST04466 |
| Juglans     |               25 |   16.204692 |   15.459456 |   16.401288 |   11.448288 |    74 |    17 |    55 |     2 | ST88626 |
| Picea       |               11 |   25.830276 |   25.773888 |   25.795224 |   22.698456 |   194 |    44 |    18 |     4 | ST33216 |
| Picea       |               21 |  23.3577384 |     23.4696 |    22.52472 |   20.153376 |    69 |    84 |    38 |     5 | SS01247 |
| Picea       |               23 |  21.8946984 |    21.80844 |   21.265896 |   19.086576 |    50 |    71 |    22 |     2 | ST08014 |
| Picea       | 13.7795275590551 |   21.403056 |   20.964144 |   20.979384 |   18.534888 |    43 |    25 |    21 |     3 | AS04292 |
| Picea       | 25.5905511811024 |  21.3295992 |   21.323808 |   20.561808 |   17.574768 |    39 |    19 |    25 |     3 | AS02894 |
| Picea       | 27.5590551181102 |  21.1122768 |   21.378672 |   20.461224 |    15.97152 |    43 |    71 |    21 |     1 | AS01482 |
| Picea       |               21 |  20.7532224 |   21.262848 |   20.317968 |   18.717768 |    50 |    59 |    26 |     7 | SS01239 |
| Picea       |  28.740157480315 |  20.5782672 |   20.622768 |   19.738848 |   17.794224 |   347 |    29 |    28 |     5 | AS04950 |
| Picea       |               28 |  20.2167744 |   20.226528 |   20.122896 |   19.763232 |   109 |    33 |    22 |    10 | SS00367 |
| Picea       |               28 |  19.9010016 |    20.07108 |   19.760184 |   16.197072 |    18 |    17 |    14 |     3 | HF1376  |
| Picea       |               16 |  19.4712336 |   19.510248 |   18.510504 |   15.724632 |    63 |    19 |    13 |     4 | SS03349 |
| Picea       |               18 |  19.1356488 |   18.970752 |   18.233136 |   16.895064 |   108 |    39 |    28 |     5 | SS03330 |
| Picea       |               11 |  19.0158624 |    18.37944 |    18.34896 |    13.19784 |    80 |    26 |    22 |     2 | HF2818  |
| Picea       |               12 |  18.9747144 |    18.54708 |   18.434304 |   18.035016 |    85 |    25 |    24 |     4 | HF1960  |
| Picea       |               18 |  18.9503304 |   19.031712 |   18.065496 |   16.934688 |    44 |    69 |    33 |     2 | SS02816 |
| Picea       |               23 |  18.3724296 |   18.355056 |    17.40408 |   16.757904 |    50 |    50 |    32 |     4 | HF5574  |
| Picea       |               22 |  18.3389016 |   18.245328 |   17.721072 |   16.053816 |    59 |    72 |    28 |     3 | ST86209 |
| Picea       |               51 |  18.2267352 |    17.58696 |   17.443704 |     8.51916 |    52 |    58 |    32 |     3 | HF3080  |
| Picea       |               16 |  18.2212488 |   18.062448 |   18.099024 |   13.420344 |     9 |     5 |    11 |     1 | ST53516 |
| Picea       |               18 |  18.0965856 |   17.654016 |   17.468088 |   14.825472 |    24 |    34 |    26 |     4 | HF3669  |
| Picea       |               13 |  17.8042824 |    18.48612 |   17.775936 |    16.01724 |    49 |    80 |    24 |     5 | ST42334 |
| Picea       |               15 |  17.6436528 |   17.797272 |    17.12976 |   17.364456 |    45 |    60 |    33 |     3 | ST42581 |
| Picea       |               13 |  17.1684696 |   16.709136 |    17.28216 |   16.828008 |   108 |    28 |    31 |     6 | TS01479 |
| Picea       |               14 |  17.1651168 |   17.108424 |   16.270224 |   10.229088 |    39 |    27 |    16 |     2 | HF6497  |
| Picea       |               11 |  17.1218352 |   16.952976 |    16.58112 |     10.9728 |   104 |    19 |    15 |     2 | HF4037  |
| Picea       | 16.1417322834646 |  17.1193968 |   16.904208 |   16.852392 |   17.279112 |    27 |    16 |    18 |     3 | AS04294 |
| Picea       |               16 |  17.0758104 |   17.288256 |   16.739616 |     7.55904 |   109 |    14 |    21 |     3 | HF5966  |
| Picea       |               14 |   16.843248 |   16.645128 |   16.602456 |   16.568928 |    88 |    18 |    21 |     3 | ST86121 |
| Picea       |               18 |  16.6768272 |   16.532352 |   15.736824 |   12.996672 |    36 |    30 |    36 |     3 | ST53483 |
| Picea       | 14.9606299212598 |  16.4598096 |   16.684752 |   15.761208 |   10.533888 |    49 |    24 |    26 |     1 | AS04443 |
| Picea       |               12 |  16.4534088 |   16.803624 |    16.03248 |   15.489936 |    52 |    21 |    11 |     1 | HF723   |
| Picea       | 17.3228346456693 |   16.361664 |   16.401288 |   15.898368 |   11.981688 |    42 |    28 |    12 |     1 | AS04903 |
| Picea       | 13.7795275590551 |  16.2650424 |   15.432024 |    15.65148 |   14.395704 |    46 |    22 |    20 |     3 | AS05024 |
| Picea       |               17 |  16.2150552 |   16.069056 |   15.541752 |    14.08176 |   108 |    59 |    39 |     6 | ST69992 |
| Picea       |               12 |  16.1915856 |    16.59636 |   16.386048 |   14.819376 |   104 |    33 |    22 |     2 | HF2076  |
| Picea       |               49 |  16.1629344 |   15.776448 |   15.252192 |   12.777216 |    51 |    70 |    35 |     6 | HF7273  |
| Picea       | 13.7795275590551 |  16.1108136 |    15.74292 |   15.115032 |    13.06068 |    40 |    31 |    15 |     2 | AS01056 |
| Picea       |               14 |    16.09344 |   15.459456 |    15.19428 |    11.84148 |   162 |    18 |    24 |     3 | HF6314  |
| Picea       |               15 |  16.0474152 |   16.157448 |   16.392144 |    7.607808 |    44 |    26 |     9 |     1 | HF2784  |
| Picea       | 18.8976377952756 |  15.7587696 |   15.617952 |    14.84376 |   12.856464 |    44 |    70 |    28 |     7 | AS04682 |
| Pinus       |               22 |   23.108412 |   22.914864 |   22.229064 |   19.824192 |    47 |   101 |    33 |     3 | ST12429 |
| Pinus       |               22 |   21.652992 |   22.183344 |    21.70176 |   20.546568 |    50 |    62 |    13 |     4 | HF4707  |
| Pinus       |               27 |  21.4073232 |   21.296376 |   20.912328 |   18.144744 |    47 |    31 |    13 |     2 | HF4666  |
| Pinus       |               32 |  20.0229216 |    20.08632 |   19.251168 |    8.196072 |    47 |    46 |    30 |     3 | HF4665  |
| Pinus       |               25 |  19.0365888 |   18.720816 |   18.635472 |   16.364712 |   114 |    38 |    33 |     2 | ST52803 |
| Pinus       |               23 |  18.2063136 |   18.184368 |   17.501616 |   16.861536 |   105 |    67 |    33 |     3 | SS01851 |
| Pinus       |               21 |  14.8111464 |   15.017496 |   15.639288 |     9.09828 |   140 |    37 |    33 |     3 | TS01345 |
| Pinus       |               30 |  13.9257024 |    14.90472 |   14.353032 |   14.106144 |    44 |    38 |    16 |     2 | ST14177 |
| Pinus       |               27 |  13.6647936 |   12.749784 |   13.310616 |   10.610088 |    45 |    32 |    34 |     2 | HF1060  |
| Pinus       |               21 |  13.5767064 |    13.51788 |   12.743688 |   10.131552 |    52 |    61 |    38 |     2 | ST38981 |
| Pinus       |               21 |  11.7695472 |   11.484864 |   11.241024 |   11.076432 |    48 |    29 |    18 |     4 | HF6019  |
| Platanus    |               37 |  26.9424912 |   27.130248 |    26.15184 |   22.893528 |    97 |    53 |    16 |     6 | ST22430 |
| Platanus    |               31 |  22.1373192 |   22.183344 |   21.866352 |   18.278856 |   137 |    25 |    21 |     4 | HF3658  |
| Platanus    |               24 |  22.0382592 |   22.427184 |   21.546312 |    14.26464 |    89 |    14 |    26 |     2 | SS01004 |
| Platanus    |               26 |  21.4920576 |   21.019008 |    20.52828 |   17.096232 |   123 |    23 |    25 |     5 | ST76851 |
| Platanus    |               25 |  19.5507864 |   20.046696 |   19.641312 |   19.635216 |   109 |    51 |    29 |     7 | SS00996 |
| Platanus    |               34 |  19.4197224 |   18.861024 |   19.168872 |   18.361152 |    40 |    30 |    17 |     4 | ST37620 |
| Platanus    |               30 |  19.3176144 |   19.345656 |     18.5166 |   16.547592 |    98 |    25 |    29 |     3 | ST63222 |
| Platanus    |               23 |   19.267932 |    19.84248 |   19.028664 |    5.590032 |    45 |    32 |    20 |     1 | ST48754 |
| Platanus    |               25 |    18.28038 |   17.446752 |   17.547336 |   15.368016 |   151 |    42 |    12 |     5 | ST19544 |
| Platanus    | 27.5590551181102 |   17.269968 |   17.187672 |   16.952976 |    7.775448 |   104 |    29 |    25 |     4 | AS05393 |
| Populus     |               22 |    31.85922 |   32.320992 |   31.376112 |   29.193744 |    54 |    15 |    16 |     3 | TS00737 |
| Populus     |               49 |  30.5004216 |   30.376368 |   30.367224 |   23.213568 |    25 |    20 |    31 |     2 | TS00733 |
| Populus     |               44 |  29.7518328 |   29.742384 |   29.492448 |   23.420832 |    47 |    39 |    27 |     1 | TS00748 |
| Populus     |               30 |   28.908756 |   28.571952 |   27.925776 |    27.38628 |    92 |    26 |    24 |     3 | TS00808 |
| Populus     |               30 |  28.2263088 |    27.63012 |   28.120848 |   26.249376 |    96 |    51 |    28 |     6 | ST54418 |
| Populus     |               49 |  27.9160224 |   27.163776 |   27.651456 |    27.95016 |    60 |    57 |    43 |     4 | TP00205 |
| Populus     |               44 |  27.3881088 |   27.227784 |   27.575256 |   25.676352 |    91 |    22 |    28 |     3 | SS00337 |
| Populus     |               27 |  26.2399272 |   26.956512 |   26.828496 |    26.07564 |    34 |    47 |    29 |     3 | TS00728 |
| Populus     |               28 |  26.0143752 |    26.73096 |   26.130504 |   27.300936 |    31 |    32 |    25 |     7 | HF3782  |
| Populus     | 31.1023622047244 |  25.7668776 |   24.792432 |   25.392888 |   25.203912 |    45 |    24 |    28 |     3 | AS00416 |
| Populus     |               26 |  25.5961896 |   25.645872 |   25.886664 |   21.393912 |    79 |    40 |    20 |     4 | ST72301 |
| Populus     |               29 |  25.5120648 |   25.947624 |   25.213056 |   24.545544 |    50 |    29 |    23 |     3 | ST86107 |
| Populus     |               34 |  25.0143264 |   25.264872 |    25.77084 |     24.4602 |    46 |    31 |    28 |     5 | HF269   |
| Populus     |               48 |  24.9640344 |    25.05456 |   24.207216 |    21.54936 |   104 |    26 |    21 |     4 | HF398   |
| Populus     |               52 |  24.9390408 |    25.03932 |   24.438864 |   23.969472 |    38 |    20 |    28 |     3 | ST27721 |
| Populus     |               43 |  24.9000264 |   24.926544 |   24.249888 |   23.433024 |    50 |    57 |    33 |     3 | ST65438 |
| Populus     |               74 |  24.8613168 |    24.03348 |   24.990552 |   25.566624 |    44 |    26 |    31 |     4 | HF4135  |
| Populus     |               40 |   24.638508 |   24.496776 |   24.121872 |   24.390096 |   109 |    27 |    17 |     6 | SS03345 |
| Populus     |               35 |  24.6113808 |     24.5364 |   23.984712 |   23.692104 |    42 |    40 |    30 |     3 | ST72805 |
| Populus     |               31 |  24.3452904 |    24.74976 |   24.451056 |   23.963376 |   112 |    25 |    30 |     4 | ST32217 |
| Populus     | 33.4645669291339 |  23.9106456 |   23.594568 |   23.228808 |   22.878288 |    44 |    16 |    29 |     4 | AS00412 |
| Populus     |               39 |  23.8134144 |   23.228808 |    22.89048 |   20.826984 |    84 |    26 |    23 |     5 | HF1998  |
| Populus     | 40.1574803149606 |  23.7512352 |   23.582376 |   23.481792 |   23.259288 |   146 |    46 |    32 |     4 | AS04580 |
| Populus     |               26 |  23.7177072 |   23.143464 |   22.960584 |   21.659088 |    56 |    15 |    15 |     2 | ST13873 |
| Populus     | 27.9527559055118 |  23.3677968 |   23.579328 |   23.064216 |   22.299168 |    42 |    35 |    24 |     4 | AS04568 |
| Populus     | 43.7007874015748 |  23.3281728 |    22.66188 |   23.457408 |   23.219664 |    63 |    13 |    27 |     2 | AS04633 |
| Populus     | 33.0708661417323 |  23.2937304 |   23.234904 |   22.430232 |    22.03704 |    40 |    29 |    26 |     5 | AS00390 |
| Populus     |               36 |   23.152608 |   23.369016 |   22.954488 |   23.207472 |    86 |    23 |    26 |     2 | ST13168 |
| Populus     |               44 |  23.0837232 |   22.664928 |   22.381464 |   21.360384 |    97 |    37 |    34 |     2 | ST08548 |
| Populus     | 35.8267716535433 |  23.0757984 |   22.686264 |   22.079712 |    20.33016 |    36 |    53 |    30 |     6 | AS00321 |
| Populus     | 36.6141732283465 |  22.9694232 |   23.161752 |   23.140416 |    22.57044 |    33 |    25 |    22 |     5 | AS00307 |
| Populus     |               41 |  22.7627688 |   22.795992 |    23.63724 |   18.095976 |    70 |    21 |    25 |     3 | TS00811 |
| Populus     | 56.2992125984252 |  22.7374704 |   22.213824 |    22.35708 |   21.695664 |    46 |    15 |    33 |     5 | AS00388 |
| Populus     | 50.3937007874016 |   22.614636 |   23.579328 |    22.81428 |   23.381208 |    43 |    49 |    12 |     3 | AS05498 |
| Populus     | 29.9212598425197 |  22.3747584 |   22.643592 |   21.866352 |   21.195792 |   154 |    24 |    21 |     2 | AS00293 |
| Populus     | 32.2834645669291 |  22.3421448 |   22.393656 |   22.597872 |   22.872192 |   100 |    31 |    23 |     3 | AS00252 |
| Populus     |               36 |  22.2281496 |   22.149816 |    21.27504 |   21.314664 |   234 |    29 |    25 |     2 | ST74168 |
| Populus     | 28.3464566929134 |    22.11324 |   21.829776 |   21.756624 |     18.4404 |    52 |    27 |    33 |     3 | AS01542 |
| Populus     |               21 |  22.0181424 |   21.101304 |   21.055584 |    21.00072 |    38 |    28 |    22 |     5 | TP00341 |
| Populus     | 39.7637795275591 |  21.9718128 |   22.073616 |   22.338792 |   21.771864 |    79 |    26 |    29 |     3 | AS00286 |
| Quercus     |               37 |  30.4367184 |   29.556456 |   30.348936 |    29.47416 |    41 |    31 |    25 |     4 | SS01670 |
| Quercus     |               36 |  29.8472352 |   29.876496 |    29.76372 |   20.141184 |    41 |    21 |    24 |     3 | SS01691 |
| Quercus     |               38 |  29.0529264 |   29.099256 |   29.059632 |   28.632912 |   153 |    21 |    17 |     2 | SS01672 |
| Quercus     |               22 |  28.6079184 |   28.069032 |   28.065984 |   27.819096 |    81 |    28 |    10 |     1 | ST27011 |
| Quercus     |               35 |  28.5862776 |   28.989528 |   29.117544 |   29.074872 |    43 |    24 |    15 |     3 | SS01697 |
| Quercus     |               42 |  28.4768544 |   28.181808 |   28.678632 |   27.374088 |   101 |    41 |    26 |     5 | ST27505 |
| Quercus     |               23 |  28.3427424 |   28.325064 |   28.014168 |   26.386536 |    32 |    27 |    14 |     2 | SS01669 |
| Quercus     |               41 |   28.250388 |   28.398216 |   28.264104 |       26.67 |   181 |    18 |    25 |     3 | SS01683 |
| Quercus     |               29 |   28.189428 |    27.38628 |    27.76728 |   27.794712 |    31 |    25 |     6 |     3 | SS01647 |
| Quercus     |               35 |  27.4143216 |   26.423112 |   27.236928 |   25.152096 |   190 |    31 |    21 |     3 | SS01678 |
| Quercus     |               43 |   26.093928 |   25.673304 |   25.447752 |   26.371296 |    15 |    10 |    14 |     4 | SS01663 |
| Quercus     |               28 |  25.9470144 |   26.118312 |   25.624536 |   25.173432 |   149 |    25 |    21 |     4 | SS01784 |
| Quercus     |               23 |  25.9390896 |    25.48128 |   25.901904 |     26.0604 |     8 |    11 |    16 |     6 | SS02122 |
| Quercus     |               31 |  25.8857496 |    25.63368 |   25.886664 |     25.2984 |    72 |    34 |    24 |     3 | ST27506 |
| Quercus     |               23 |   25.728168 |   25.761696 |    25.16124 |   22.530816 |    43 |    22 |    23 |     3 | SS00675 |
| Quercus     |               28 |   25.476708 |   25.456896 |   24.911304 |   24.222456 |    92 |    56 |    24 |     4 | ST27411 |
| Quercus     |               37 |  25.4215392 |   25.667208 |      25.146 |   25.127712 |   119 |    25 |    31 |     5 | ST63185 |
| Quercus     |               32 |  25.1466096 |   25.536144 |    25.84704 |   25.213056 |   131 |    31 |    26 |     4 | SS00335 |
| Quercus     |               34 |  24.7784112 |   24.624792 |   24.822912 |   23.414736 |   102 |    28 |    21 |     5 | ST65806 |
| Quercus     |               26 |  24.6528336 |    24.49068 |   23.871936 |   24.432768 |    38 |    19 |    22 |     4 | SS02128 |
| Quercus     |               23 |  24.5629176 |   23.945088 |   23.826216 |    23.66772 |   229 |    30 |    27 |     4 | SS01705 |
| Quercus     |               25 |  24.5184168 |   24.496776 |   23.920704 |   21.253704 |    44 |    29 |    21 |     3 | SS01946 |
| Quercus     | 55.1181102362205 |  24.5025672 |   24.335232 |   24.606504 |   22.899624 |   110 |    29 |    21 |     3 | AS05417 |
| Quercus     |               29 |    24.48306 |     23.7744 |    23.91156 |   23.640288 |    30 |    15 |    20 |     3 | SS01131 |
| Quercus     |               27 |  24.3705888 |   24.365712 |   23.734776 |   22.671024 |    36 |    30 |    23 |     2 | SS01132 |
| Quercus     |               26 |     24.0411 |   23.387304 |   23.183088 |   20.601432 |    39 |    30 |    20 |     2 | SS01226 |
| Quercus     |               30 |  23.9517936 |   23.908512 |   23.746968 |   23.173944 |    45 |    40 |    10 |     5 | SS01094 |
| Quercus     |               33 |  23.8085376 |    23.91156 |     23.9268 |   23.295864 |   104 |    24 |    28 |     4 | ST63198 |
| Quercus     |               29 |  23.8036608 |   23.369016 |   23.420832 |     23.4696 |    54 |    15 |    23 |     5 | ST63137 |
| Quercus     |               27 |  23.7006384 |   23.341584 |   23.262336 |   22.899624 |    31 |    18 |    21 |     5 | HF850   |
| Quercus     |               29 |  23.6713776 |   23.594568 |   23.039832 |    21.67128 |    49 |    31 |    39 |     4 | ST51714 |
| Quercus     |               23 |  23.6530896 |   23.643336 |   23.061168 |   21.622512 |    84 |    24 |    23 |     4 | SS01777 |
| Quercus     |               30 |  23.4110784 |   23.990808 |   24.252936 |   24.222456 |   109 |    45 |    18 |     6 | ST26917 |
| Quercus     |               25 |   23.391876 |   23.554944 |   22.988016 |   21.918168 |    79 |    21 |    23 |     3 | ST32838 |
| Quercus     |               29 |  23.2483152 |   22.664928 |   22.917912 |   21.409152 |    40 |    26 |    25 |     1 | SS02228 |
| Quercus     |               40 |  23.1849168 |    22.81428 |   22.472904 |   20.613624 |   117 |    29 |    18 |     3 | HF5540  |
| Quercus     |               26 |  23.1620568 |   23.326344 |   22.329648 |   21.820632 |    39 |    25 |    24 |     3 | HF4164  |
| Quercus     |               25 |  23.1538272 |    23.50008 |   22.911816 |   19.516344 |    88 |    45 |    38 |     4 | ST48697 |
| Quercus     |               31 |   23.099268 |    23.14956 |   23.128224 |   23.219664 |    88 |    17 |    14 |     5 | ST32466 |
| Quercus     |               27 |  23.0666544 |   22.485096 |   22.369272 |   21.744432 |    39 |    23 |    22 |     2 | ST33101 |
| Robinia     |               23 |  26.4054336 |   26.740104 |   26.615136 |   24.697944 |    74 |    17 |    18 |     4 | HF4196  |
| Robinia     |               25 |  25.2660912 |   25.667208 |   24.813768 |    21.74748 |    89 |    23 |    28 |     2 | SS00424 |
| Robinia     |               22 |  23.8454184 |   24.725376 |   24.161496 |   23.061168 |   116 |    26 |    23 |     6 | SS00417 |
| Robinia     |               35 |  23.0751888 |   22.856952 |   22.317456 |   17.291304 |   123 |    30 |    33 |     2 | HF2443  |
| Robinia     |               33 |  21.7803984 |   21.616416 |    22.44852 |   19.702272 |    95 |    23 |    22 |     4 | SS00419 |
| Robinia     |               25 |   20.869656 |   21.223224 |    21.42744 |   21.116544 |   104 |    26 |    22 |     4 | HF2193  |
| Robinia     |               31 |  20.4136752 |   20.540472 |   20.080224 |   16.279368 |    42 |    60 |    15 |     4 | ST63779 |
| Robinia     |               22 |  18.0432456 |    18.18132 |   17.269968 |    16.03248 |    37 |    47 |    23 |     3 | TS01198 |
| Robinia     |               28 |  17.9548536 |   17.867376 |   17.087088 |   15.867888 |    50 |    32 |     5 |     4 | HF6070  |
| Robinia     |               38 |  17.6119536 |   18.284952 |    17.72412 |   16.568928 |    49 |    28 |    55 |     3 | ST52517 |
| Robinia     |               24 |   15.364968 |   15.197328 |   15.502128 |    9.534144 |    44 |    59 |    20 |     1 | ST21993 |
| Salix       |               57 |  22.4244408 |   22.140672 |   21.637752 |     21.1074 |    40 |    38 |    26 |     5 | ST52429 |
| Salix       |               38 |  17.2141896 |   17.964912 |   17.407128 |   12.697968 |    51 |    17 |    23 |     2 | HF2538  |
| Tilia       |               23 |   24.987504 |   24.832056 |     24.4602 |   23.460456 |    39 |    42 |    11 |     8 | ST31545 |
| Tilia       |               26 |  23.7841536 |   24.036528 |   23.948136 |   23.170896 |    51 |    50 |    10 |     6 | ST32102 |
| Tilia       |               23 |  23.6619288 |    24.14016 |   24.609552 |   24.451056 |    40 |    35 |    27 |     5 | SS00783 |
| Tilia       |               22 |  23.3053128 |   23.259288 |   23.183088 |   22.710648 |   143 |    25 |    13 |     8 | SS02096 |
| Tilia       |               26 |  22.7886768 |   23.265384 |   23.036784 |   21.790152 |   157 |    53 |    33 |     4 | ST32171 |
| Tilia       |               23 |  22.7359464 |   22.924008 |   22.375368 |    21.83892 |    32 |    30 |    16 |     5 | SS00768 |
| Tilia       |               23 |  22.5442272 |   22.521672 |   22.488144 |    22.06752 |   118 |    32 |    19 |     4 | ST13511 |
| Tilia       |               24 |  22.3503744 |   22.634448 |   22.414992 |    22.92096 |    47 |    46 |    12 |     5 | ST31571 |
| Tilia       |               50 |   22.290024 |    22.49424 |     21.6408 |   16.194024 |    29 |    23 |    19 |     5 | HF4120  |
| Tilia       |               24 |  21.7621104 |   21.988272 |   21.022056 |   17.187672 |    49 |    70 |    29 |     5 | ST12276 |
| Tilia       |               26 |  21.2604096 |     20.8788 |   20.567904 |   19.196304 |   170 |    23 |    21 |     3 | ST33941 |
| Tilia       |               22 |  21.2031072 |   21.421344 |    21.24456 |    20.77212 |    32 |    22 |    24 |     6 | ST31776 |
| Tilia       |               22 |   21.195792 |   21.515832 |   21.180552 |    18.39468 |    30 |    27 |    18 |     2 | ST31811 |
| Tilia       |               38 |  20.9638392 |   21.415248 |   20.839176 |   20.473416 |   129 |    55 |    22 |     6 | ST11027 |
| Tilia       |               26 |  20.9074512 |   21.043392 |   20.321016 |   19.485864 |    39 |    55 |     6 |     4 | ST72751 |
| Tilia       |               34 |   20.700492 |   20.698968 |   19.854672 |   19.229832 |    47 |    28 |    12 |     2 | ST31628 |
| Tilia       |               29 |   20.676108 |   20.205192 |   19.702272 |   20.564856 |    48 |    58 |    12 |     5 | ST72910 |
| Tilia       |               23 |  20.6724504 |   20.958048 |    20.43684 |    11.26236 |    48 |    22 |    15 |     2 | ST09196 |
| Tilia       |               22 |  20.6657448 |   20.409408 |   19.839432 |   19.196304 |   104 |    32 |     8 |     4 | ST10619 |
| Tilia       |               34 |  20.4920088 |   20.750784 |      20.193 |    20.14728 |    28 |    23 |    13 |     5 | ST35978 |
| Tilia       |              121 |  20.3670408 |   20.854416 |   20.845272 |   18.193512 |    31 |    24 |    21 |     8 | HF4127  |
| Tilia       |               26 |  20.3231496 |   20.064984 |   20.098512 |    19.44624 |    50 |     6 |    23 |     4 | ST07731 |
| Tilia       |               30 |  20.2871832 |     20.0406 |   19.348704 |    9.195816 |   252 |    41 |    11 |     2 | ST69814 |
| Tilia       |               28 |  20.2749912 |   20.064984 |   19.452336 |   18.388584 |    46 |    44 |    23 |     3 | ST73073 |
| Tilia       |               29 |  20.2442064 |   20.424648 |   19.458432 |   17.410176 |    51 |    68 |    26 |     3 | ST13064 |
| Tilia       |               38 |   20.194524 |   20.260056 |   21.022056 |   21.165312 |   274 |    29 |    27 |     5 | ST32487 |
| Tilia       |               23 |  20.1216768 |     20.2692 |   19.653504 |   19.235928 |    45 |    46 |    19 |     2 | ST63469 |
| Tilia       |               22 |  20.0165208 |   20.403312 |   19.607784 |   19.062192 |    43 |    53 |    22 |     5 | SS02283 |
| Tilia       |               22 |    19.98726 |   19.671792 |   19.077432 |   15.230856 |   101 |    21 |    14 |     3 | ST80723 |
| Tilia       |               24 |  19.9214232 |   19.854672 |   18.937224 |   18.672048 |   107 |    41 |    13 |     5 | ST70327 |
| Tilia       |               35 |   19.876008 |    19.85772 |   19.123152 |   18.839688 |    34 |    44 |    11 |     3 | ST63658 |
| Tilia       |               22 |  19.8113904 |   20.000976 |   19.031712 |   15.873984 |    50 |    95 |    63 |     3 | ST28139 |
| Tilia       |               27 |   19.702272 |   19.577304 |    18.92808 |   16.968216 |    51 |    92 |    35 |     6 | ST88320 |
| Tilia       |               30 |  19.5538344 |   19.577304 |   18.824448 |   17.836896 |    44 |    24 |     9 |     3 | ST24723 |
| Tilia       |               39 |  19.5334128 |   19.641312 |   19.083528 |   16.425672 |    45 |    46 |    32 |     2 | ST70139 |
| Tilia       |               21 |  19.4687952 |   19.982688 |    20.31492 |    18.88236 |    41 |    46 |    13 |     5 | ST38412 |
| Tilia       |               22 |  19.4273424 |   19.205448 |   18.464784 |   17.858232 |    48 |    39 |    20 |     4 | ST29966 |
| Tilia       |               42 |  19.4245992 |   20.037552 |    19.97964 |   18.336768 |   102 |    30 |    11 |     1 | ST10620 |
| Tilia       |               29 |  19.1984376 |    19.23288 |   19.242024 |    17.48028 |    54 |    27 |    23 |     7 | ST16699 |
| Tilia       |               22 |  19.1152272 |   19.016472 |   18.370296 |   17.522952 |   114 |    41 |    10 |     5 | ST69739 |
| Ulmus       |               26 |  24.3785136 |   23.487888 |   23.433024 |   19.763232 |   109 |    48 |    24 |     7 | SS02680 |
| Ulmus       |               32 |   23.323296 |   23.308056 |   23.070312 |    21.99132 |   116 |    33 |    24 |     4 | ST18253 |
| Ulmus       |               25 |   23.189184 |   23.228808 |    22.92096 |   21.936456 |   128 |    38 |    21 |     4 | SS02999 |
| Ulmus       |               21 |  23.0959152 |   23.295864 |   22.588728 |     22.0218 |    67 |    28 |     9 |     3 | ST48949 |
| Ulmus       |               34 |  22.9307136 |   23.158704 |    23.34768 |   22.530816 |   100 |    62 |    20 |     5 | ST35378 |
| Ulmus       |               41 |  22.6658424 |   22.506432 |   22.122384 |   20.540472 |    45 |    41 |    16 |     2 | ST38524 |
| Ulmus       |               45 |  22.5661728 |   21.985224 |   22.719792 |   22.232112 |    43 |    42 |    14 |     6 | ST33223 |
| Ulmus       |               21 |   22.172676 |   22.064472 |   21.421344 |   19.915632 |    39 |    33 |     9 |     2 | ST31031 |
| Ulmus       |               21 |   21.901404 |    21.77796 |   21.028152 |   18.708624 |   112 |    23 |    19 |     3 | SS01776 |
| Ulmus       |               26 |  21.3311232 |   20.805648 |   21.189696 |   18.641568 |    72 |    16 |    22 |     2 | ST23560 |
| Ulmus       |               35 |  21.3201504 |   21.348192 |   20.409408 |   20.278344 |    89 |    45 |    30 |     4 | ST50747 |
| Ulmus       |               40 |   21.316188 |   21.537168 |   21.354288 |      21.336 |    36 |    31 |    37 |     4 | ST59825 |
| Ulmus       |               39 |   21.151596 |   21.235416 |   21.143976 |   19.540728 |    50 |    85 |    37 |     6 | ST87494 |
| Ulmus       |               28 |  20.9300064 |   20.747736 |   20.631912 |   19.488912 |    75 |    33 |    24 |     4 | ST25867 |
| Ulmus       |               38 |  20.9263488 |    20.90928 |   20.366736 |   19.802856 |    98 |    33 |    31 |     4 | ST57946 |
| Ulmus       |               45 |   20.906232 |   21.073872 |   20.598384 |    19.99488 |   121 |    30 |    29 |     3 | ST08052 |
| Ulmus       |               36 |  20.5956408 |   20.683728 |   20.077176 |    19.32432 |    49 |    33 |    15 |     4 | SS02884 |
| Ulmus       |               34 |  20.4508608 |   20.415504 |   20.244816 |   20.110704 |   119 |    44 |    26 |     2 | ST67878 |
| Ulmus       |               38 |  20.4496416 |   20.705064 |   20.479512 |   19.193256 |    96 |    37 |    28 |     2 | ST35199 |
| Ulmus       |               31 |   20.415504 |   20.290536 |   20.049744 |   19.296888 |   121 |    17 |    19 |     4 | ST38201 |
| Ulmus       |               38 |  20.0860152 |   20.019264 |   20.183856 |   20.506944 |    47 |    10 |    12 |     3 | ST35249 |
| Ulmus       | 25.1968503937008 |  19.8497952 |   19.946112 |   19.129248 |   17.958816 |    81 |    43 |     8 |     3 | AS03174 |
| Ulmus       |               36 |  19.8229728 |   19.424904 |   19.223736 |   18.339816 |    81 |    28 |    25 |     4 | ST35200 |
| Ulmus       |               39 |  19.5321936 |   19.586448 |    18.94332 |   19.366992 |    47 |    33 |    28 |     4 | ST68878 |
| Ulmus       |               21 |  19.5111624 |   19.409664 |   19.104864 |   18.446496 |    47 |    34 |    27 |     6 | ST50224 |
| Ulmus       |               39 |    19.46148 |    19.64436 |   20.445984 |   19.412712 |    92 |    34 |    17 |     3 | ST67662 |
| Ulmus       |               22 |    19.44624 |   19.351752 |   18.946368 |   17.468088 |    93 |    18 |     7 |     3 | HF1876  |
| Ulmus       |               24 |  19.4428872 |    19.52244 |    20.28444 |   20.080224 |   102 |    24 |    31 |     2 | ST52295 |
| Ulmus       |               44 |    19.30908 |   19.379184 |   18.483072 |   17.888712 |   147 |    31 |    38 |     5 | TS01344 |
| Ulmus       |               38 |  19.1606424 |   19.574256 |    18.83664 |   19.696176 |    47 |    50 |    25 |     3 | ST69606 |
| Ulmus       |               38 |  19.1286384 |   19.226784 |    18.47088 |    18.71472 |    46 |    23 |    25 |     2 | ST37025 |
| Ulmus       |               26 |   19.068288 |   18.839688 |     18.5928 |   18.230088 |    44 |    14 |    10 |     5 | ST25260 |
| Ulmus       |               38 |  19.0503048 |    18.86712 |    18.50136 |   18.153888 |    43 |    27 |    29 |     2 | ST36960 |
| Ulmus       |               34 |  19.0030608 |    19.29384 |   18.434304 |   20.281392 |   122 |    58 |    18 |     6 | ST11894 |
| Ulmus       |               34 |  18.9820296 |   18.998184 |   18.955512 |   15.663672 |    46 |    51 |    15 |     3 | ST74592 |
| Ulmus       |               29 |  18.9780672 |    19.09572 |    18.92808 |   18.062448 |   125 |    39 |    27 |     2 | ST08579 |
| Ulmus       |               31 |  18.9442344 |   18.891504 |   19.178016 |    18.37944 |   107 |    34 |    25 |     4 | ST67931 |
| Ulmus       |               31 |  18.8951616 |    19.14144 |   18.617184 |   19.251168 |   109 |    43 |    15 |     2 | ST39299 |
| Ulmus       |               33 |  18.8741304 |   18.845784 |     18.4404 |   16.983456 |   135 |    16 |    14 |     4 | ST48838 |
| Ulmus       |               24 |   18.809208 |   18.665952 |   19.223736 |    18.92808 |    46 |    24 |    28 |     4 | ST24951 |
#+END_SRC

***** revised extraction using just the trees identified as not growing above

#+begin_src R
no.grow.uid <- hg$uid
#+end_src

#+RESULTS:

#+begin_src R
    library(raster)
    library(dplyr)
    library(stringr)
    library(foreach)
    library(doParallel)

    b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
    b@data <- select(b@data, UID)


                                            #uids <- c("ST14603", "ST14604", "ST14599", "ST14547")

    fs2017 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_normlas/", full.names = F)
    fs2016 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2016_normlas/", full.names = F)
    fs2009 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_normlas/", full.names = F)
    fs2005 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2005_normlas/", full.names = F)

                                            #make sure there is only one of each trees
    uids2017 <- str_extract(fs2017, "^[A-Za-z0-9]+")
    head(sort(table(uids2017), decreasing = T))

    uids2016 <- str_extract(fs2016, "^[A-Za-z0-9]+")
    head(sort(table(uids2016), decreasing = T))

    uids2009 <- str_extract(fs2009, "^[A-Za-z0-9]+")
                                            #head(sort(table(uids2009), decreasing = T), 1800)
    head(sort(table(uids2009), decreasing = T))

    uids2005 <- str_extract(fs2005, "^[A-Za-z0-9]+")
    head(sort(table(uids2005), decreasing = T))

                                            # put all the uids and las paths for ecah year in a dataframe to loop through

    uids2017 <- data.frame(str_match(fs2017, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2017) <- c("path2017", "uid")

    uids2016 <- data.frame(str_match(fs2016, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2016) <- c("path2016", "uid")

    uids2009 <- data.frame(str_match(fs2009, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2009) <- c("path2009", "uid")
                                            # remove duplicates for 2009
    uids2009 <- uids2009 %>% group_by(uid) %>% summarize(path2009 = path2009[1])


    uids2005 <- data.frame(str_match(fs2005, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
    colnames(uids2005) <- c("path2005", "uid")


    uids_df <- left_join(uids2017, uids2016)
    uids_df <- left_join(uids_df, uids2009)
    uids_df <- left_join(uids_df, uids2005)


    uids_df <- uids_df[complete.cases(uids_df),]

  ###################### filter the uids to the ones identified above
  uids_df <- filter(uids_df, uid %in% no.grow.uid)



    treelasdir <- "/home/erker/hgt_data/madison_tree_inventories/hgt/"
    reps <- 1000

    cl <- makeCluster(6)
    registerDoParallel(cl)

    out <- foreach(i = (1:nrow(uids_df)), .packages = c("stringr","lidR", "rgeos"), .combine = "rbind") %dopar% {  

        path2017 <- paste0(treelasdir, "trees_2017_normlas/", uids_df$path2017[i])
        path2016 <- paste0(treelasdir, "trees_2016_normlas/", uids_df$path2016[i])
        path2009 <- paste0(treelasdir, "trees_2009_normlas/", uids_df$path2009[i])
        path2005 <- paste0(treelasdir, "trees_2005_normlas/", uids_df$path2005[i])

        l2017 <- readLAS(path2017, select = "")
        l2017@data$Z <-     l2017@data$Z  * .3048  # convert to meters
     
        l2016 <- readLAS(path2016, select = "")
        l2016@data$Z <-     l2016@data$Z  * .3048  # convert to meters
     
        l2009 <- readLAS(path2009, select = "")
        l2009@data$Z <-     l2009@data$Z  * .3048  # convert to meters
     
        l2005 <- readLAS(path2005, select = "")
        l2005@data$Z <-     l2005@data$Z  * .3048  # convert to meters
     

        Z <- c(l2017@data$Z, l2016@data$Z, l2009@data$Z, l2005@data$Z)
        mZ <- max(Z)

        n <- 1:length(Z)
        bias <- sapply(n, function(n) {replicate(reps, mZ - max(sample(Z, n, replace = T)))})

      
        mean_bias <- apply(bias, 2, mean)
        sd_bias <- apply(bias, 2, sd)


        res <- data.frame(uid = uids_df[i,"uid"],
                          maxZ = mZ,
                          sample_size = n,
                          mean_bias = mean_bias,
                          sd_bias = sd_bias,
                          stringsAsFactors = F)

        saveRDS(res, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/nogrow_extracted_heights_bias/", uids_df[i,"uid"], ".rds"))
        return(res)

    }
    closeAllConnections()

  saveRDS(out, "/home/erker/hgt_data/madison_tree_inventories/hgt/nogrow_extracted_heights_bias.rds")

#+end_src

***** plotting
#+begin_src R
        trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

      ngh <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/nogrow_extracted_heights_bias.rds")
      ngh <- left_join(ngh, select(unique(trees@data), UID, Genus), by = c("uid" = "UID")) # use unique because for some reason there are duplicate trees

    # make the bias negative
    ngh$mean_bias <- -1 * ngh$mean_bias 

  # convert n points to point density
  ngh$pulse_density <- ngh$sample_size / ((8 * .3048)^2 * pi)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/ng_bias_n.png :width 1000 :bg transparent :res 100 :height 800

  ggplot(ngh, aes(x = pulse_density, y = mean_bias, group = uid, color = Genus, ymin = mean_bias - sd_bias, ymax = mean_bias + sd_bias)) + 
      geom_line() + 
      facet_wrap(~Genus) +
      coord_cartesian(y = c(-5, 0), x = c(0,2)) +
      terk

#+end_src

#+RESULTS:
[[file:figs/ng_bias_n.png]]

[[file:figs/ng_bias.png]]

#+begin_src R :exports results :results graphics :file figs/ng_bias_focus1.png :width 1000 :bg transparent :res 100 :height 800

  ggplot(ngh, aes(x = pulse_density, y = mean_bias, group = uid, color = Genus, ymin = mean_bias - sd_bias, ymax = mean_bias + sd_bias)) + 
      #geom_ribbon(color = base1) + 
      geom_line() + 
      facet_wrap(~Genus) +
      coord_cartesian(y = c(-2, 0), x = c(0,2)) +
      terk

#+end_src

#+RESULTS:
[[file:figs/ng_bias_focus1.png]]

#+begin_src R :exports results :results graphics :file figs/ng_bias_focus1_commonGenera.png :width 1000 :bg transparent :res 120 :height 800
  dp <- filter(ngh, Genus %in% c("Acer", "Gleditsia", "Fraxinus"))
    ggplot(dp, aes(x = pulse_density, y = mean_bias, group = uid, color = Genus, ymin = mean_bias - sd_bias, ymax = mean_bias + sd_bias)) + 
#        geom_ribbon(color = base1) + 
        geom_line() + 
  #      facet_wrap(~Genus) +
        coord_cartesian(y = c(-2, 0), x = c(0,2)) +
        scale_color_solarized() +
        terk 

#+end_src

#+RESULTS:
[[file:figs/ng_bias_focus1_commonGenera.png]]

#+begin_src R :exports results :results graphics :file figs/ng_bias_focus1_otherGenera1.png :width 1000 :bg transparent :res 120 :height 800
  dp <- filter(ngh, Genus %in% c("Acer", "Gymnocladus"))
    ggplot(dp, aes(x = pulse_density, y = mean_bias, group = uid, color = Genus, ymin = mean_bias - sd_bias, ymax = mean_bias + sd_bias)) + 
#        geom_ribbon(color = base1) + 
        geom_line() + 
  #      facet_wrap(~Genus) +
        coord_cartesian(y = c(-2, 0), x = c(0,2)) +
        scale_color_solarized() +
        terk 

#+end_src

#+RESULTS:
[[file:figs/ng_bias_focus1_otherGenera1.png]]

[[file:figs/ng_bias_focus1_otherGenera1.png]]

#+begin_src R
  nghs <-   ngh %>% group_by(sample_size, Genus) %>%
      summarize(mean_mean_bias = mean(mean_bias),
                se_mean_bias = sd(mean_bias) / (n() - 1),
                mean_sd_bias = sqrt(mean(sd_bias^2))) %>%
    mutate(point_density = sample_size / ((8 * .3048)^2 * pi))


#+end_src

#+RESULTS:


#+begin_src R :exports results :results graphics :file figs/avg_bias_focus1_otherGenera2_n.png :bg transparent :width 1000 :res 120

  pd <-  filter(nghs, Genus %in% c("Fraxinus", "Acer", "Gleditsia", "Ginkgo", "Gymnocladus", "Picea", "Pinus", "Quercus", "Platanus", "Populus", "Juglans"))

#  pd2 <-  filter(nghs, !Genus %in% c("Carya", "Salix", "Thuja"), point_density < 1.1, point_density > .9)

p <-     ggplot(pd, aes(x = point_density, y = mean_mean_bias, ymax = mean_mean_bias + 2*se_mean_bias, ymin = mean_mean_bias - 2*se_mean_bias, color = Genus, fill = Genus)) +
      geom_ribbon(alpha = .2, color = NA) +
      geom_line() +
#          coord_cartesian(y = c(0, -5), x = c(0,3)) +
          coord_cartesian(y = c(-.3, -1), x = c(0.5,1.5)) +
  #        scale_color_solarized() +
          terk 

p

#+end_src

#+RESULTS:
[[file:figs/avg_bias_focus1_otherGenera2_n.png]]

[[file:figs/avg_bias_focus1_otherGenera2_.png]]
#+begin_src R :exports results :results graphics :file figs/avg_bias_focus1_otherGenera1.pngvg_.png :bg transparent :width 1000 :res 120


p <-     ggplot(nghs, aes(x = point_density, y = mean_mean_bias, ymax = mean_mean_bias + 2*se_mean_bias, ymin = mean_mean_bias - 2*se_mean_bias, color = Genus, fill = Genus)) +
      geom_line() +
          coord_cartesian(y = c(0, -5), x = c(0,3)) +
          terk 

p

#+end_src

#+RESULTS:
[[file:figs/avg_bias_focus1_otherGenera1.pngvg_.png]]

#+begin_src R
library(plotly)
ggplotly(p)
#+end_src

#+RESULTS:

***** save new correction

Calculate the mean bias for each Genus.  This is the correction that
I will apply to the data
#+begin_src R
  nghg <-   ngh %>% 
        group_by(Genus, sample_size, pulse_density) %>%
        summarize(bias = mean(mean_bias),
                  sd_bias = mean(sd_bias))

  saveRDS(nghg, "/home/erker/hgt_data/madison_tree_inventories/hgt/no_growth_bias.rds")
#+end_src

#+RESULTS:
***** apply new correction
Apply the species specific correction derived from large not growing
trees to the data.

Reading back in the extracted heights
#+begin_src R
    trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
    h <-   readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias.rds")
    h <- left_join(h, select(unique(trees@data), UID, Genus), by = c("uid" = "UID")) # use unique because for some reason there are duplicate trees

  bias <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/no_growth_bias.rds")

  hy <- h %>%
    select(emp_max2017, emp_max2016, emp_max2009, emp_max2005, Genus, uid) %>%
    gather(year, emp_height, -Genus, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

  hn <- h %>%
        select(n2017, n2016, n2009, n2005, Genus, uid) %>%
    gather(year, sample_size, -Genus, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

  hg <- left_join(hy, hn)

  d <- left_join(hg, bias)

  d <- d %>%
      mutate(cor_height = emp_height - bias)

#+end_src

#+RESULTS:
: 
: Joining, by = c("Genus", "uid", "year")
: 
: Joining, by = c("Genus", "sample_size")

#+begin_src R
saveRDS(d, "/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_longform.rds")
#+end_src

#+RESULTS:

#+begin_src R
  library(ggthemes)
      terk <- list(theme_solarized_2(base_size = 16) +
                   theme(legend.title = element_text(size = 10),
                         legend.text = element_text(size = 8),
                         axis.ticks = element_line(size = .3),
                         rect = element_rect(fill = "transparent"),
                         panel.background = element_rect(fill = "transparent"),
                         panel.grid.major = element_line(color = "#839496", size = .1),
                         panel.grid.minor = element_line(color = "#839496", size = .05)))

  base1 <- "#93a1a1"
  blue <- scale_color_solarized("blue")

  red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/correction_nogrowth_40_n.png :width 1300 :height 800 :bg transparent :res 100

  n <- 40
  set.seed(6)
  uids <- sample(unique(h$uid), n)
  df <- filter(d, uid %in% uids)

    ggplot(data = df) + 
        geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
        geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sd_bias, ymin = cor_height - 1.96 *sd_bias, x = year), color = red) + 
        facet_wrap(~uid, ncol = 8) +
        terk +
        scale_x_continuous(breaks = c(2005,2009, 2017)) +
        theme(axis.text.x = element_text(angle = 60, hjust = 1))


#+end_src

#+RESULTS:
[[file:figs/correction_nogrowth_40_n.png]]





***** compare the two corrections
| [[file:figs/correction_nogrowth_40.png]] | [[file:figs/correction_oldway.png]] |

***** Fitting many weighted regressions and getting estimates
#+begin_src R
  d <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_longform.rds")
    d$year <- d$year - 2005

    # filter the trees out that aren't in the spceies that we ahve corrections for 
    d <- d[complete.cases(d),]

            lms <- list()
            uids <- unique(d$uid)
          for(i in 1:length(uids)) {
                lms[[i]] <- lm(cor_height ~ year, data = subset(d, uid == uids[i]))
            }
      names(lms) <- uids
        saveRDS(lms, "/home/erker/hgt_data/madison_tree_inventories/hgt/ng_growth_rates_lms.rds")
#+end_src

#+begin_src R
      growth.rates <- sapply(lms, function(lm) coef(lm)[2])
      growth.rates.se <- sapply(lms, function(lm) summary(lm)$coefficients[2,2])
      est.hgt.at2005 <- sapply(lms, function(lm) coef(lm)[1])
      growth.rates <- data.frame(uid = names(lms), 
                                 growth.rate = growth.rates, 
                                 growth.rate.se = growth.rates.se, 
                                 est.hgt.at2005 = est.hgt.at2005, stringsAsFactors = F)
#+end_src

#+RESULTS:

***** dropping trees with impossible growth or removal and replacements
#+begin_src R
    d <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_longform.rds")
    d <- d[complete.cases(d),]
      d$year <- d$year - 2005
      ds <- d %>% select(uid, year, emp_height) %>% pivot_wider(names_from = year, values_from = emp_height)

      bad_uids <- ds %>%
          mutate(dif1716_big = abs(`12` - `11`) > 1.5,
                 dif1609_big = abs(`11` - `4`) > 10,
                 dif1609_vryneg = `11` - `4` <  -2,
                 dif0905_vryneg = `4` - `0` <  -2) %>%
          filter(dif1716_big == T | dif1609_big == T | dif1609_vryneg | dif0905_vryneg) %>%
          pull(uid)

  growth.rates.f <- filter(growth.rates, ! uid %in% bad_uids)

  d <- filter(d, ! uid %in% bad_uids)

#+end_src

#+RESULTS:

***** replotting height by year for some trees with weighted ols line
#+begin_src R
    library(ggthemes)
        terk <- list(theme_solarized_2(base_size = 16) +
                     theme(legend.title = element_text(size = 10),
                           legend.text = element_text(size = 8),
                           axis.ticks = element_line(size = .3),
                           rect = element_rect(fill = "transparent"),
                           panel.background = element_rect(fill = "transparent"),
                           panel.grid.major = element_line(color = "#839496", size = .1),
                           panel.grid.minor = element_line(color = "#839496", size = .05)))

    base1 <- "#93a1a1"
  base01 <- "#586e75"
    blue <- scale_color_solarized("blue")
    red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/correction_nogrowth_40_m.png :width 1300 :height 800 :bg transparent :res 100

  n <- 40
  set.seed(2)
  uids <- sample(unique(d$uid), n)
  df <- filter(d, uid %in% uids)

    ggplot(data = df) + 
        geom_line(aes(y = emp_height, x = year + 2005, group = uid), color = "darkgray") +
        geom_line(aes(y = cor_height, x = year + 2005, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sd_bias, ymin = cor_height - 1.96 *sd_bias, x = year + 2005), color = red) + 
        facet_wrap(~uid, ncol = 8) +
        terk +
        scale_x_continuous(breaks = c(2005,2009, 2017)) +
        scale_y_continuous(name = "height (m)") +
        theme(axis.text.x = element_text(angle = 60, hjust = 1))


#+end_src

#+RESULTS:
[[file:figs/correction_nogrowth_40_m.png]]


#+begin_src R :exports results :results graphics :file figs/correction_nogrowth_40_m_smooth_lm.png :width 1300 :height 800 :bg transparent :res 100

  n <- 40
  set.seed(7)  # 7 is a good seed for visualizing a range of situations.  y axis is nice scale too.
  uids <- sample(unique(d$uid), n)
  df <- filter(d, uid %in% uids)

    ggplot(data = df) + 
      stat_smooth(method = "lm", aes(y = emp_height, x = year + 2005, group = uid), color = base01, size = .5, se = F) +
      stat_smooth(method = "lm", aes(y = cor_height, x = year + 2005, weight = (1 / sd_bias^2), group = uid), fill = "red", alpha = .2, color = red, size = .5, se = T) +
        geom_point(aes(y = emp_height, x = year + 2005, group = uid), color = base01) +
        geom_point(aes(y = cor_height, x = year + 2005, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sd_bias, ymin = cor_height - 1.96 *sd_bias, x = year + 2005), color = red) + 
        facet_wrap(~uid, ncol = 8) +
        terk +
        scale_x_continuous(name = "year",breaks = c(2005,2009, 2017)) +
        scale_y_continuous(name = "height (m)") +
        theme(axis.text.x = element_text(angle = 60, hjust = 1))



#+end_src

#+RESULTS:
[[file:figs/correction_nogrowth_40_m_smooth_lm.png]]


***** plots of growth rates

****** histogram
#+begin_src R :exports results :results graphics :file figs/ng_growthrates_lm.png :width 1000 :res 120 :bg transparent
  ggplot(growth.rates.f, aes(x = growth.rate)) + geom_histogram(binwidth = .03, color = base1) +
    terk +
    scale_x_continuous("growth rate (m/year)")
#+end_src

#+RESULTS:
[[file:figs/ng_growthrates_lm.png]]

#+begin_src R :exports results :results graphics :file figs/ng_growthrates_lm_clip_n.png :width 1000 :res 120 :bg transparent
  ggplot(growth.rates.f, aes(x = 100 * growth.rate)) + geom_histogram(binwidth = 2, color = base1) +
    terk +
    scale_x_continuous("growth rate (cm/year)", lim = c(-100,100), breaks = c(-100,-50,0, round(mean(growth.rates$growth.rate * 100),1), 50, 100)) +
    geom_vline(data = growth.rates, aes(xintercept = mean(growth.rate)*100), color = red)
#+end_src

#+RESULTS:
[[file:figs/ng_growthrates_lm_clip_n.png]]


[[file:figs/ng_growthrates_lm_clip.png]]

****** plot suspect growth rates
#+begin_src R :exports results :results graphics :file figs/correction_nogrowth_suspect_high.png :width 1300 :height 800 :bg transparent :res 100
  d <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias_longform.rds")
    dn <- left_join(d, growth.rates.f)

  dn <- dn[complete.cases(dn),]

      df <- dn[dn$growth.rate < -.4,]

        ggplot(data = df) + 
            geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
            geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
            geom_linerange(aes(ymax = cor_height + 1.96 * sd_bias, ymin = cor_height - 1.96 *sd_bias, x = year), color = red) + 
            facet_wrap(~uid, ncol = 8) +
            scale_x_continuous(breaks = c(2005,2009, 2017)) +
            theme_minimal() +
              theme(axis.text.x = element_text(angle = 60, hjust = 1))


#+end_src

#+RESULTS:
[[file:figs/correction_nogrowth_suspect_high.png]]

****** growth by height 
#+begin_src R :exports results :results graphics :file figs/ng_rate_by_int.png :bg transparent :width 1000 :res 100
  hn <- left_join(h, growth.rates.f)

    ggplot(hn, aes(x = emp_max2005, y = growth.rate)) + geom_point(size = .5, alpha = .5) + 
        terklight +
      geom_smooth() #+
#      facet_wrap(~abs(growth.rate.se / growth.rate) < .1, ncol = 2)
#+end_src

#+RESULTS:
[[file:figs/ng_rate_by_int.png]]


#+begin_src R
saveRDS(hn, "/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds")
#+end_src

#+RESULTS:

****** growth in space
join growth rates to trees

#+begin_src R
    library(raster)
    trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

  trees <- spTransform(trees, "+init=epsg:7599")

    hn <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds")

    trees@data <- left_join(trees@data, hn, by = c("UID" = "uid"))

    shapefile(trees, "/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_Withlidarextractedheights_growthrates_corrFromNoGrowth.rds", overwrite = T)

#+end_src

#+RESULTS:
: 
: Warning message:
: In rgdal::writeOGR(x, filename, layer, driver = "ESRI Shapefile",  :
:   Field names abbreviated for ESRI Shapefile driver

#+begin_src R
  tdf <- data.frame(trees) %>%
    filter(!is.na(growth.rate))
#+end_src

#+RESULTS:

#+begin_src R
  library(ggthemes)
      terk <- list(theme_solarized_2(base_size = 16) +
                   theme(legend.title = element_text(size = 10),
                         legend.text = element_text(size = 8),
                         axis.ticks = element_line(size = .3),
                         rect = element_rect(fill = "transparent"),
                         panel.background = element_rect(fill = "transparent"),
                         panel.grid.major = element_line(color = "#839496", size = .1),
                         panel.grid.minor = element_line(color = "#839496", size = .05)))

      terklight <- list(theme_minimal(base_size = 16) +
                   theme(legend.title = element_text(size = 10),
                         legend.text = element_text(size = 8),
                         axis.ticks = element_line(size = .3),
                         rect = element_rect(fill = "transparent"),
                         panel.background = element_rect(fill = "transparent"),
                         panel.grid.major = element_line(color = "#839496", size = .2),
                         panel.grid.minor = element_line(color = "#839496", size = .1)))


  base1 <- "#93a1a1"
#  blue <- scale_color_solarized("blue")
  green <- solarized_pal("green")(1)
  red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/trees_growth.png :width 1000 :height 800 :bg transparent
  p <-   ggplot(tdf, aes(x = coords.x1, y = coords.x2, color = growth.rate)) + geom_point(size = .8, alpha = .8) +
      coord_equal() +
      terklight +
      scale_color_distiller(limits = c(-.3, .3), direction = 1, palette = "RdYlGn")
  p
#+end_src

#+RESULTS:
[[file:figs/trees_growth.png]]
#+begin_src R
ggplotly(p)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/trees_growth_bin.png :width 1000 :height 800 :bg transparent :res 100
  tdf <- tdf %>%
    mutate(growth = ifelse(growth.rate > median(growth.rate), "high", ifelse(growth.rate < 0, "no", "low")))

    p <-   ggplot(tdf, aes(x = coords.x1, y = coords.x2, color = growth)) + geom_point(size = .4, alpha = .8) +
        coord_equal() +
        terk +
        scale_color_brewer(palette = "RdYlGn", direction = -1)
    p
#+end_src

#+RESULTS:
[[file:figs/trees_growth_bin.png]]

****** growth by species
#+begin_src R
    hn <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds")

hn <- hn[complete.cases(hn),]

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/growth_species.png :bg transparent :width 1000
  ggplot(hn, aes(y = growth.rate, x = Genus)) + geom_boxplot() +
    stat_summary(fun.y = "mean", geom = "point", color = red) +
  terklight
#+end_src

#+RESULTS:
[[file:figs/growth_species.png]]

#+begin_src R :exports results :results graphics :file figs/growth_species_mean.png :bg transparent :width 1000 :res 120
  library(Hmisc)
  library(forcats)

  hns <- hn %>%
    group_by(Genus) %>%
      dplyr::summarize(mgr = mean(growth.rate),
                n = n(),
                se = sd(growth.rate) / sqrt(n)) %>%
    mutate(Genus = fct_reorder(Genus, mgr))


      ggplot(hns, aes(x = Genus, y = mgr, ymin = mgr - 1.96 * se, ymax = mgr + 1.96 * se)) +  geom_pointrange() +
        terklight +
        coord_flip()
#+end_src

#+RESULTS:
[[file:figs/growth_species_mean.png]]


#+begin_src R :exports results :results graphics :file figs/growth_species_mean_sizeclass.png :bg transparent :width 1000 :res 120
  library(Hmisc)
  library(forcats)

  hns <- hn %>%
    mutate(size_class = ifelse(emp_max2005 < 10, "small", ifelse(emp_max2005 > 20, "large", "medium"))) %>%
    group_by(Genus, size_class) %>%
      dplyr::summarize(mgr = mean(growth.rate),
                n = n(),
                se = sd(growth.rate) / sqrt(n)) %>%
    ungroup() %>%
    mutate(Genus = fct_reorder(Genus, mgr))


      ggplot(hns, aes(x = Genus, y = mgr, ymin = mgr - 1.96 * se, ymax = mgr + 1.96 * se)) +  geom_pointrange() +
        terklight +
        coord_flip() + 
        facet_wrap(~ size_class, ncol = 3)
#+end_src

#+RESULTS:
[[file:figs/growth_species_mean_sizeclass.png]]

#+begin_src R :exports results :results graphics :file figs/growth_species_mean_sizeclass2.png :width 1000 :res 120 :bg transparent

  ggplot(hns, aes(x = Genus, y = mgr, ymin = mgr - 1.96 * se, ymax = mgr + 1.96 * se, color = size_class)) +  geom_pointrange() +
    terklight +
    coord_flip()

#+end_src

#+RESULTS:
[[file:figs/growth_species_mean_sizeclass2.png]]

****** make a model and plot species effect controling for height  I SHOULD JOIN ALL THE DATA (hyperspectral etc first before I do modelling).

#+begin_src R

#+end_src

*** example trees for visualization
**** crop lidar to the tenney oak for visualization of bias situation.

I could make a 2d plot of the points (z on y axis and 


My resampling strategy doesn't work becuase while the larger foot
print might underestimate height according to roussel (see his paper),
it also means that the points don't penetrate as deeply.  So when I
resample from the 2017 which has a smaller footprint and deeper
penetration into the canopy, I can potentially sample points lower
than I would ever get from 2005 lidar.  But maybe this doesn't matter
since I'm not interested in the mean, but rather the maximum.


#+begin_src R
  l2017 <- readLAS("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/0823_esri_normalized.las", select = "r")
  l2016 <- readLAS("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar/102_normalized.las", select = "r")
  l2009 <- readLAS("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/lc2t70912f_ground_normalized.las", select = "r")
  l2005 <- readLAS("/home/erker/hgt_data/madison_lidar_2005_heights/normalized/tile014_ground_normalized.las", select = "r")


  tenney_oak <- shapefile("/home/erker/hgt_data/tenney_oak.shp")

  o2017 <- lasclip(l2017, tenney_oak)
  o2016 <- lasclip(l2016, tenney_oak)
  o2009 <- lasclip(l2009, tenney_oak)
  o2005 <- lasclip(l2005, tenney_oak)

#  plot(o2017)
 # plot(o2009)
  #plot(o2005)

  # I should make neat gifs...


  d2017 <- o2017@data %>% mutate(year = 2017)
  d2016 <- o2016@data %>% mutate(year = 2016)
  d2009 <- o2009@data %>% mutate(year = 2009)
  d2005 <- o2005@data %>% mutate(year = 2005)

#+end_src

#+RESULTS:
: 
: Warning message:
: There are 0 points flagged 'synthetic'.

#+begin_src R
  library(ggthemes)

    terk <- list(theme_solarized_2(base_size = 16) +
                 theme(legend.title = element_text(size = 10),
                       legend.text = element_text(size = 8),
                       axis.ticks = element_line(size = .3),
                       rect = element_rect(fill = "transparent"),
                       panel.background = element_rect(fill = "transparent"),
                       panel.grid.major = element_line(color = "#839496", size = .1),
                       panel.grid.minor = element_line(color = "#839496", size = .05)),
blue <- scale_color_solarized("blue"))

red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/tenney_oak1.png :width 1200 :height 300 :res 100 :bg transparent

  d <- rbind(d2017, d2016, d2009, d2005)
  ggplot(d, aes(x = X, y = Z, color = factor(year))) +
      geom_point(size = .5) +
      geom_rug(sides = "l") +
      coord_equal() +
      facet_wrap(~year, ncol = 4) +
    terk +
    theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/tenney_oak1.png]]
the pulses penetrate deep into the canopy when there aren't leaves.
#+begin_src R :exports results :results graphics :file figs/tenney_oak1_firstreturns.png :width 1200 :height 300 :res 100 :bg transparent

  ggplot(filter(d, ReturnNumber ==1), aes(x = X, y = Z, color = factor(year))) +
      geom_point(size = .5) +
      geom_rug(sides = "l") +
      coord_equal() +
      facet_wrap(~year, ncol = 4) +
    terk +
    theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/tenney_oak1_firstreturns.png]]

#+begin_src R :exports results :results graphics :file figs/tenney_oak_crosssection.png :width 1200 :height 300 :res 100 :bg transparent

#    xc <- 825410

    dc <- filter(d, abs(X - mean(X)) < 8)
    ggplot(dc, aes(x = Y, y = Z, color = factor(year))) +
        geom_point(size = .5) +
        geom_rug(sides = "l") +
        coord_equal() +
        facet_wrap(~year, ncol = 4) +
    terk +
    theme(axis.text.x = element_blank())


  #+end_src

  #+RESULTS:
  [[file:figs/tenney_oak_crosssection.png]]

  #+begin_src R :exports results :results graphics :file figs/tenney_oak_centerpoints.png :width 800 :height 800 :res 100 :bg transparent
#    yc <- 489580
    dc <- filter(d, abs(Y - mean(Y)) < 8)

    ggplot(dc, aes(x = Y, y = Z, color = factor(year))) +
        geom_point(size = 1) +
        geom_rug(sides = "l") +
        coord_equal() +
        facet_wrap(~year, ncol = 4) +
    terk +
    theme(axis.text.x = element_blank())


#+end_src

#+RESULTS:
[[file:figs/tenney_oak_centerpoints.png]]

#+begin_src R :exports results :results graphics :file figs/tenney_oak_centerpoints_firstreturn.png :width 800 :height 800 :res 100 :bg transparent

    dcfirst <- filter(dc, ReturnNumber == 1)

    ggplot(dcfirst, aes(x = Y, y = Z, color = factor(year))) +
        geom_point() +
        geom_rug(sides = "l") +
        coord_equal() +
        facet_wrap(~year, ncol = 4) +
    terk +
    theme(axis.text.x = element_blank())


#+end_src

#+RESULTS:
[[file:figs/tenney_oak_centerpoints_firstreturn.png]]

#+begin_src R :exports results :results graphics :file figs/tenney_oak_centerpoints_firstreturn.png :width 800 :height 800 :res 100 :bg transparent

  ggplot(dcfirst, aes(x = Y, y = Z, color = factor(year))) +
      geom_point() +
      geom_rug(sides = "l") +
      coord_equal() +
      facet_wrap(~year, ncol = 4) +
  terk +
  theme(axis.text.x = element_blank()) +
    coord_cartesian(ylim = c(56,64))


#+end_src

#+RESULTS:
[[file:figs/tenney_oak_centerpoints_firstreturn.png]]


Maybe it does work well?
I'm not sure this resampling makes sense.  It's not not bad for this
tree, within distribution of bias for sure (bias is about 1.9m with sd
1.4), the observed difference between 2017 and 2005 is 1.9.

How to deal with the fact that the 2016 and 2009 have higher heights
than the 2017?


#+begin_src R

d2017f <- filter(d2017, ReturnNumber ==1)
d2005f <- filter(d2005, ReturnNumber ==1)
n2005 <- nrow(d2005f)

reps <- 100
replicate(reps, max(sample(d2017$Z, n2005)))

max2017 <- max(d2017f$Z)
max_height_resampled <- replicate(reps, max(sample(d2017$Z, n2005)))
mean(max_height_resampled)

sd(max_height_resampled)

max2017 - mean(max_height_resampled)
max2005 <- max(d2005f$Z)

max2017 - max2005


#+end_src

#+RESULTS:
#+begin_example

  [1] 59.665 60.274 60.181 60.304 59.897 61.327 59.567 58.432 56.079 59.085
 [11] 55.762 58.990 59.884 59.567 55.199 58.226 59.085 59.567 60.169 57.934
 [21] 60.304 60.304 55.220 60.169 58.118 59.567 55.583 59.909 57.655 60.052
 [31] 60.432 60.651 58.226 60.393 56.372 58.899 58.478 61.030 61.030 58.478
 [41] 58.653 61.779 55.237 60.280 58.145 58.145 58.480 55.393 61.030 54.738
 [51] 56.588 54.676 55.614 59.930 55.762 57.185 60.647 60.274 60.647 57.611
 [61] 58.145 55.237 59.322 59.398 53.656 57.541 56.079 61.030 58.653 57.611
 [71] 60.052 59.558 60.784 61.601 59.910 58.136 58.193 58.949 61.779 56.830
 [81] 60.393 56.352 59.404 59.567 55.382 60.432 59.240 59.910 54.658 59.240
 [91] 58.455 59.567 61.601 59.240 59.930 58.317 55.131 55.137 58.949 57.434

[1] 58.86473

[1] 2.104214

[1] 3.30627

[1] 1.451
#+end_example

**** crop lidar to a fast growing tree for visualization of bias situation. ST42874

ST42874


#+begin_src R

  l2017 <- readLAS("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/0676_esri_normalized.las", select = "r")
    l2016 <- readLAS("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar/54_normalized.las", select = "r")
    l2009 <- readLAS("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/lc2t81028f_ground_normalized.las", select = "r")
    l2005 <- readLAS("/home/erker/hgt_data/madison_lidar_2005_heights/normalized/tile007_ground_normalized.las", select = "r")


  p <- shapefile("/home/erker/hgt_data/ST42874.shp")

    o2017 <- lasclip(l2017, p)
    o2016 <- lasclip(l2016, p)
    o2009 <- lasclip(l2009, p)
    o2005 <- lasclip(l2005, p)

  #  plot(o2017)
   # plot(o2009)
    #plot(o2005)

    # I should make neat gifs...


    d2017 <- o2017@data %>% mutate(year = 2017)
    d2016 <- o2016@data %>% mutate(year = 2016)
    d2009 <- o2009@data %>% mutate(year = 2009)
    d2005 <- o2005@data %>% mutate(year = 2005)

#+end_src

#+begin_src R
  library(ggthemes)

    terk <- list(theme_solarized_2(base_size = 16) +
                 theme(legend.title = element_text(size = 10),
                       legend.text = element_text(size = 8),
                       axis.ticks = element_line(size = .3),
                       rect = element_rect(fill = "transparent"),
                       panel.background = element_rect(fill = "transparent"),
                       panel.grid.major = element_line(color = "#839496", size = .3),
                       panel.grid.minor = element_line(color = "#839496", size = .1)),
blue <- scale_color_solarized("blue"))

red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/ST42874.png :width 1200 :height 300 :res 100 :bg transparent

        d <- rbind(d2017, d2016, d2009, d2005) %>%
          mutate(year = factor(year),
                 height = Z * .3048,
                 X = X * .3048,
                 Y = Y * .3048)


        ggplot(d, aes(x = X, y = height, color = year)) +
            geom_point(size = .5) +
            geom_rug(sides = "l") +
            coord_equal() +
            facet_wrap(~year, ncol = 4) +
          terk +
          theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/ST42874.png]]


**** ST78492 
78492

ST78492 - smaller honey locust, single street tree.

#+begin_src R

  l2017 <- readLAS("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/0777_esri_normalized.las", select = "r")
    l2016 <- readLAS("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar/85_normalized.las", select = "r")
    l2009 <- readLAS("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/lc2t81034f_normalized.las", select = "r")
    l2005 <- readLAS("/home/erker/hgt_data/madison_lidar_2005_heights/normalized/tile015_ground_normalized.las", select = "r")


  p <- shapefile("/home/erker/hgt_data/ST78492.shp")

    o2017 <- lasclip(l2017, p)
    o2016 <- lasclip(l2016, p)
    o2009 <- lasclip(l2009, p)
    o2005 <- lasclip(l2005, p)

  #  plot(o2017)
   # plot(o2009)
    #plot(o2005)

    # I should make neat gifs...


    d2017 <- o2017@data %>% mutate(year = 2017)
    d2016 <- o2016@data %>% mutate(year = 2016)
    d2009 <- o2009@data %>% mutate(year = 2009)
    d2005 <- o2005@data %>% mutate(year = 2005)

#+end_src

#+begin_src R
  library(ggthemes)

    terk <- list(theme_solarized_2(base_size = 16) +
                 theme(legend.title = element_text(size = 10),
                       legend.text = element_text(size = 8),
                       axis.ticks = element_line(size = .3),
                       rect = element_rect(fill = "transparent"),
                       panel.background = element_rect(fill = "transparent"),
                       panel.grid.major = element_line(color = "#839496", size = .3),
                       panel.grid.minor = element_line(color = "#839496", size = .1)),
blue <- scale_color_solarized("blue"))

red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/ST78492.png :width 1200 :height 300 :res 100 :bg transparent

        d <- rbind(d2017, d2016, d2009, d2005) %>%
          mutate(year = factor(year),
                 height = Z * .3048,
                 X = X * .3048,
                 Y = Y * .3048)


        ggplot(d, aes(x = X, y = height, color = year)) +
            geom_point(size = .5) +
            geom_rug(sides = "l") +
            coord_equal() +
            facet_wrap(~year, ncol = 4) +
          terk +
          theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/ST78492.png]]

#+begin_src R :exports results :results graphics :file figs/ST78492_slice.png :width 1200 :height 300 :res 100 :bg transparent

  d <- rbind(d2017, d2016, d2009, d2005) %>%
      mutate(height = Z * .3048,
             X = X * .3048,
             Y = Y * .3048) %>%
  filter(abs(X - 257088) < (8 * .3048)) %>%
      mutate(year = factor(year))


  ggplot(d, aes(x = Y, y = height, color = year)) +
      geom_point(size = .5) +
      geom_rug(sides = "l") +
      coord_equal() +
  facet_wrap(~year, ncol = 4) +
      terk +
      theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/ST78492_slice.png]]

**** ST69002 tree with powerline hole :ATTACH:
:PROPERTIES:
:Attachments: IMG_20191018_173331.jpg
:ID:       9346cc96-17cc-42eb-b67f-10e39b107aa1
:END:
#+begin_src R

  l2017 <- readLAS("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/0824_esri_normalized.las", select = "r")
    l2016 <- readLAS("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar/103_normalized.las", select = "r")
    l2009 <- readLAS("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/lc2t71007f_normalized.las", select = "r")
    l2005 <- readLAS("/home/erker/hgt_data/madison_lidar_2005_heights/normalized/tile014_ground_normalized.las", select = "r")


  p <- shapefile("/home/erker/hgt_data/ST69002.shp")

    o2017 <- lasclip(l2017, p)
    o2016 <- lasclip(l2016, p)
    o2009 <- lasclip(l2009, p)
    o2005 <- lasclip(l2005, p)

    plot(o2016)
   # plot(o2009)
    #plot(o2005)

    # I should make neat gifs...


    d2017 <- o2017@data %>% mutate(year = 2017)
    d2016 <- o2016@data %>% mutate(year = 2016)
    d2009 <- o2009@data %>% mutate(year = 2009)
    d2005 <- o2005@data %>% mutate(year = 2005)

#+end_src
#+begin_src R :exports results :results graphics :file figs/ST69002.png :width 1200 :height 300 :res 100 :bg transparent

        d <- rbind(d2017, d2016, d2009, d2005) %>%
          mutate(year = factor(year),
                 height = Z * .3048,
                 X = X * .3048,
                 Y = Y * .3048)


        ggplot(d, aes(x = X, y = height, color = year)) +
            geom_point(size = .5) +
            geom_rug(sides = "l") +
            coord_equal() +
            facet_wrap(~year, ncol = 4) +
          terk +
          theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/ST69002.png]]

**** HF6591
:PROPERTIES:
:Attachments: IMG_20191018_173331.jpg
:ID:       9346cc96-17cc-42eb-b67f-10e39b107aa1
:END:

Why 2009 the way it is?
#+begin_src R

  l2017 <- readLAS("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/0917_esri_normalized.las", select = "r")
    l2016 <- readLAS("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar/117_normalized.las", select = "r")
    l2009 <- readLAS("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/lc2t70919f_normalized.las", select = "r")
    l2005 <- readLAS("/home/erker/hgt_data/madison_lidar_2005_heights/normalized/tile020_ground_normalized.las", select = "r")


  p <- shapefile("/home/erker/hgt_data/HF6591.shp")

    o2017 <- lasclip(l2017, p)
    o2016 <- lasclip(l2016, p)
    o2009 <- lasclip(l2009, p)
    o2005 <- lasclip(l2005, p)

    plot(o2016)
    plot(o2009)
    #plot(o2005)

    # I should make neat gifs...


    d2017 <- o2017@data %>% mutate(year = 2017)
    d2016 <- o2016@data %>% mutate(year = 2016)
    d2009 <- o2009@data %>% mutate(year = 2009)
    d2005 <- o2005@data %>% mutate(year = 2005)

#+end_src

#+begin_src R :exports results :results graphics :file figs/HF6591.png :width 1200 :height 300 :res 100 :bg transparent

        d <- rbind(d2017, d2016, d2009, d2005) %>%
          mutate(year = factor(year),
                 height = Z * .3048,
                 X = X * .3048,
                 Y = Y * .3048)


        ggplot(d, aes(x = X, y = height, color = year)) +
            geom_point(size = .5) +
            geom_rug(sides = "l") +
            coord_equal() +
            facet_wrap(~year, ncol = 4) +
          terk +
          theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/HF6591.png]]

**** ST45429
#+begin_src R
  library(lidR)

  l2017 <- readLAS("/home/erker/hgt_data/madison_lidar_2017_heights/normalized/1019_esri_normalized.las", select = "r")
    l2016 <- readLAS("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar/162_normalized.las", select = "r")
    l2009 <- readLAS("/home/erker/hgt_data/madison_lidar_2009_heights/normalized/lc2t70933f_normalized.las", select = "r", filter = "-drop_z_below 0")
    l2005 <- readLAS("/home/erker/hgt_data/madison_lidar_2005_heights/normalized/tile020_ground_normalized.las", select = "r")


  p <- shapefile("/home/erker/hgt_data/ST45429.shp")
  p2 <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
  p2 <- p2[p2@data$UID == "ST45429",]

    o2017 <- lasclip(l2017, p)
    o2016 <- lasclip(l2016, p)
    o2009 <- lasclip(l2009, p)
    o2005 <- lasclip(l2005, p)

    plot(o2016)
    plot(o2009)
    #plot(o2005)

    # I should make neat gifs...


    d2017 <- o2017@data %>% mutate(year = 2017)
    d2016 <- o2016@data %>% mutate(year = 2016)
    d2009 <- o2009@data %>% mutate(year = 2009)
    d2005 <- o2005@data %>% mutate(year = 2005)

#+end_src

#+begin_src R
to2009<-readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST45429_lc2t70933.las")
plot(to2009)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/ST45429_new.png :width 1200 :height 300 :res 100 :bg transparent

        d <- rbind(d2017, d2016, d2009, d2005) %>%
          mutate(year = factor(year),
                 height = Z * .3048,
                 X = X * .3048,
                 Y = Y * .3048)


        ggplot(d, aes(x = X, y = height, color = year)) +
            geom_point(size = .5) +
            geom_rug(sides = "l") +
            coord_equal() +
            facet_wrap(~year, ncol = 4) +
          terk +
          theme(axis.text.x = element_blank())

#+end_src

#+RESULTS:
[[file:figs/ST45429_new.png]]



[[file:figs/ST45429.png]]

*** other covariates
- position in topography
- % impervious within 20m
- % impervious within 100m
- mean height of first returns within 20m of tree
- traits from hyperspectral imagery
- distance to road?

**** foliar traits from imaging spectroscopy

***** load 2016 tree chm to create tree mask

****** scale up to 15 ft pixels

#+BEGIN_SRC sh
cd /home/erker/hgt_data/madison_lidar_2016_heights/
gdal_edit.py -a_nodata -3.4e+38 tree_height_norm_2016_cpy.tif

#+END_SRC

#+RESULTS:

Convert less than 0 to 0 for averaging
#+BEGIN_SRC sh :session a
cd /home/erker/hgt_data/madison_lidar_2016_heights/
gdal_calc.py -A tree_height_norm_2016.tif --outfile=tree_height_norm_2016_zeros.tif --type=Byte --calc="A*(A>0)"
#+END_SRC

#+RESULTS:
: 0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done

Scale up with average height
#+BEGIN_SRC sh :results verbatim
cd /home/erker/hgt_data/madison_lidar_2016_heights/
gdalwarp -srcnodata -inf -tr 15 15 -r average -t_srs epsg:7599 -tap tree_height_norm_2016_zeros.tif tree_height_norm_2016_15ft.tif
#+END_SRC

#+RESULTS:
: Creating output file that is 5334P x 4334L.
: Processing input file tree_height_norm_2016_zeros.tif.
: Copying nodata values from source tree_height_norm_2016_zeros.tif to destination tree_height_norm_2016_15ft.tif.
: 0...10...20...30...40...50...60...70...80...90...100 - done.

Make Mask
#+BEGIN_SRC sh
cd /home/erker/hgt_data/madison_lidar_2016_heights/
gdal_calc.py -A tree_height_norm_2016_15ft.tif --outfile=tree_height_norm_2016_mask.tif --type=Byte --calc="0*(A<=30)" --calc="1*(A>30)" 
#+END_SRC

#+RESULTS:
: 0 .. 10 .. 20 .. 30 .. 40 .. 50 .. 60 .. 70 .. 80 .. 90 .. 100 - Done

***** reproject foliar traits
#+begin_src sh
cd /home/erker/hgt_data/madison_aviris/
gdalwarp -tap -tr 15 15 -r cubicspline -t_srs epsg:7599 N_merged.tif N_merged_7599.tif
#+end_src

#+RESULTS:
| Creating                                             | output   | file   | that         | is     | 9764P       | x   | 7409L.      |                  |
| Processing                                           | input    | file   | N_merged.tif. |        |             |     |             |                  |
| Using                                                | internal | nodata | values       | (e.g.  | 0)          | for | image       | N_merged.tif.     |
| Copying                                              | nodata   | values | from         | source | N_merged.tif | to  | destination | N_merged_7599.tif. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0        | done.  |              |        |             |     |             |                  |

#+begin_src sh
cd /home/erker/hgt_data/madison_aviris/
gdalwarp -tap -tr 15 15 -r cubicspline -t_srs epsg:7599 LMA_merged.tif LMA_merged_7599.tif
#+end_src

#+RESULTS:
| Creating                                             | output   | file   | that           | is     | 9764P         | x   | 7409L.      |                    |
| Processing                                           | input    | file   | LMA_merged.tif. |        |               |     |             |                    |
| Using                                                | internal | nodata | values         | (e.g.  | 0)            | for | image       | LMA_merged.tif.     |
| Copying                                              | nodata   | values | from           | source | LMA_merged.tif | to  | destination | LMA_merged_7599.tif. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0        | done.  |                |        |               |     |             |                    |

#+begin_src sh
cd /home/erker/hgt_data/madison_aviris/
gdalwarp -tap -tr 15 15 -r cubicspline -t_srs epsg:7599 lignin_merged.tif lignin_merged_7599.tif
#+end_src

#+RESULTS:
| Creating                                             | output   | file   | that              | is     | 9764P            | x   | 7409L.      |                       |
| Processing                                           | input    | file   | lignin_merged.tif. |        |                  |     |             |                       |
| Using                                                | internal | nodata | values            | (e.g.  | 0)               | for | image       | lignin_merged.tif.     |
| Copying                                              | nodata   | values | from              | source | lignin_merged.tif | to  | destination | lignin_merged_7599.tif. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0        | done.  |                   |        |                  |     |             |                       |

#+begin_src sh
cd /home/erker/hgt_data/madison_aviris/
gdalwarp -tap -tr 15 15 -r cubicspline -t_srs epsg:7599 chl_merged.tif chl_merged_7599.tif
#+end_src

#+RESULTS:
| Creating                                             | output   | file   | that           | is     | 9764P         | x   | 7409L.      |                    |
| Processing                                           | input    | file   | chl_merged.tif. |        |               |     |             |                    |
| Using                                                | internal | nodata | values         | (e.g.  | 0)            | for | image       | chl_merged.tif.     |
| Copying                                              | nodata   | values | from           | source | chl_merged.tif | to  | destination | chl_merged_7599.tif. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0        | done.  |                |        |               |     |             |                    |

#+begin_src sh
cd /home/erker/hgt_data/madison_aviris/
gdalwarp -tap -tr 15 15 -r cubicspline -t_srs epsg:7599 Sugar_merged.tif Sugar_merged_7599.tif
#+end_src

#+RESULTS:
| Creating                                             | output   | file   | that             | is     | 9764P           | x   | 7409L.      |                      |
| Processing                                           | input    | file   | Sugar_merged.tif. |        |                 |     |             |                      |
| Using                                                | internal | nodata | values           | (e.g.  | 0)              | for | image       | Sugar_merged.tif.     |
| Copying                                              | nodata   | values | from             | source | Sugar_merged.tif | to  | destination | Sugar_merged_7599.tif. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0        | done.  |                  |        |                 |     |             |                      |

#+begin_src sh
cd /home/erker/hgt_data/madison_aviris/
gdalwarp -tap -tr 15 15 -r cubicspline -t_srs epsg:7599 TotPhen_merged.tif TotPhen_merged_7599.tif
#+end_src

#+RESULTS:
| Creating                                             | output   | file   | that               | is     | 9764P             | x   | 7409L.      |                        |
| Processing                                           | input    | file   | TotPhen_merged.tif. |        |                   |     |             |                        |
| Using                                                | internal | nodata | values             | (e.g.  | 0)                | for | image       | TotPhen_merged.tif.     |
| Copying                                              | nodata   | values | from               | source | TotPhen_merged.tif | to  | destination | TotPhen_merged_7599.tif. |
| 0...10...20...30...40...50...60...70...80...90...100 | 0        | done.  |                    |        |                   |     |             |                        |

***** mask the foliar traits

#+begin_src sh :session a
cd /home/erker/hgt_data/madison_aviris/
gdal_merge.py -separate -o lignin_merged_7599_masked_int.tif lignin_merged_7599.tif /home/erker/hgt_data/madison_lidar_2016_heights/tree_height_norm_2016_mask.tif
gdal_calc.py -A lignin_merged_7599_masked_int.tif -B lignin_merged_7599_masked_int.tif --A_band=1 --B_band=3 --outfile=lignin_merged_7599_masked.tif --calc="A*B"

gdal_merge.py -separate -o N_merged_7599_masked_int.tif N_merged_7599.tif /home/erker/hgt_data/madison_lidar_2016_heights/tree_height_norm_2016_mask.tif
gdal_calc.py -A N_merged_7599_masked_int.tif -B N_merged_7599_masked_int.tif --A_band=1 --B_band=3 --outfile=N_merged_7599_masked.tif --calc="A*B"

gdal_merge.py -separate -o LMA_merged_7599_masked_int.tif LMA_merged_7599.tif /home/erker/hgt_data/madison_lidar_2016_heights/tree_height_norm_2016_mask.tif
gdal_calc.py -A LMA_merged_7599_masked_int.tif -B LMA_merged_7599_masked_int.tif --A_band=1 --B_band=3 --outfile=LMA_merged_7599_masked.tif --calc="A*B"

gdal_merge.py -separate -o chl_merged_7599_masked_int.tif chl_merged_7599.tif /home/erker/hgt_data/madison_lidar_2016_heights/tree_height_norm_2016_mask.tif
gdal_calc.py -A chl_merged_7599_masked_int.tif -B chl_merged_7599_masked_int.tif --A_band=1 --B_band=3 --outfile=chl_merged_7599_masked.tif --calc="A*B"

gdal_merge.py -separate -o Sugar_merged_7599_masked_int.tif Sugar_merged_7599.tif /home/erker/hgt_data/madison_lidar_2016_heights/tree_height_norm_2016_mask.tif
gdal_calc.py -A Sugar_merged_7599_masked_int.tif -B Sugar_merged_7599_masked_int.tif --A_band=1 --B_band=3 --outfile=Sugar_merged_7599_masked.tif --calc="A*B"

gdal_merge.py -separate -o TotPhen_merged_7599_masked_int.tif TotPhen_merged_7599.tif /home/erker/hgt_data/madison_lidar_2016_heights/tree_height_norm_2016_mask.tif
gdal_calc.py -A TotPhen_merged_7599_masked_int.tif -B TotPhen_merged_7599_masked_int.tif --A_band=1 --B_band=3 --outfile=TotPhen_merged_7599_masked.tif --calc="A*B"


#+end_src

#+RESULTS:
|                                                      |                                                      |       |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
| 0...10...20...30...40...50...60...70...80...90...100 |                                                    0 | done. |       |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
|                                                    0 |                                                   .. |    10 | ..    | 20 | .. | 30 | .. | 40 | .. | 50 | .. | 60 | .. | 70 | .. | 80 | .. | 90 | .. | 100 | 0 | Done |
|                                                    $ | 0...10...20...30...40...50...60...70...80...90...100 |     0 | done. |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
|                                                    0 |                                                   .. |    10 | ..    | 20 | .. | 30 | .. | 40 | .. | 50 | .. | 60 | .. | 70 | .. | 80 | .. | 90 | .. | 100 | 0 | Done |
|                                                    $ | 0...10...20...30...40...50...60...70...80...90...100 |     0 | done. |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
|                                                    0 |                                                   .. |    10 | ..    | 20 | .. | 30 | .. | 40 | .. | 50 | .. | 60 | .. | 70 | .. | 80 | .. | 90 | .. | 100 | 0 | Done |
|                                                    $ | 0...10...20...30...40...50...60...70...80...90...100 |     0 | done. |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
|                                                    0 |                                                   .. |    10 | ..    | 20 | .. | 30 | .. | 40 | .. | 50 | .. | 60 | .. | 70 | .. | 80 | .. | 90 | .. | 100 | 0 | Done |
|                                                    $ | 0...10...20...30...40...50...60...70...80...90...100 |     0 | done. |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
|                                                    0 |                                                   .. |    10 | ..    | 20 | .. | 30 | .. | 40 | .. | 50 | .. | 60 | .. | 70 | .. | 80 | .. | 90 | .. | 100 | 0 | Done |
|                                                    $ | 0...10...20...30...40...50...60...70...80...90...100 |     0 | done. |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |    |     |   |      |
|                                                    0 |                                                   .. |    10 | ..    | 20 | .. | 30 | .. | 40 | .. | 50 | .. | 60 | .. | 70 | .. | 80 | .. | 90 | .. | 100 | 0 | Done |

***** extract foliar traits at trees
#+begin_src R
  library(raster)
  library(dplyr)
      h <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds")
      uids <- h$uid


      trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
      trees@data <-   select(trees@data, UID, DBH, Genus, Species)
      trees <- trees[trees@data$UID %in% uids,]
    trees <- spTransform(trees, "+init=epsg:7599")

#+end_src

#+RESULTS:
#+begin_example
Loading required package: sp

Attaching package: ‘dplyr’

The following objects are masked from ‘package:raster’:

    intersect, select, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union
#+end_example

#+begin_src R

        traitsdir <- "/home/erker/hgt_data/madison_aviris/"
          traits <- c("TotPhen", "N", "Sugar", "LMA", "lignin", "chl")
          tp <- paste0(traitsdir, traits, "_merged_7599_masked.tif")

          e <- lapply(tp, function(p) {

              r <- raster(p)
              ex <- extract(r, trees)
              ex
          })

      names(e) <- traits

    df <- cbind(trees@data, e)

  df[df == 0] <- NA # 0's are really missings

    saveRDS(df, "/home/erker/hgt_data/canopy_foliar_traits.rds")

#+end_src

#+RESULTS:

**** mean height of first returns within 20m of tree (includes other trees and buildings etc)

***** make 20m buffers
#+begin_src R
  library(rgeos)

    h <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds")
    uids <- h$uid

    # make 20m buffer

    trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
    trees <- spTransform(trees, crs("+init=epsg:7599"))

    trees <- trees[trees@data$UID %in% uids,]

    trees@data <-   select(trees@data, UID, DBH, Genus, Species)

  p <- gBuffer(trees, width = 20 / .3048, byid = T)
     
  shapefile(p, "/home/erker/hgt_data/madison_tree_inventories/hgt/trees_20m_buf.shp", overwrite = T)
#+end_src

#+RESULTS:

***** Use the chm instead of the lidar clouds clipped to each tree. I'm only going to use 2016 here.  It's good quality lidar and it's closest to the aviris

#+begin_src R
      library(raster)
      library(velox)
      library(dplyr)

       b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_20m_buf.shp")
         b <- spTransform(b, crs("+init=epsg:7599"))
         b@data <- select(b@data, UID)

      fs <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/all_chm", full.names = T)

      o <- sapply(fs, function(f) {
          v <- velox(f)
          m <- v$extract(sp = b, fun = function(x) mean(x, na.rm = TRUE))
          m
      })

      # then average across the images because some trees may go across tiles.
      o2 <- apply(o, 1, function(x) mean(x, na.rm = T))

                                              # I LEFT OFF HERE [2019-11-18 Mon]

      # these heights are in feet.  Convert to meters

    o2 <- o2 * .3048

  d <- data.frame(UID = b@data$UID, mean_height_wn20m = o2, stringsAsFactors = F)

  saveRDS(d, "~/hgt_data/mean_height_within20m_2016.rds")
#+end_src

**** topographic position and terrain

***** elevation slope aspect and topographic position index at 2 scales
#+begin_src R :session *R2*
    library(raster)
  library(dplyr)
                                          #  library(dynatopmodel)  I'm not going to get the topographic wetness index.  I think 2 scale apporach with terrain works fine
    library(rgeos)

      h <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds") %>%
        filter(!duplicated(.))

      uids <- h$uid


      trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
      trees@data <-   select(trees@data, UID, DBH, Genus, Species)
      trees <- trees[trees@data$UID %in% uids,]
    trees <- spTransform(trees, "+init=epsg:7599")

    dem <- raster("/home/erker/hgt_data/dane_dem/dane_dem.tif")
    crs(dem) <- "+init=epsg:7599"

    dem <- crop(dem, trees)

    ter_5ft <- terrain(dem, neighbors = 8, opt = c("slope", "aspect", "TPI"))
    writeRaster(ter_5ft, "~/hgt_data/dane_dem/madison_5ft_terrain.tif", overwrite = T)

    dema <- raster::aggregate(dem, fact = 40)

    ter_200ft <- terrain(dema, neighbors = 8, opt = c("slope", "aspect", "TPI"))
    writeRaster(ter_200ft, "~/hgt_data/dane_dem/madison_200ft_terrain.tif", overwrite = T)
#+end_src

#+begin_src R :session *R2*

  trees_ter_5ft  <- raster::extract(ter_5ft, trees, sp = T)

  trees_ter_5ft@data <- trees_ter_5ft@data %>%
      rename(tpi_5ft = tpi, slope_5ft = slope, aspect_5ft = aspect)

  trees_ter_200ft  <- raster::extract(ter_200ft, trees_ter_5ft, sp = T)

  trees_ter_200ft@data <- trees_ter_200ft@data %>%
      rename(tpi_200ft = tpi, slope_200ft = slope, aspect_200ft = aspect)

  trees_ter_welv <- raster::extract(dem, trees_ter_200ft, sp = T)

  trees_ter_welv@data <- trees_ter_welv@data %>%
      rename(elev = dane_dem) %>%
      mutate(elev = elev * .3048)


  #categorize aspect
  dterr <- trees_ter_welv@data

  dterr <- dterr %>%
      mutate(


  saveRDS(dterr, "~/hgt_data/terrain_at_trees.rds")

#+end_src



**** TODO distance to road?  need to get centerlines file

#+begin_src R

#+end_src
**** TODO pct impervious etc

#+begin_src R
  library(raster)

  landcover <- raster("/home/erker/hgt_data/share_madison_utc/3_ClassifiedUrbanArea.tif")

  trees20m <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_20m_buf.shp")


  imp <- raster::extract(landcover, trees20m, sp = T, fun = function(x, ...) sum(x == 7) / length(x))

#+end_src




**** TODO sewers?
*** modeling
**** combine data
#+begin_src R
        library(raster)
        library(dplyr)

            traits <- readRDS("/home/erker/hgt_data/canopy_foliar_traits.rds") %>% unique()
            hgt_wn20m <- readRDS("/home/erker/hgt_data/mean_height_within20m_2016.rds") %>% unique()
            terr <- readRDS("/home/erker/hgt_data/terrain_at_trees.rds") %>% unique()

        h <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates_corrFromNoGrowth.rds") %>%
            rename(UID = uid) %>%
            filter(!is.na(growth.rate)) %>%
            mutate(cor_max2005 = emp_max2005 + mean_bias05,
                   cor_max2009 = emp_max2009 + mean_bias09)

      uids <- h$UID

            trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
            trees <- trees[!(duplicated(trees@data)),]
            trees@data <-   select(trees@data, UID, DBH, Genus, Species)
            trees <- trees[trees@data$UID %in% uids,]
            trees <- spTransform(trees, "+init=epsg:7599")

  # separate out street trees from the other trees
  trees@data <- trees@data %>%
      mutate(street = grepl("ST[0-9]+",UID))


        coords <- coordinates(trees)
        dimnames(coords)[[2]] <- c("x", "y")
        td <- cbind(trees@data, coords)

        d <- left_join(h, td)

        d <- left_join(d, terr)

        d <- left_join(d, hgt_wn20m)

        d <- left_join(d, traits)

      saveRDS(d, "/home/erker/hgt_data/merged_data.rds")
#+end_src

#+RESULTS:
: 
: Joining, by = c("UID", "Genus")
: 
: Joining, by = c("UID", "Genus", "DBH", "Species")
: 
: Joining, by = "UID"
: 
: Joining, by = c("UID", "Genus", "DBH", "Species")
**** read back in data
#+begin_src R
library(dplyr)
library(ggplot2)

d <-   readRDS("/home/erker/hgt_data/merged_data.rds")
#+end_src

#+RESULTS:

**** plot data
#+begin_src R

  library(ggplot2)
  library(ggthemes)
  library(tidyr)
                                          #  terk <- list(theme_solarized_2(base_size = 16) +
  terk <- theme_tufte(base_size = 16) +
    theme(legend.title = element_text(size = 10),
          legend.text = element_text(size = 8),
          axis.ticks = element_line(size = .3), 
          panel.grid.major = element_line(color = "#839496", size = .1),
          panel.grid.minor = element_line(color = "#839496", size = .05))


  blue <- scale_color_solarized("blue")

  red <- solarized_pal("red")(1)
  base1 <- "#93a1a1"

  d <-  readRDS("/home/erker/hgt_data/merged_data.rds")



#+end_src

#+RESULTS:

***** growth rates

#+begin_src R :exports results :results graphics :file figs/growthrate_histogram.png :width 1200 :res 150 :bg transparent
  ggplot(d, aes(x = 100 * growth.rate)) + geom_histogram(binwidth = 2) +
    terk +
    scale_x_continuous("growth rate (cm/year)", lim = c(-50,100), breaks = c(-100,-50,0, round(mean(d$growth.rate * 100),1), 50, 100)) +
    geom_vline(data = d, aes(xintercept = mean(growth.rate)*100), color = red)
#+end_src

#+RESULTS:
[[file:figs/growthrate_histogram.png]]

How many trees
#+begin_src R
sum(complete.cases(d$growth.rate))
#+end_src

#+RESULTS:
: [1] 41936

***** height 

****** 2005
#+begin_src R :exports results :results graphics :file figs/corheight2005_growth.png :width 1000
ggplot(d, aes(x = cor_max2005, y = growth.rate)) + geom_point(alpha = .3) + terk + geom_smooth()
#+end_src

#+RESULTS:
[[file:figs/corheight2005_growth.png]]
****** 2009
#+begin_src R :exports results :results graphics :file figs/corheight2009_growth.png :width 1000
ggplot(d, aes(x = cor_max2009, y = growth.rate)) + geom_point(alpha = .3) + terk + geom_smooth()
#+end_src

#+RESULTS:
[[file:figs/corheight2009_growth.png]]

***** Genera..
***** Space
***** traits

how many trees are there with full traits?

#+begin_src R
  d %>% select(TotPhen, N, Sugar, LMA, lignin, chl) %>%
    filter(complete.cases(.)) %>%
      nrow
#+end_src

#+RESULTS:
: 
: [1] 21454

#+begin_src R

  dt <- d %>%
    select(UID, growth.rate, TotPhen, N, Sugar, LMA, lignin, chl) %>%
    gather(trait, value, -growth.rate, -UID)

#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/traits_N_growth.png :bg transparent :width 1000 :height 800 :res 100

  ggplot(dt, aes(x = value, y = growth.rate)) + geom_point(alpha = .3) + geom_smooth() + terk +
    facet_wrap(~trait, scales = "free")

#+end_src

#+RESULTS:
[[file:figs/traits_N_growth.png]]

#+begin_src R :exports results :results graphics :file figs/traits_N_growth_methodlm.png :bg transparent

  ggplot(dt, aes(x = value, y = growth.rate)) + geom_point() + geom_smooth(method = "lm") + terk +
    facet_wrap(~trait, scales = "free")

#+end_src

#+RESULTS:
[[file:figs/traits_N_growth_methodlm.png]]
***** mean height within 20m

#+begin_src R :exports results :results graphics :file figs/meanheight20m_v_growthrate.png
  ggplot(d, aes(x = mean_height_wn20m, y = growth.rate)) + 
      geom_point(alpha = .1) +
      geom_smooth()
#+end_src

#+RESULTS:
[[file:figs/meanheight20m_v_growthrate.png]]

#+begin_src R :exports results :results graphics :file figs/meanheight20m_v_growthrate_lm.png
  ggplot(d, aes(x = mean_height_wn20m, y = growth.rate)) + 
      geom_point(alpha = .1) +
      geom_smooth(method = "lm")
#+end_src

#+RESULTS:
[[file:figs/meanheight20m_v_growthrate_lm.png]]
***** terrain large scale
#+begin_src R

  dt <- d %>%
    select(UID, growth.rate, tpi_200ft, slope_200ft, aspect_200ft) %>%
    gather(terr, value, -growth.rate, -UID)


#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/terrain200_growth.png :bg transparent :width 1000 :height 800 :res 100
  ggplot(dt, aes(x = value, y = growth.rate)) + geom_point(alpha = .1) + terk + geom_smooth() +
    facet_wrap(~terr, scales = "free")

#+end_src

#+RESULTS:
[[file:figs/terrain200_growth.png]]
#+begin_src R :exports results :results graphics :file figs/terrain200_growth_lm.png :bg transparent :width 1000 :height 800 :res 100
  ggplot(dt, aes(x = value, y = growth.rate)) + geom_point(alpha = .1) + terk + geom_smooth(method = "lm") +
    facet_wrap(~terr, scales = "free")

#+end_src

#+RESULTS:
[[file:figs/terrain200_growth_lm.png]]

***** terrain small scale
#+begin_src R

  dt <- d %>%
    select(UID, growth.rate, tpi_5ft, slope_5ft, aspect_5ft) %>%
    gather(terr, value, -growth.rate, -UID)


#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/terrain5_growth.png :bg transparent :width 1000 :height 800 :res 100

  ggplot(dt, aes(x = value, y = growth.rate)) + geom_point(alpha = .1) + terk + geom_smooth() +
    facet_wrap(~terr, scales = "free")

#+end_src

#+RESULTS:
[[file:figs/terrain5_growth.png]]
#+begin_src R :exports results :results graphics :file figs/terrain5_growth_lm.png :bg transparent :width 1000 :height 800 :res 100

  ggplot(dt, aes(x = value, y = growth.rate)) + geom_point(alpha = .1) + terk + geom_smooth(method = "lm") +
    facet_wrap(~terr, scales = "free")

#+end_src

#+RESULTS:
[[file:figs/terrain5_growth_lm.png]]
To see if the trend is driven by exteme points
#+begin_src R :exports results :results graphics :file figs/terrain5_growth_tpi_noextreme.png :bg transparent :width 1000 :height 800 :res 100

  ggplot(filter(dt, terr == "tpi_5ft"), aes(x = value, y = growth.rate)) + geom_point(alpha = .1) + terk + geom_smooth() +
    facet_wrap(~terr, scales = "free") +
    scale_x_continuous(limits = c(-1,1))

#+end_src

#+RESULTS:
[[file:figs/terrain5_growth_tpi_noextreme.png]]

***** elevation
#+begin_src R :exports results :results graphics :file figs/elv_growth.png :width 1000 :height 800 :bg transparent
  ggplot(d, aes(x = elev, y = growth.rate)) + geom_point() +
    geom_smooth(method = "lm") + terk
#+end_src

#+RESULTS:
[[file:figs/elv_growth.png]]

**** multiple linear model

All in.  This will remove the observations where we have missing
data.  Instead of the 40k, it's about 20k where we ahve aviris.

#+begin_src R

  m1 <- lm(growth.rate ~ Genus + cor_max2005 + tpi_5ft + slope_5ft + aspect_5ft + tpi_200ft + slope_200ft + aspect_200ft + elev + mean_height_wn20m + TotPhen + N + Sugar + LMA + lignin + chl, 
     d)
summary(m1)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ Genus + cor_max2005 + tpi_5ft + slope_5ft + 
    aspect_5ft + tpi_200ft + slope_200ft + aspect_200ft + elev + 
    mean_height_wn20m + TotPhen + N + Sugar + LMA + lignin + 
    chl, data = d)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.55313 -0.07544 -0.00666  0.06616  0.86590 

Coefficients:
                    Estimate Std. Error t value Pr(>|t|)    
(Intercept)        9.679e-01  4.023e-02  24.057  < 2e-16 ***
GenusAcer         -1.721e-01  2.370e-02  -7.262 3.95e-13 ***
GenusBetula       -1.070e-01  2.496e-02  -4.287 1.82e-05 ***
GenusCarya        -9.989e-02  2.662e-02  -3.753 0.000175 ***
GenusCatalpa      -4.468e-02  2.763e-02  -1.617 0.105959    
GenusCeltis       -1.720e-01  2.443e-02  -7.044 1.93e-12 ***
GenusFraxinus     -1.344e-01  2.368e-02  -5.676 1.40e-08 ***
GenusGinkgo       -8.687e-02  2.838e-02  -3.060 0.002213 ** 
GenusGleditsia    -8.415e-02  2.374e-02  -3.545 0.000394 ***
GenusGymnocladus  -6.115e-03  5.270e-02  -0.116 0.907623    
GenusJuglans      -6.131e-02  2.506e-02  -2.447 0.014419 *  
GenusPicea        -5.777e-03  2.426e-02  -0.238 0.811761    
GenusPinus         6.969e-02  2.479e-02   2.811 0.004944 ** 
GenusPlatanus      5.087e-02  3.511e-02   1.449 0.147436    
GenusPopulus      -9.504e-02  2.621e-02  -3.626 0.000289 ***
GenusQuercus      -1.639e-01  2.394e-02  -6.846 7.81e-12 ***
GenusRobinia      -2.813e-02  2.622e-02  -1.073 0.283335    
GenusSalix        -1.356e-01  5.610e-02  -2.417 0.015659 *  
GenusThuja        -5.864e-02  2.625e-02  -2.234 0.025518 *  
GenusTilia        -3.995e-02  2.385e-02  -1.675 0.093924 .  
GenusUlmus        -4.465e-02  2.439e-02  -1.831 0.067166 .  
cor_max2005       -2.964e-02  3.266e-04 -90.745  < 2e-16 ***
tpi_5ft           -1.699e-02  3.763e-03  -4.513 6.42e-06 ***
slope_5ft         -8.460e-03  1.629e-02  -0.519 0.603628    
aspect_5ft         2.049e-04  4.696e-04   0.436 0.662643    
tpi_200ft         -1.564e-03  2.960e-04  -5.285 1.27e-07 ***
slope_200ft        7.381e-02  3.829e-02   1.928 0.053925 .  
aspect_200ft      -1.880e-03  4.629e-04  -4.060 4.92e-05 ***
elev              -2.842e-04  4.660e-05  -6.098 1.09e-09 ***
mean_height_wn20m  2.613e-02  5.090e-04  51.326  < 2e-16 ***
TotPhen           -5.289e-03  5.966e-04  -8.865  < 2e-16 ***
N                 -1.147e-01  4.184e-03 -27.422  < 2e-16 ***
Sugar             -3.786e-03  1.188e-03  -3.188 0.001434 ** 
LMA               -4.930e-04  6.545e-05  -7.532 5.18e-14 ***
lignin            -3.964e-03  2.005e-04 -19.763  < 2e-16 ***
chl                3.705e-04  2.239e-05  16.551  < 2e-16 ***
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.1246 on 21417 degrees of freedom
  (20483 observations deleted due to missingness)
Multiple R-squared:  0.4137,	Adjusted R-squared:  0.4128 
F-statistic: 431.8 on 35 and 21417 DF,  p-value: < 2.2e-16
#+end_example

#+begin_src R :exports results :results graphics :file figs/m1_plot.png
plot(m1)
#+end_src

#+RESULTS:
[[file:figs/m1_plot.png]]

**** I need to look at semivariogram...

**** random forest
#+begin_src R
    library(randomForest)

    dc <- d %>%
        filter(complete.cases(.)) %>%
        mutate(Genus = factor(Genus))

    mrf <- randomForest(formula = growth.rate ~ Genus + cor_max2005 + tpi_5ft + slope_5ft + aspect_5ft + tpi_200ft + slope_200ft + aspect_200ft + elev + mean_height_wn20m + TotPhen + N + Sugar + LMA + lignin + chl, 
         data = dc,
         localImp=T)

#+end_src

#+begin_src R
mrf
#+end_src

#+RESULTS:
: 
: Call:
:  randomForest(formula = growth.rate ~ Genus + cor_max2005 + tpi_5ft +      slope_5ft + aspect_5ft + tpi_200ft + slope_200ft + aspect_200ft +      elev + mean_height_wn20m + TotPhen + N + Sugar + LMA + lignin +      chl, data = dc) 
:                Type of random forest: regression
:                      Number of trees: 500
: of variables tried at each split: 5
: 
:           Mean of squared residuals: 0.01445986
:                     % Var explained: 45.34

#+begin_src R
importance(mrf)[order(-importance(mrf)),]
#+end_src

#+RESULTS:
:       cor_max2005             Genus mean_height_wn20m            lignin 
:         127.98080          88.09066          48.07855          27.52676 
:           TotPhen                 N              elev             Sugar 
:          26.76902          25.79470          23.08977          21.04800 
:               chl               LMA         tpi_200ft         slope_5ft 
:          20.33767          20.30926          20.08467          19.54760 
:      aspect_200ft       slope_200ft           tpi_5ft        aspect_5ft 
:          19.13344          18.87548          18.59281          17.86812


https://cran.r-project.org/web/packages/randomForestExplainer/vignettes/randomForestExplainer.htlm
#+begin_src R
library(randomForestExplainer)

importanceframe <- measure_importance(mrf)



#+end_src

#+begin_src R 
importanceframe
#+end_src

#+RESULTS:
#+begin_example
            variable mean_min_depth no_of_nodes mse_increase
1       aspect_200ft          4.476      225914 1.513944e-04
2         aspect_5ft          4.904      230725 4.999152e-05
3                chl          3.828      228221 1.824864e-03
4        cor_max2005          1.114      269712 2.216328e-02
5               elev          3.268      235043 1.146434e-03
6              Genus          1.264       81707 8.425657e-03
7             lignin          2.634      235963 3.326133e-03
8                LMA          3.458      230109 6.230747e-04
9  mean_height_wn20m          2.604      255727 6.562798e-03
10                 N          2.974      234100 2.030878e-03
11       slope_200ft          4.488      224368 3.465162e-04
12         slope_5ft          4.532      233385 1.647960e-04
13             Sugar          3.302      230277 1.340134e-03
14           TotPhen          2.506      231409 2.808007e-03
15         tpi_200ft          4.276      228625 2.343532e-04
16           tpi_5ft          4.270      230493 5.204200e-05
   node_purity_increase no_of_trees times_a_root       p_value
1              19.06371         500            0  1.147603e-01
2              17.99463         500            0  1.520144e-31
3              20.55770         500            7  2.667829e-10
4             127.71692         500          139  0.000000e+00
5              22.89165         500           23  1.596445e-97
6              88.23060         500          123  1.000000e+00
7              27.40741         500           16 2.379451e-116
8              20.45368         500           26  3.708661e-25
9              47.53816         500            8  0.000000e+00
10             25.91879         500            4  5.864798e-80
11             18.82467         500            0  9.847247e-01
12             19.57211         500            0  8.205210e-68
13             21.04741         500           49  7.986963e-27
14             27.15436         500           88  1.591758e-39
15             20.05964         500            1  6.994932e-13
16             18.68723         500           16  4.747524e-29
#+end_example

importance rankings

#+begin_src R :exports results :results graphics :file figs/cor_impor.png
plot_importance_ggpairs(importanceframe, measures = c("node_purity_increase", "mse_increase", "mean_min_depth", "p_value"))
#+end_src

#+RESULTS:
[[file:figs/cor_impor.png]]

#+begin_src R :exports results :results graphics :file figs/rf_imp_frame1.png

plot_multi_way_importance(importanceframe, x_measure = "mean_min_depth", y_measure = "node_purity_increase", size_measure = "p_value", no_of_labels = 5)

#+end_src

#+RESULTS:
[[file:figs/rf_imp_frame1.png]]


#+begin_src R
interactions_frame <- min_depth_interactions(mrf, c("cor_max2005", "Genus", "mean_height_wn20m", "lignin", "TotPhen", "N"))
#+end_src


#+begin_src R :exports results :results graphics :file figs/rf_int_frame.png :width 1000
plot_min_depth_interactions(interactions_frame)
#+end_src

#+RESULTS:
[[file:figs/rf_int_frame.png]]


#+begin_src R :exports results :results graphics :file figs/pred_int_meanheight20m_cormax2005.png
plot_predict_interaction(mrf, dc, "mean_height_wn20m", "cor_max2005")
#+end_src

#+RESULTS:
[[file:figs/pred_int_meanheight20m_cormax2005.png]]

#+begin_src R :exports results :results graphics :file figs/pred_int_2.png
plot_predict_interaction(mrf, dc, "cor_max2005", "lignin")
#+end_src

#+RESULTS:
[[file:figs/pred_int_2.png]]

#+begin_src R :exports results :results graphics :file figs/partialGenus.png :width 1000 :res 120
  #pp <- partialPlot(x=mrf, pred.data=dc, x.var=Genus, which.class="Acer", las = 2)
  dp <- data.frame(pp)
  ggplot(dp, aes(x = x, y = y)) + geom_point() +
      theme(axis.text.x = element_text(angle = 60, hjust = 1))
#+end_src

#+RESULTS:
[[file:figs/partialGenus.png]]

#+begin_src R
library(pdp)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/partialGenusheight.png :width 1500
#genus_by_2005height <- partial(mrf, pred.data = dc, pred.var = c("Genus", "cor_max2005"))
plot(genus_by_2005height)
#+end_src

#+RESULTS:
[[file:figs/partialGenusheight.png]]

#+begin_src R :exports results :results graphics :file figs/partial_genus_height2.png :width 1500 :bg transparent :res 120
  ggplot(genus_by_2005height, aes(x = cor_max2005, y = yhat, color = Genus)) + geom_line() + 
      theme_minimal() +
      coord_cartesian(xlim = c(5,20))
#+end_src

#+RESULTS:
[[file:figs/partial_genus_height2.png]]
There doesn't appear to be super strong genus x height interactions to me.


* Results
** Growth Rates
#+name:fig:growthrate_hist
#+caption: Histogram of estimated growth rates for nearly 42,000 urban trees.  The sample mean growth rate is 8.7 cm / year.
[[file:figs/growthrate_histogram.png]]


See figure [[fig:growthrate_hist]] for distribution of growth rates.

- figure of distribution of growth rates



- plot growth rates in space
** Model Coefficients
* Discussion


cite:song_e_2016 estimated canopy height growth of urban trees in
Osaka, Japan using repeat lidar.  Like our study their later
collections had higher pulse densities (in their case, 52 pulses/m^2
versus 11 pulses/m^2).  The relatively high pulse density across all
their years likely means that the bias in height estimation is small,
but the 

If their early date collections are biased low, it makes growth appear
higher than it would be in the field.  

For example: mean growth from 2008-2010 (when pulse density was 52
pulses / m^2) was 0.02+- .19 m m^{-2} yr^{-1}, and
from 2004-2008 (when pulse density increased from 11 to 52 pulses /
m^2) mean growth was .37 +/- .14 m m^{-2} yr^{-1}.  This has got to be due to
the pulse density bias.



Estimating canopy height from lidar has a greater bias over smaller
areas (individual trees) compared to larger areas
(stands) citep:song_e_2016,roussel_e_2017.

* papers
https://link.springer.com/article/10.1186/s40663-018-0146-y

file:///home/erker/Downloads/remotesensing-10-00347.pdf


https://www.sciencedirect.com/science/article/pii/S0034425717302316#f0005

https://www.tandfonline.com/doi/abs/10.5589/m06-030

Assessing species-level biases in tree heights
estimated from terrain-optimized leaf-off airborne
laser scanner (ALS) data


** cite:parent_volin_2015

ALS optimized for terrain underestimates tree height.

They did find statistically significant differences between species in
estimating height, but they were small (<2m)

#+BEGIN_QUOTE
Variation in the accuracies of ALS-estimated tree heights are presumably due to
differences in branching architecture among species – laser pulses may pass more easily
through leaf-off canopies with lower branch densities. Compound-leaf species tend to
have lower branch densities (i.e. twigs/leaf area; twig mass/leaf area) than simple-leaf
species (Yang, Li, and Sun 2009; White 1983) and, thus, may be expected to have greater
bias in ALS-based heights. This expectation was supported by Wasser et al. (2013) who
found that plot average height biases were greater for compound-leaf plots, dominated by
black walnut (Juglans nigra), green ash (Fraxinus pennsylvanica), and honey locust
(Gleditsia triacanthos), than for simple-leaf plots dominated by red maple, black cherry,
and red oak. However, for tree height estimates, our data did not find greater bias for
compound-leaf species (i.e. white ash, hickories, honey locust) as a whole and we found
considerable overlap between compound-, simple-, and needle-leaf species. These results
suggest that branching density may not be a separable characteristic between compound-
and simple-leaf species – the majority of species in our study were not included in Yang,
Li, and Sun (2009) and White (1983). Another possible interpretation is that ALS-based
tree height estimates are not particularly sensitive to species-specific variations in branch
density given the resolution of our data. Although significant, the differences we found
among the species we studied were relatively small (bias < 2 m). With higher resolution
ALS data, Brandtberg et al. (2003) found no significant differences in ALS tree height
biases among oaks, maple, and yellow poplar (Liriodendron tulipifera). With moderate
resolution ALS data, Ørka, Næsset, and Bollandsås (2010) did find species to be a
significant co-predictor of tree height but it had a negligible effect on the model
performance.

#+END_QUOTE

** lidar and tree growth


*** cite:choi_e_2019

**** abstract
#+BEGIN_QUOTE
Understanding forest dynamics is important for assessing the health of
urban forests, which experience various disturbances, both natural
(e.g., treefall events) and artificial (e.g., making space for
agricultural fields). Therefore, quantifying three-dimensional changes
in canopies is a helpful way to manage and understand urban forests
better. Multitemporal airborne light detection and ranging (LiDAR)
datasets enable us to quantify the vertical and lateral growth of
trees across a landscape scale. The goal of this study is to assess
the annual changes in the 3-D structures of canopies and forest gaps
in an urban forest using annual airborne LiDAR datasets for
2012–2015. The canopies were classified as high canopies and low
canopies by a 5 m height threshold. Then, we generated pixel- and
plot-level canopy height models and conducted change detection
annually. The vertical growth rates and leaf area index showed
consistent values year by year in both canopies, while the spatial
distributions of the canopy and leaf area profile (e.g., leaf area
density) showed inconsistent changes each year in both canopies. In
total, high canopies expanded their foliage from 12 m height, while
forest gap edge canopies (including low canopies) expanded their
canopies from 5 m height. Annual change detection with LiDAR datasets
might inform about both steady growth rates and different
characteristics in the changes of vertical canopy structures for both
high and low canopies in urban forests.
#+END_QUOTE

**** notes

point density > 8 /m^2

leaf on

small spatial extent

4 years of data (2012-2015)

lidar is more or less consistent from year to year.

their annual growth rates in "high canopy" areas is around .3 m/year.

I'm having a hard time with their figures and tables, they are a bit
out of wack.

*** cite:ossola_hopton_2018

https://www.sciencedirect.com/science/article/pii/S0048969717321010#f1010

**** abstract
#+BEGIN_QUOTE
The spatial arrangement of urban vegetation depends on urban
morphology and socio-economic settings. Urban vegetation changes over
time because of human management. Urban trees are removed due to
hazard prevention or aesthetic preferences. Previous research
attributed tree loss to decreases in canopy cover. However, this
provides little information about location and structural
characteristics of trees lost, as well as environmental and social
factors affecting tree loss dynamics. This is particularly relevant in
residential landscapes where access to residential parcels for field
surveys is limited. We tested whether multi-temporal airborne LiDAR
and multi-spectral imagery collected at a 5-year interval can be used
to investigate urban tree loss dynamics across residential landscapes
in Denver, CO and Milwaukee, WI, covering 400,705 residential parcels
in 444 census tracts. Position and stem height of trees lost were
extracted from canopy height models calculated as the difference
between final (year 5) and initial (year 0) vegetation height derived
from LiDAR. Multivariate regression models were used to predict number
and height of tree stems lost in residential parcels in each census
tract based on urban morphological and socio-economic variables. A
total of 28,427 stems were lost from residential parcels in Denver and
Milwaukee over 5 years. Overall, 7% of residential parcels lost one
stem, averaging 90.87 stems per km2. Average stem height was 10.16 m,
though trees lost in Denver were taller compared to Milwaukee. The
number of stems lost was higher in neighborhoods with higher canopy
cover and developed before the 1970s. However, socio-economic
characteristics had little effect on tree loss dynamics. The study
provides a simple method for measuring urban tree loss dynamics within
and across entire cities, and represents a further step toward high
resolution assessments of the three-dimensional change of urban
vegetation at large spatial scales.
#+END_QUOTE

**** notes
2010 and 2015 lidar in MKE, 2008 and 2013 lidar in denver

all years have the same nominal spacing (.7 points per m)

they had no need to do a correction for their chm

they did what i was thinking of and created 2 chms then found their
difference. 

they didn't worry about lidar underestimating height.  While the point
densities are on average the same across years, there is variability
across years which could be importnat (though not for their analysis
really I don't think since their target was mostly stems).


#+BEGIN_QUOTE
A total of 13,427 and 15,000 tree stems (height > 5 m) were lost in
the 5-year period from residential parcels in Denver (2008–2013) and
Milwaukee (2010–2015), respectively. On a per area basis, this
corresponds to an average of 99.33 ± 3.49 (Denver) and 82.41 ± 2.14
(Milwaukee) tree stems per km2 of residential area. The tallest stems
lost in Denver and Milwaukee were 28.04 and 23.82 m high,
respectively. Tree stems lost in Denver were taller on average (11.42
± 0.03 m) compared to those lost in Milwaukee (8.95 ± 0.02 m)
(Fig. 3).
#+END_QUOTE

*** cite:song_e_2016
https://www.sciencedirect.com/science/article/pii/S1618866716000273#fig0010

**** abstract
#+BEGIN_QUOTE
Inter-annual canopy growth is one of the key indicators for assessing
forest conditions, but the measurements require laborious field
surveys. Up-to-date LiDAR remote sensing provides sufficient
three-dimensional morphological information of the ground to monitor
canopy heights on a broad scale. Thus, we attempted to use
multi-temporal airborne LiDAR datasets in the estimation of vertical
canopy growth, across various types of broad-leaved trees in a large
urban park.

The growth of broad-leaved canopies in the EXPO '70 urban forest in
Osaka, Japan was assessed with 19 plots at the stand level and 39
selected trees at the individual-tree level. Airborne LiDAR campaigns
repeatedly observed the park in the summers of 2004, 2008,
and 2010. We acquired canopy height models (CHMs) for each year from
the height values of the uppermost laser returns at every 0.5 m
grid. The annual canopy growth was calculated by the differences in
CHMs and validated with the annual changes in field-measured basal
areas and tree heights.


LiDAR estimations revealed that the average annual canopy growth from
2004 to 2010 was 0.26 ± 0.11 m m−2 yr−1 at the plot level and 0.26 ±
0.10 m m−2 yr−1 at the individual-tree level. This result showed that
growing trends were consistent at different scales through 2004 to
2010 despite uncertainty in estimating short-term growth for small
crown areas at the individual-tree level. This LiDAR-estimated canopy
growth shows a moderate relation to field-measured increase of basal
areas and average heights. The estimation uncertainties seem to result
from the complex canopy structure and irregular crown shape of
broad-leaved trees. Challenges still remain on how to incorporate the
growth of understory trees, growth in the lateral direction, and gap
dynamics inside the canopy, particularly in applying multi-temporal
LiDAR datasets to the large-scale growth assessment.
#+END_QUOTE

**** notes  
- small geographic area in osaka
  - assess 39 trees and 19 plots
- 3 years of lidar 2004 2008 2010
- validated growth with ground measurements at plot and individual
  tree level.
- trees grow .26 m / year
  - This is high, could it be due to underestimating height in early years?
- great table with previous studies looking at canopy growth.
  - none of the studies in the table, except the study itself were urban.
- note the uncertainties in estimateing height from lidar, but don't
  correct for it.

- in 2004 lidar had 11 pulses /m^2, in 2008 and 2010 it was 52.  So
  there would definitely be a greater bias in 2004, which they didn't
  correct for.  BUt it might be insignificant since their point cloud
  density was so high.

- they note the bias is greater for individual trees than plots,
  because the area is smaller.

- their table 7 doesn't show the 2004-2008 combination.  ugh.
  - "At the scale of individual trees, the growth trend was not clear for every period"
  - field measures didn't agree with lidar measures over every period
    for individual trees.

- they saw trees always measure taller in 2008 than 2004.  This is
  more evidence that there is a bias in the lidar.

- field measured growth: is much lower than they found:
#+BEGIN_QUOTE
Field-measured
heights of plants since 1972 in the selected long-term monitoring
plots show the decrease in the annual growing trends, aver-
aging from 0.24 m yr −1 during 1972–1982 to 0.10 m yr −1 during
1995–2004.
#+END_QUOTE

but instead of recognizing the potneital bias, they think that it's
because that's for all trees not the top of canopy trees.


*** cite:roussel_e_2017 
