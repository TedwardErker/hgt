#    -*- mode: org -*-


Archived entries from file /home/erker/git/hgt/hgt.org


* old bit with grid_metrics3d
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-17 Thu 16:14
  :ARCHIVE_FILE: ~/git/hgt/hgt.org
  :ARCHIVE_OLPATH: Methods/2016 lidar/testing finding trees
  :ARCHIVE_CATEGORY: hgt
  :ARCHIVE_ITAGS: work allo
  :END:
#+begin_src R

  plot(gm, color = "mode", trim = 2)


                                          # get the identity of the highest for each x and y
                                          #https://stackoverflow.com/questions/24558328/how-to-select-the-row-with-the-maximum-value-in-each-group
  gm <- gm[gm[, .I[which.max(Z)], by=list(X,Y)]$V1]

  r <- rasterFromXYZ(gm)

  library(ggplot2)
  ggplot(gm, aes(x = X, y = Y, fill = tree)) + geom_raster() + coord_equal()





                                          # works great
  gmclass <- grid_metrics3d(las, ~Modes(Classification), 3)
  plot(gmclass, color = "mode", trim = 3)


  lp <- lasdetectshape(las, shp_plane(th1 = 15, th2 = 4, k = 20), "Coplanar")
  plot(lp, color = "Coplanar")

  gmcoplanar <- grid_metrics3d(lp, ~Modes(Coplanar), 3)
                                          # doesn't work
  plot(gmcoplanar, color = "mode")



  gmcoplanar <- grid_metrics3d(lp, ~Modes_numeric(Coplanar), 3)
                                          # works now
  plot(gmcoplanar, color = "mode", trim = 3)

#+end_src


Archived entries from file /home/erker/git/hgt/hgt.org


* old way with morphology on raster
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-17 Thu 16:15
  :ARCHIVE_FILE: ~/git/hgt/hgt.org
  :ARCHIVE_OLPATH: Methods/2016 lidar/testing finding trees
  :ARCHIVE_CATEGORY: hgt
  :ARCHIVE_ITAGS: work allo
  :END:
#+begin_src R
    library(lidR) 
  library(mmand)

  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first")
  lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 20), "Coplanar")
  plot(lsp, color = "Coplanar", col = c("blue", "red"))
  lsp2 <- lasdetectshape(lsp, shp_plane(th1 = 15, th2 = 6, k = 10), "Coplanar2", filter = ~Coplanar == F)
  plot(lsp2, color = "Coplanar2") 


  l@data[(!lsp@data$Coplanar) & (!lsp@data$Coplanar2) & (!lsp@data$Colinear) & (lsp@data$Intensity < 20)]$Classification <- 5L


  lsp@data[(!lsp@data$Coplanar) & (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1) & (lsp@data$Intensity < 30)]$Classification <- 5L
  lt <- lasfilter(lsp, Classification == 5L)
  chm_tree <- grid_canopy(lt, res = 3, p2r(2))
  plot(chm_tree)


  l <- readLAS("test2016.las", filter = "-drop_z_below 6")
  lsp <- lasdetectshape(l, shp_plane(th1 = 5, th2 = 4, k = 20), "Coplanar_building")
  lsp@data[(lsp@data$Coplanar_building)]$Classification <- 6L
  plot(lsp, color = "Classification")

  lb <- lasfilter(lsp, Classification == 6L)
  chm_building <- grid_canopy(lb, res = 3, p2r(1))
  plot(chm_building)

  chm_building<- reclassify(chm_building, matrix(c(NA, 0), ncol = 2))
  kern <- shapeKernel(c(3,3), type="diamond")
  chm_building[,] <- opening(as.matrix(chm_building), kern)
  plot(chm_building)

  plot(chm_tree - chm_building > 6)









  ker = matrix(1,5,5)
  chm_building = focal(chm_building, w = ker, fun = median)
  plot(chm_building)
















  k = makeBrush(17, shape='diamond')
  o <- opening(as.matrix(chm_building), kern = k)
  chm_building[,] <- o
  plot(chm_building)








  chm_building<- reclassify(chm_building, matrix(c(NA, 0), ncol = 2))




  plot(chm_building)



    plot(lsp, color = "Classification", col = c("red", "green"))
    chm <- reclassify(chm, matrix(c(NA, 0), ncol = 2))

    ker = matrix(1,3,3)
    chm = focal(chm, w = ker, fun = median)
    plot(chm)



    chm = focal(chm, w = ker, fun = median)

    plot(chm)








  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first_of_many")
  ls <- lasdetectshape(l, shp_line(th1 = 6, k = 10), "Colinear")
  #plot(ls, color = "Colinear")
  lsp <- lasdetectshape(ls, shp_plane(th1 = 5, th2 = 6, k = 100), "Coplanar")
  plot(lsp, color = "Coplanar")
  lsp2 <- lasdetectshape(lsp, shp_plane(th1 = 15, th2 = 6, k = 10), "Coplanar2", filter = ~Coplanar == F)
  plot(lsp2, color = "Coplanar2") 
  lsp@data[(!lsp@data$Coplanar) & (!lsp@data$Coplanar2) & (!lsp@data$Colinear) & (lsp@data$Intensity < 20)]$Classification <- 5L
  plot(lsp, color = "Classification", col = c("red", "green"))
  plot(lsp, color = "Classification", col = c("black", "green"))
#+end_src


Archived entries from file /home/erker/git/hgt/hgt.org


* find the best set of parameters
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-17 Thu 16:15
  :ARCHIVE_FILE: ~/git/hgt/hgt.org
  :ARCHIVE_OLPATH: Methods/2016 lidar/testing finding trees
  :ARCHIVE_CATEGORY: hgt
  :ARCHIVE_ITAGS: work allo
  :END:
#+begin_src R
  intensity <- seq(20, 100, 20)
  intensity <- c(100)
  th1_p <- seq(2,15,1)
  th2_p <- c(4)
  k <- c(6,7,8,9,11,13,15)
  d <- expand.grid(intensity, th1_p, th2_p, k)

  mapply(function(i, t1, t2, k) {
      l <- readLAS("test2016.las", filter = "-drop_z_below 6")
      ls <- lasdetectshape(l, shp_line(th1 = t1, k = k), "Colinear")
      lsp <- lasdetectshape(ls, shp_plane(th1 = t1, th2 = t2, k = k), "Coplanar")
      lsp@data[(!lsp@data$Coplanar) & (!lsp@data$Colinear) & (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1) & (lsp@data$Intensity < i)]$Classification <- 5L
      lt <- lasfilter(lsp, Classification == 5L)
      chm <- grid_canopy(lt, res = 3, p2r(1))
      png(paste0("figs/",i,"_",t1, "_", t2, "_", k, ".png"))
      plot(chm)
      dev.off()
  },
  d$Var1, d$Var2, d$Var3, d$Var4)
#+end_src

#+RESULTS:



* OLD WAY:
:PROPERTIES:
:ARCHIVE_TIME: 2019-10-25 Fri 10:32
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/creating normalized lidar and doing best to filter out tree points/2005 lidar
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:



chm, quick and easy algorithm.  this does seem to miss some trees
though. because I filter by multiple returns, but its probably worth it to miss
all the buildings
#+begin_src R
  library(lidR)
  ctg2005norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/")
  opt_output_files(ctg2005norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/{ORIGINALFILENAME}_chm8"
  opt_filter(ctg2005norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0"
  grid_canopy(ctg2005norm, 3, p2r(2)) 
#+end_src


#+BEGIN_SRC sh
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/
gdalbuildvrt chm4.vrt *chm4.tif
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" chm4.vrt chm4.tif
#+END_SRC

#+RESULTS:
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |
|                                                Input | file | size  | is | 15712, | 11538 |
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |

silva 2016 seems to do better than dalponte2016, apply to all the
rasters
#+begin_src R
  library(lidR)
  library(stringr)
  files <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/", 
                      pattern = ".*tile[0-9]{3}_ground_normalized_chm8.tif",
                      full.names = T)

                                          #remove tile 008, 009, 017,025,031-034 because they doesn't overlap with tree inventory
  files <- files[-c(8,9,17,25,31,32,33,34)]


  lapply(files, function(f) {
      tile <- str_extract(f, "tile[0-9]{3}")
      r <- raster(f)
      proj4string(r) <- "+init=epsg:7599"
      ttops <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
      ttops <- spTransform(ttops, "+init=epsg:7599")
      crowns = silva2016(r, ttops, max_cr_factor = .99)()
      writeRaster(crowns, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/",tile,"_tree_polys.tif"), overwrite = T)
  }
  )

#+end_src


#+BEGIN_SRC sh 
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/

gdalbuildvrt tree_polys.vrt *tree_polys.tif

#+END_SRC

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.

A slightly different tac, avoiding the issue of rasterizing which can
mess with resolution of things
#+begin_src R

  library(lidR)
  ctg2005norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/")
  opt_output_files(ctg2005norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/{ORIGINALFILENAME}_trees"
  opt_filter(ctg2005norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0"
  ttops <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  ttops <- spTransform(ttops, "+init=epsg:7599")
  chm <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/chm4.tif")
  algo <- silva2016(chm, ttops, max_cr_factor = .99)
  lastrees(ctg2005norm, algo)
#+end_src


#+begin_src R
  library(lidR)
  l <- readLAS("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/tile014_ground_normalized.las",
               filter = "-drop_single -drop_z_above 200 -drop_z_below 0")

  algo = pitfree(thresholds = c(0,10,20,30,40,50), subcircle = 2, max_edge = c(3, 1.5))
  chm  = grid_canopy(l, 3, algo)
  plot(chm, col = height.colors(50))
#+end_src

#+RESULTS:



#+begin_src R
hulls  = tree_hulls(las, func = .stdmetrics)
spplot(hulls, "Z")
#+end_src


#+begin_src R
  crowns <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tile014_tree_polys.tif")
  e <- drawExtent()
  ce <- crop(crowns, e)
  p <- rasterToPolygons(ce, dissolve = TRUE)
#+end_src




assign the maximum tree height to each tree polygon
#+begin_src R
    library(raster)

    polys <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/", 
                        pattern = ".*tile[0-9]{3}_tree_polys.tif",
                        full.names = T)

    lapply(polys, function(poly) {
        tile <- str_extract(poly, "tile[0-9]{3}")
        tile <- str_extract(tile, "[0-9]{3}")
        polyr <- raster(poly)
        height <- raster(paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tile",tile,"_ground_normalized_chm6.tif"))

        z <- zonal(height, polyr, max)

        maxheight <- reclassify(polyr, z, filename = paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tile",tile,"_max_height.tif"),
                                overwrite = T)
    })

#+end_src

combine all max tree heights into one 2005 max tree height raster

#+BEGIN_SRC sh

cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/

gdalbuildvrt max_height_2005.vrt *_max_height.tif

gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" max_height_2005.vrt max_height_2005.tif

#+END_SRC

#+RESULTS:
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |
|                                                Input | file | size  | is | 18285, | 13055 |
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |


* old way extracting heights with chm.
:PROPERTIES:
:ARCHIVE_TIME: 2019-10-30 Wed 09:30
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/extract heights from normalized lidar at location of trees/clip lidar to tree buffers and extract tallest return
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R


  res <- lapply(years, function(year) {
      in.dir <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_",year,"_heights/all_chm/")
      fs <- list.files(in.dir,
                       pattern = ".*.tif$")
      out <- lapply(fs, function(f) {
          r.v <- velox(paste0(in.dir, f))
          o <- r.v$extract(sp = p)
          o <- unlist(lapply(o, function(x) max(x, na.rm = T)))
          o
      })
      hgt <- apply(do.call("cbind",out),1, max)
      saveRDS(hgt, paste0("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_",year,".rds"))
      hgt
  })


#+end_src


* this is old way with CHM extracted heights assign heights to trees
:PROPERTIES:
:ARCHIVE_TIME: 2019-10-31 Thu 12:19
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/extract heights from normalized lidar at location of trees
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R
  trees@data$height2005 <- readRDS("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_2005.rds")
  trees@data$height2009 <- readRDS("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_2009.rds")
  trees@data$height2016 <- readRDS("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_2016.rds")
#  shapefile(trees, "/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/tree_sample_wHeight.shp")
#+end_src

#+RESULTS:

testing with subset
#+begin_src R
dir <- "/home/erker/hgt_data/"
treesa <- shapefile(paste0(dir,"/madison_tree_inventories/MadisonTrees_WithAttributes.shp"))
  treesa <- spTransform(treesa, crs("+init=epsg:7599"))
  e <- new("Extent", xmin = 826616.082997855, xmax = 828596.309091884, 
           ymin = 485978.641378534, ymax = 487311.522306307)

tae <- crop(treesa, e)

  tae@data$height2005 <- readRDS(paste0(dir, "/madison_tree_inventories/hgt/height_2005.rds"))
  tae@data$height2009 <- readRDS(paste0(dir, "/madison_tree_inventories/hgt/height_2009.rds"))
  tae@data$height2016 <- readRDS(paste0(dir, "/madison_tree_inventories/hgt/height_2016.rds"))


#+end_src

#+RESULTS:



* 820 reproducible example with and without assigning to water
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-04 Mon 09:49
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/creating normalized lidar and doing best to filter out tree points/2017 lidar
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:

Picnic Point on lake Mendota, an extreme example.

#+BEGIN_SRC sh :session a

cd ~/hgt_data/reproducibleexample/
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/0820_esri.las

#+END_SRC


#+begin_src R
  library(lidR)
  l <- readLAS("/home/erker/hgt_data/reproducibleexample/0820_esri.las")
  plot(l, color = "Classification")


#    system.time(ln_keepwater <- lasnormalize(l, tin()))


  l@data$Classification[l@data$Classification == 9] <- 2L

  system.time(ln_removewater <- lasnormalize(l, tin()))


#+end_src

#+RESULTS:
: Loading required package: raster
: Loading required package: sp
: lidR 2.2.0 using 4 threads. Help on <gis.stackexchange.com>. Bug report on <github.com/Jean-Romain/lidR>.
: 
: Delaunay rasterization[======--------------------------------------------] 13% (4 threads)Delaunay rasterization[=======-------------------------------------------] 14% (4 threads)Delaunay rasterization[=======-------------------------------------------] 15% (4 threads)Delaunay rasterization[========------------------------------------------] 16% (4 threads)Delaunay rasterization[========------------------------------------------] 17% (4 threads)Delaunay rasterization[=========-----------------------------------------] 18% (4 threads)Delaunay rasterization[=========-----------------------------------------] 19% (4 threads)Delaunay rasterization[==========----------------------------------------] 20% (4 threads)Delaunay rasterization[==========----------------------------------------] 21% (4 threads)Delaunay rasterization[===========---------------------------------------] 22% (4 threads)Delaunay rasterization[===========---------------------------------------] 23% (4 threads)Delaunay rasterization[============--------------------------------------] 24% (4 threads)Delaunay rasterization[============--------------------------------------] 25% (4 threads)Delaunay rasterization[=============-------------------------------------] 26% (4 threads)Delaunay rasterization[=============-------------------------------------] 27% (4 threads)Delaunay rasterization[==============------------------------------------] 28% (4 threads)Delaunay rasterization[==============------------------------------------] 29% (4 threads)Delaunay rasterization[===============-----------------------------------] 30% (4 threads)Delaunay rasterization[===============-----------------------------------] 31% (4 threads)Delaunay rasterization[================----------------------------------] 32% (4 threads)Delaunay rasterization[================----------------------------------] 33% (4 threads)Delaunay rasterization[=================---------------------------------] 34% (4 threads)Delaunay rasterization[=================---------------------------------] 35% (4 threads)Delaunay rasterization[==================--------------------------------] 36% (4 threads)Delaunay rasterization[==================--------------------------------] 37% (4 threads)Delaunay rasterization[===================-------------------------------] 38% (4 threads)Delaunay rasterization[===================-------------------------------] 39% (4 threads)Delaunay rasterization[====================------------------------------] 40% (4 threads)Delaunay rasterization[====================------------------------------] 41% (4 threads)Delaunay rasterization[=====================-----------------------------] 42% (4 threads)Delaunay rasterization[=====================-----------------------------] 43% (4 threads)Delaunay rasterization[======================----------------------------] 44% (4 threads)Delaunay rasterization[======================----------------------------] 45% (4 threads)Delaunay rasterization[=======================---------------------------] 46% (4 threads)Delaunay rasterization[=======================---------------------------] 47% (4 threads)Delaunay rasterization[========================--------------------------] 48% (4 threads)Delaunay rasterization[========================--------------------------] 49% (4 threads)Delaunay rasterization[=========================-------------------------] 50% (4 threads)Delaunay rasterization[=========================-------------------------] 51% (4 threads)Delaunay rasterization[==========================------------------------] 52% (4 threads)Delaunay rasterization[==========================------------------------] 53% (4 threads)Delaunay rasterization[===========================-----------------------] 54% (4 threads)Delaunay rasterization[===========================-----------------------] 55% (4 threads)Delaunay rasterization[============================----------------------] 56% (4 threads)Delaunay rasterization[============================----------------------] 57% (4 threads)Delaunay rasterization[=============================---------------------] 58% (4 threads)Delaunay rasterization[=============================---------------------] 59% (4 threads)Delaunay rasterization[==============================--------------------] 60% (4 threads)Delaunay rasterization[==============================--------------------] 61% (4 threads)Delaunay rasterization[===============================-------------------] 62% (4 threads)Delaunay rasterization[===============================-------------------] 63% (4 threads)Delaunay rasterization[================================------------------] 64% (4 threads)Delaunay rasterization[================================------------------] 65% (4 threads)Delaunay rasterization[=================================-----------------] 66% (4 threads)Delaunay rasterization[=================================-----------------] 67% (4 threads)Delaunay rasterization[==================================----------------] 68% (4 threads)Delaunay rasterization[==================================----------------] 69% (4 threads)Delaunay rasterization[===================================---------------] 70% (4 threads)Delaunay rasterization[===================================---------------] 71% (4 threads)Delaunay rasterization[====================================--------------] 72% (4 threads)Delaunay rasterization[====================================--------------] 73% (4 threads)Delaunay rasterization[=====================================-------------] 74% (4 threads)Delaunay rasterization[=====================================-------------] 75% (4 threads)Delaunay rasterization[======================================------------] 76% (4 threads)Delaunay rasterization[======================================------------] 77% (4 threads)Delaunay rasterization[=======================================-----------] 78% (4 threads)Delaunay rasterization[=======================================-----------] 79% (4 threads)Delaunay rasterization[========================================----------] 80% (4 threads)Delaunay rasterization[========================================----------] 81% (4 threads)Delaunay rasterization[=========================================---------] 82% (4 threads)Delaunay rasterization[=========================================---------] 83% (4 threads)Delaunay rasterization[==========================================--------] 84% (4 threads)Delaunay rasterization[==========================================--------] 85% (4 threads)Delaunay rasterization[===========================================-------] 86% (4 threads)Delaunay rasterization[===========================================-------] 87% (4 threads)Delaunay rasterization[============================================------] 88% (4 threads)Delaunay rasterization[============================================------] 89% (4 threads)Delaunay rasterization[=============================================-----] 90% (4 threads)Delaunay rasterization[=============================================-----] 91% (4 threads)Delaunay rasterization[==============================================----] 92% (4 threads)Delaunay rasterization[==============================================----] 93% (4 threads)Delaunay rasterization[===============================================---] 94% (4 threads)Delaunay rasterization[===============================================---] 95% (4 threads)Delaunay rasterization[================================================--] 96% (4 threads)Delaunay rasterization[================================================--] 97% (4 threads)Delaunay rasterization[=================================================-] 98% (4 threads)Delaunay rasterization[=================================================-] 99% (4 threads)Delaunay rasterization[==================================================] 100% (4 threads)   user  system elapsed 
:  23.818   0.489  14.264 
: Warning messages:
: 1: There were 6 degenerated ground points. Some X Y Z coordinates were repeated. They were removed. 
: 2: There were 91 degenerated ground points. Some X Y coordinates were repeated but with different Z coordinates. min Z were retained.




* extract heights from normalized lidar at location of trees---------  i SHOULD probably do this from chm for speed 
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-04 Mon 12:35
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: accidentally deleted
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
  

 read in points and make a buffer of 5 ft radius around each point (they are
  almost always in the center of the tree)
 for each year lidar, clip to buffer/polygon and extract the maximum height within that buffer and assign it to the tree

Really I should come up with some clever rules for thinning out the
tree dataset.  If I have small trees next to big trees, the small
trees look like they are tall, but really they are being overtopped by
the big trees.

 consider making buffers based on the trees dbh.  if two trees
  intersect, keep the bigger of the two.


Also need to beware of non street trees overhanging street trees.

*** make tree buffer shapefile, excluding neighbors that are too close with a lower DBH.
#+begin_src R
  library(raster)
  library(rgeos)
  library(dplyr)

  trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")
  trees <- spTransform(trees, crs("+init=epsg:7599"))
  trees@data <-   select(trees@data, UID, DBH)

  p <- gBuffer(trees, width = 8, byid = T)
  pa <- aggregate(p)
  pd <- disaggregate(pa)

  o <- over(pd, trees, returnList = T)

  uids <- lapply(o, function(e) {
      set.seed(1)
      sample(e$UID[e$DBH == max(as.numeric(e$DBH), na.rm = T)], 1) # randomly select 1 of many
  })

  po <- p[p@data$UID %in% unlist(uids),]

  shapefile(po, "/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp", overwrite = T)

#+end_src

*** clip lidar to tree buffers and extract tallest return
**** 2009
#+begin_src R
  library(doParallel)
  library(foreach)
  library(lidR)
  library(dplyr)
  library(stringr)

  b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
  b <- spTransform(b, crs("+init=epsg:7599"))
  b@data <- select(b@data, UID)

  fl <- list.files("/home/erker/hgt_data/madison_lidar_2009_heights/trees_lidar",
                   pattern = ".*.las",
                   full.names = T)


  # crop the polygons so that a huge object doesn't need to be sent to each node
  cl <- makeCluster(4)
  registerDoParallel(cl)
  out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
      l <- readLAS(f)
      proj4string(l) <- "+init=epsg:7599"
      bc <- crop(b, extent(l))
      if(!is.null(bc)) {
          i <- str_extract(f, "lc2t[0-9]+")
          shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"), overwrite = T)
      }
  }
  closeAllConnections()

  rm(b)

  # tile 209_normalized doesn't have any trees in it. So I drop fl index 69.

  cl <- makeCluster(7)
  registerDoParallel(cl)
  out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {  
      l <- readLAS(f)
     i <- str_extract(f, "lc2t[0-9]+")
      bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"))
      lc <- lasclip(l, bc)
      m <- lapply(lc, function(ls) {
          max(ls@data$Z)
      })
      o <- cbind(UID = bc@data$UID, height_2009 = unlist(m))
      saveRDS(o, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009/",i,".rds"))
  }

  closeAllConnections()

#+end_src


save as heights
#+begin_src R
  hs <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009/", full.names = T)
  hs <- lapply(hs, readRDS)

  h2009 <- do.call("rbind", hs)

  saveRDS(h2009, "/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
#+end_src

**** 2016
#+begin_src R
  library(doParallel)
  library(foreach)
  library(lidR)
  library(dplyr)
  library(stringr)

  b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
  b <- spTransform(b, crs("+init=epsg:7599"))
  b@data <- select(b@data, UID)

  fl <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/trees_lidar_linefiltered/",
                   pattern = ".*.las",
                   full.names = T)


  # crop the polygons so that a huge object doesn't need to be sent to each node
  cl <- makeCluster(4)
  registerDoParallel(cl)
  out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
      l <- readLAS(f)
      proj4string(l) <- "+init=epsg:7599"
      bc <- crop(b, extent(l))
      i <- str_extract(f, "[0-9]+_norm")
      shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2016cropped/",i,".shp"))
  }

  closeAllConnections()

  rm(b)

  # tile 209_normalized doesn't have any trees in it. So I drop fl index 69.

  cl <- makeCluster(7)
  registerDoParallel(cl)
  out <- foreach(f = fl[-69][11:110][60], .packages = c("stringr","lidR")) %dopar% {  
      l <- readLAS(f)
      i <- str_extract(f, "[0-9]+_norm")
      bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2016cropped/",i,".shp"))
      lc <- lasclip(l, bc)
      m <- lapply(lc, function(ls) {
          max(ls@data$Z)
      })
      o <- cbind(UID = bc@data$UID, height_2016 = unlist(m))
      saveRDS(o, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2016/",i,".rds"))
  }

  closeAllConnections()

#+end_src

save as heights
#+begin_src R
  hs <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2016/", full.names = T)
  hs <- lapply(hs, readRDS)

  h2016 <- do.call("rbind", hs)

  saveRDS(h2016, "/home/erker/hgt_data/madison_tree_inventories/hgt/height_2016.rds")
#+end_src


*** join heights to trees

#+begin_src R
  height_2009 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")



#+end_src

#+begin_src R
  library(raster)
  library(dplyr)

  trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

  tb <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")

  height_2009 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
  height_2016 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2016.rds")

  height_2009 <- as.data.frame(height_2009, stringsAsFactors = F) %>%
      mutate(height_2009 = as.numeric(height_2009))

  height_2009 <- height_2009 %>%
      group_by(UID) %>%
      summarize(height_2009 = max(height_2009, na.rm = T))

  height_2016 <- as.data.frame(height_2016, stringsAsFactors = F) %>%
      mutate(height_2016 = as.numeric(height_2016))

  height_2016 <- height_2016 %>%
      group_by(UID) %>%
      summarize(height_2016 = max(height_2016, na.rm = T))


  heights <- left_join(height_2009, height_2016, by = "UID") %>%
      mutate(growth = height_2016 - height_2009)


  trees@data <- left_join(trees@data, heights)

  shapefile(trees, "/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithHeights.shp", overwrite = T)

#+end_src

* Subset the buffer to just to those trees with a dbh greater than 20 inches. 
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-04 Mon 13:17
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
Do this for computational expediency, but also because the aviris
derived data will be more reliable.

#+begin_src R
  library(raster)
  po <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
  shapefile(po[as.numeric(po@data$DBH) > 20, ], "/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_dbhg20.shp")
#+end_src

#+RESULTS:




* TODO [2019-11-08 Fri] extract height and estimate bias for trees
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-08 Fri 09:07
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/extract lidar clouds within tree buffers
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_TODO: TODO
:ARCHIVE_ITAGS: work allo
:END:


plan [2019-11-07 Thu]:

Some of the difference in maximum height will be due to the randomness
of the sampling and due to the difference in the sample size across
years. This creates a bias in maximum height estimates. To estimate
the bias due to these factors, I bootstrapped the lidar point clouds.
I assume that for 2 adjacent collection years (i.e. 2017 and 2016;
2016 and 2009; 2009 and 2005) that they come from the same collection.
That is, all the points were acquired at the same time and that there
was no growth.  I assume footprint size is the same and all other
characteristics of the points are the same, the only difference is
that the number of pulses between years.

I will then sample from the combined lidar clouds, new clouds for each
year of the same size as the original data.  For example, if there
were 200 pulses in the 2017 cloud and 50 pulses in the 2016 cloud, I
will randomly sample with replacement 200 of the 250 pulses and assign them to a new
2017 cloud and randomly sample with replacement 50 and assign them to a new 2016
cloud. I'll then calculate the maximum of each of these clouds and
find the difference.  This is an estimate of the bias in maximum
height due to differences in sample size.

By repeating the sampling many times (say 1000), I can get an accurate
estimate of the mean bias and the variance of that bias.  For example,
there are sometimes just one or two points from a tree in 2005 lidar.
This means that the bias estimate will be very uncertain.  But there
is some information in those points and it is still worthwhile to keep
them.

I will then correct for the bias by adding the bias to the observed
maximum height.  This is the expected maximum height.  I'll then
perform a weighted regression to estimate height growth rate, where
corrected heights are weighted by the inverse of the bias variance.
That is, the observations with an imprecise bias estimate were
weighted less.

Included implicitly in this method is the canopy structure for each tree.

I combined the two years because this makes sense.  We need the full
sample of points from which we resample from.  Also, later years,
while they usually have more points, don't always have the highest points.




maybe don't worry about it too much.  see if filtering down to a
decent number of points for 2005 gives appropriate biases.

it's never going to be perfect (it can't).



read roussel's paper.  he required a histogram from a very high res.
Do I have a very high res area in 2017 (overlap) that I can use and
assume applies to all trees?  Or maybe a few of them?  2017 is high
res, but still not high enough to know i'm not missing any ranches.
2009 and 2016 tenney oak have higher branches than the 2017.

correcting for pulse density may not correct quite right because of
differences in footprint size....

how to get footprint size?


I think the histogram approach is esstianlly the same as my
resampling.  resampling may be more precise because the lack of
binning, but you need to resample many times.  

The uncertainty in the bias is also important.  Especially wehn few
points.  But less important if averaging across many treees.



#+begin_src R
  library(ggthemes)
      terk <- list(theme_solarized_2(base_size = 16) +
                   theme(legend.title = element_text(size = 10),
                         legend.text = element_text(size = 8),
                         axis.ticks = element_line(size = .3),
                         rect = element_rect(fill = "transparent"),
                         panel.background = element_rect(fill = "transparent"),
                         panel.grid.major = element_line(color = "#839496", size = .1),
                         panel.grid.minor = element_line(color = "#839496", size = .05)))

  base1 <- "#93a1a1"
  blue <- scale_color_solarized("blue")

  red <- solarized_pal("red")(1)

#+end_src

#+RESULTS:


#+begin_src R
  library(raster)
  library(dplyr)
  library(stringr)
  library(foreach)
  library(doParallel)

  b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
  b@data <- select(b@data, UID)


                                          #uids <- c("ST14603", "ST14604", "ST14599", "ST14547")

  fs2017 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_las/", full.names = F)
  fs2016 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2016_las/", full.names = F)
  fs2009 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/", full.names = F)
  fs2005 <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2005_las/", full.names = F)

                                          #make sure there is only one of each trees
  uids2017 <- str_extract(fs2017, "^[A-Za-z0-9]+")
  head(sort(table(uids2017), decreasing = T))

  uids2016 <- str_extract(fs2016, "^[A-Za-z0-9]+")
  head(sort(table(uids2016), decreasing = T))

  uids2009 <- str_extract(fs2009, "^[A-Za-z0-9]+")
                                          #head(sort(table(uids2009), decreasing = T), 1800)
  head(sort(table(uids2009), decreasing = T))

  uids2005 <- str_extract(fs2005, "^[A-Za-z0-9]+")
  head(sort(table(uids2005), decreasing = T))

                                          # 2009 has more than one lidar file per tree.  around 1700- 1800 duplicates or triplicates.

  l1 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST01245_lc2t70836.las")
  l2 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST01245_lc2t70835.las")
  l3 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2009_las/ST01245_lc2t70826.las")

                                          #They are identical so I'll just select one of the duplicates to use and ignore the others.  This should be fixed upstream in the future.


                                          # put all the uids and las paths for ecah year in a dataframe to loop through

  uids2017 <- data.frame(str_match(fs2017, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
  colnames(uids2017) <- c("path2017", "uid")

  uids2016 <- data.frame(str_match(fs2016, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
  colnames(uids2016) <- c("path2016", "uid")

  uids2009 <- data.frame(str_match(fs2009, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
  colnames(uids2009) <- c("path2009", "uid")
                                          # remove duplicates for 2009
  uids2009 <- uids2009 %>% group_by(uid) %>% summarize(path2009 = path2009[1])


  uids2005 <- data.frame(str_match(fs2005, "([A-Za-z0-9]+)_.*"), stringsAsFactors = F)
  colnames(uids2005) <- c("path2005", "uid")


  uids_df <- left_join(uids2017, uids2016)
  uids_df <- left_join(uids_df, uids2009)
  uids_df <- left_join(uids_df, uids2005)



                                          # I wrote the code below to handle missing cases, but I'm going to filter out to just the complete cases (observations for every year).

  uids_df <- uids_df[complete.cases(uids_df),]



  treelasdir <- "/home/erker/hgt_data/madison_tree_inventories/hgt/"
  reps <- 1000

  cl <- makeCluster(6)
  registerDoParallel(cl)

  out <- foreach(i = (1:nrow(uids_df)), .packages = c("stringr","lidR", "rgeos"), .combine = "rbind") %dopar% {  

      path2017 <- paste0(treelasdir, "trees_2017_las/", uids_df$path2017[i])
      path2016 <- paste0(treelasdir, "trees_2016_las/", uids_df$path2016[i])
      path2009 <- paste0(treelasdir, "trees_2009_las/", uids_df$path2009[i])
      path2005 <- paste0(treelasdir, "trees_2005_las/", uids_df$path2005[i])

      l2017 <- readLAS(path2017, select = "")
      l2017@data$Z <-     l2017@data$Z  * .3048  # convert to meters
      n17 <- nrow(l2017@data)
      emp_max2017 <- max(l2017@data$Z)

      l2016 <- readLAS(path2016, select = "")
      l2016@data$Z <-     l2016@data$Z  * .3048  # convert to meters
      n16 <- nrow(l2016@data)
      emp_max2016 <- max(l2016@data$Z)

      l2009 <- readLAS(path2009, select = "")
      l2009@data$Z <-     l2009@data$Z  * .3048  # convert to meters
      n09 <- nrow(l2009@data)
      emp_max2009 <- max(l2009@data$Z)

      l2005 <- readLAS(path2005, select = "")
      l2005@data$Z <-     l2005@data$Z  * .3048  # convert to meters
      n05 <- nrow(l2005@data)
      emp_max2005 <- max(l2005@data$Z)


                                          # here is where I am [2019-11-07 Thu]  I need to think of which clouds to combine for each calculation of bias?  Should I combine all the clouds??  The years that are adjacent?
    # combine all of them.  this gives a pulse bias.  I may have to do a footprint correction later.


      Z <- c(l2017@data$Z, l2016@data$Z, l2009@data$Z, l2005@data$Z)
      mZ <- max(Z)

      bias_17 <- replicate(reps, mZ - max(sample(Z, n17, replace = T)))
      bias_16 <- replicate(reps, mZ - max(sample(Z, n16, replace = T)))
      bias_09 <- replicate(reps, mZ - max(sample(Z, n09, replace = T)))
      bias_05 <- replicate(reps, mZ - max(sample(Z, n05, replace = T)))

      mean_bias17 <- mean(bias_17)
      var_bias17 <- var(bias_17)

      mean_bias16 <- mean(bias_16)
      var_bias16 <- var(bias_16)

      mean_bias09 <- mean(bias_09)
      var_bias09 <- var(bias_09)

      mean_bias05 <- mean(bias_05)
      var_bias05 <- var(bias_05)



      res <- data.frame(uid = uids_df[i,"uid"],
               emp_max2017 = emp_max2017,
               n2017 = n17,
               emp_max2016 = emp_max2016,
               n2016 = n16,
               emp_max2009 = emp_max2009,
               n2009 = n09,
               emp_max2005 = emp_max2005,
               n2005 = n05,
               mean_bias17 = mean_bias17,
               mean_bias16 = mean_bias16,
               mean_bias09 = mean_bias09,
               mean_bias05 = mean_bias05,
               var_bias17 = var_bias17,
               var_bias16 = var_bias16,
               var_bias09 = var_bias09, 
               var_bias05 = var_bias05, 
               stringsAsFactors = F)

      saveRDS(res, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias/", uids_df[i,"uid"], ".rds"))
      return(res)

  }
  closeAllConnections()


#+end_src

or read in the data from the saved

#+begin_src R

  saveRDS(out, "/home/erker/hgt_data/madison_tree_inventories/hgt/extracted_heights_bias.rds")


  h <- out

#+end_src

#+RESULTS:

which trees have many points
#+begin_src R 
head(arrange(h, desc(n2017)))
#+end_src

#+RESULTS:
#+begin_example
      uid emp_max2017 n2017 emp_max2016 n2016 emp_max2009 n2009 emp_max2005
1 ST16124    13.78915   421    12.87170    24    10.95451    19    8.708136
2 ST31236    18.23100   410    17.61439    23    16.78534    23   16.873728
3 ST12970    15.06535   393    14.83462    31    12.26515    21   12.313920
4 ST27840    17.63756   392    17.34617    68    16.93774    46   16.282416
5 ST82950    14.87668   390    14.78280    55    13.17650    12   11.231880
6 ST04014    12.44285   387    12.28954    15     8.53440    11    6.498336
  n2005 mean_bias17 mean_bias16 mean_bias09 mean_bias05   var_bias17
1     2  0.03123286   0.3240487   0.3859301   1.6123274 0.0015629385
2     4  0.06292474   0.7194618   0.6904741   1.7945636 0.0063961600
3     2  0.02155850   0.2055775   0.2801795   1.2459188 0.0006976045
4     3  0.02727716   0.1442533   0.1883932   0.9540429 0.0019947705
5     3  0.01361968   0.1140659   0.3488460   1.1123639 0.0006723725
6     2  0.04831415   0.3124136   0.3817020   1.1251857 0.0037936329
   var_bias16 var_bias09 var_bias05
1 0.038510741 0.05351206  1.8005808
2 0.225532995 0.21412749  1.2677683
3 0.033280425 0.05185359  1.6372845
4 0.010350752 0.01487389  0.6407851
5 0.007342887 0.08198063  0.7616459
6 0.038738684 0.05972368  0.5394748
#+end_example

#+begin_src R
  library(lidR)
  lst16124 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_las/ST16124_1065.las")
  plot(lst16124)

  lst31236 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_las/ST31236_0920.las")
  plot(lst31236)

  lst17111 <- readLAS("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2017_las/ST17111_0823.las")
  plot(lst17111)

#+end_src

#+RESULTS:



#+begin_src R :exports results :results graphics :file figs/heights_lidar_extract.png :width 700 :height 500
library(ggplot2)
    library(tidyr)
  n <- 10

      d <- h %>%
          select(emp_max2017, emp_max2016, emp_max2009, emp_max2005, uid) %>%
        sample_n(n) %>%
        gather(year, height, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

  ggplot(d, aes(x = year, y = height, group = uid)) + geom_line()
#+end_src

#+RESULTS:
[[file:figs/heights_lidar_extract.png]]


correct heights and add bias uncertainty
#+begin_src R

        hc <- h %>%
          mutate(cor_max2017 = emp_max2017 + mean_bias17,
                 cor_max2016 = emp_max2016 + mean_bias16,
                 cor_max2009 = emp_max2009 + mean_bias09,
                 cor_max2005 = emp_max2005 + mean_bias05,
                 sd17 = sqrt(var_bias17),
                 sd16 = sqrt(var_bias16),
                 sd09 = sqrt(var_bias09),
                 sd05 = sqrt(var_bias05))

    h_corheight <-   hc %>% select(uid, cor_max2017, cor_max2016, cor_max2009, cor_max2005) %>%
        gather(year, cor_height, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

    h_empheight <-   hc %>% select(uid, emp_max2017, emp_max2016, emp_max2009, emp_max2005) %>%
        gather(year, emp_height, -uid) %>%
        mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))

    h_sdbias <-   hc %>% select(uid, sd17, sd16, sd09, sd05) %>%
        gather(year, sdbias, -uid) %>%
        mutate(year = as.numeric(paste0("20",str_extract(year, "[0-9]{2}"))))


  hc <- left_join(h_corheight, h_sdbias)

  hc <- left_join(hc, h_empheight)

#+end_src

#+RESULTS:
: 
: Joining, by = c("uid", "year")
: 
: Joining, by = c("uid", "year")

On average, I'd say that this correction looks pretty good!
#+begin_src R :exports results :results graphics :file figs/correction.png :width 1300 :height 800 :bg transparent :res 100

  n <- 40
  set.seed(2)
  uids <- sample(unique(hc$uid), n)
  hcf <- filter(hc, uid %in% uids)

    ggplot(data = hcf) + 
        geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
        geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sdbias, ymin = cor_height - 1.96 *sdbias, x = year), color = red) + 
        facet_wrap(~uid, ncol = 8) +
        terk +
        scale_x_continuous(breaks = c(2005,2009, 2017)) +
        theme(axis.text.x = element_text(angle = 60, hjust = 1))


#+end_src

#+RESULTS:
[[file:figs/correction.png]]


#+begin_src R :exports results :results graphics :file figs/correction_st16209.png :width 300 :height 200 :bg transparent :res 100
  hcf <- filter(hc, uid == "ST16209")

    ggplot(data = hcf) + 
        geom_line(aes(y = emp_height, x = year, group = uid), color = base1) +
        geom_line(aes(y = cor_height, x = year, group = uid), color = red) +
        geom_linerange(aes(ymax = cor_height + 1.96 * sdbias, ymin = cor_height - 1.96 *sdbias, x = year), color = red) + 
#        facet_wrap(~uid, ncol = 1) +
        terk +
        scale_x_continuous(breaks = c(2005, 2009, 2017)) 



#+end_src

#+RESULTS:
[[file:figs/correction_st16209.png]]


center hc
#+begin_src R
hc$year <- hc$year - 2005
#+end_src

#+RESULTS:

Good example of why weights are needed
#+begin_src R
dt <- filter(hc, uid == "ST16209")
mw <- lm(cor_height ~ year, weights = 1/ sdbias^2, data = dt)
mnw <- lm(cor_height ~ year, data = dt)
summary(mw)
summary(mnw)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = cor_height ~ year, data = dt, weights = 1/sdbias^2)

Weighted Residuals:
      1       2       3       4 
 0.4127 -0.4735 -0.1106  0.6957 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept) 15.82650    0.54919  28.818   0.0012 **
year         0.17992    0.05737   3.136   0.0884 . 
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.6674 on 2 degrees of freedom
Multiple R-squared:  0.831,	Adjusted R-squared:  0.7465 
F-statistic: 9.834 on 1 and 2 DF,  p-value: 0.08841

Call:
lm(formula = cor_height ~ year, data = dt)

Residuals:
      1       2       3       4 
 0.5076 -0.1620 -1.0773  0.7317 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)   
(Intercept) 17.49770    0.83920  20.851  0.00229 **
year         0.01652    0.10012   0.165  0.88412   
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.995 on 2 degrees of freedom
Multiple R-squared:  0.01343,	Adjusted R-squared:  -0.4799 
F-statistic: 0.02722 on 1 and 2 DF,  p-value: 0.8841
#+end_example



Coeffiecient estimates are better than if a point were dropped, and
better than if you assume all points contain equal information.



Fitting many weighted regressions and getting estimates
#+begin_src R

        lms <- list()
        uids <- unique(hc$uid)
      for(i in 1:length(uids)) {
            lms[[i]] <- lm(cor_height ~ year, data = subset(hc, uid == uids[i]))
        }
  names(lms) <- uids
    saveRDS(lms, "/home/erker/hgt_data/madison_tree_inventories/hgt/growth_rates_lms.rds")
#+end_src

#+RESULTS:

#+begin_src R
      growth.rates <- sapply(lms, function(lm) coef(lm)[2])
      growth.rates.se <- sapply(lms, function(lm) summary(lm)$coefficients[2,2])
      est.hgt.at2005 <- sapply(lms, function(lm) coef(lm)[1])
      growth.rates <- data.frame(uid = names(lms), 
                                 growth.rate = growth.rates, 
                                 growth.rate.se = growth.rates.se, 
                                 est.hgt.at2005 = est.hgt.at2005, stringsAsFactors = F)
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/growthrates_lm.png :width 1000 :res 120 :bg transparent
  ggplot(growth.rates, aes(x = growth.rate)) + geom_histogram(binwidth = .03, color = base1) +
    terk +
    scale_x_continuous("growth rate (ft/year)")
#+end_src

#+RESULTS:
[[file:figs/growthrates_lm.png]]

#+begin_src R :exports results :results graphics :file figs/growthrates_lm_clip.png :width 1000 :res 120 :bg transparent
  ggplot(growth.rates, aes(x = 100 * growth.rate)) + geom_histogram(binwidth = 2, color = base1) +
    terk +
    scale_x_continuous("growth rate (cm/year)", lim = c(-100,100), breaks = c(-100,-50,0, round(mean(growth.rates$growth.rate * 100),1), 50, 100)) +
    geom_vline(data = growth.rates, aes(xintercept = mean(growth.rate)*100), color = red)
#+end_src

#+RESULTS:
[[file:figs/growthrates_lm_clip.png]]

#+begin_src R :exports results :results graphics :file figs/rate_by_int.png :bg transparent :width 1000 :res 100
hn <- left_join(h, growth.rates)

  ggplot(hn, aes(x = emp_max2005, y = growth.rate)) + geom_point(color = base1, size = .5, alpha = .5) + terk +
    geom_smooth()
#+end_src

#+RESULTS:
[[file:figs/rate_by_int.png]]


#+begin_src R
saveRDS(hn, "/home/erker/hgt_data/madison_tree_inventories/hgt/lidarextractedheights_growthrates.rds")
#+end_src

#+RESULTS:

join growth rates to trees

#+begin_src R
library(raster)
trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")



#+end_src










???

#+begin_src R
library(lme4)

m1 <- lmer(cor_height ~ year + (1 | uid), data = hc, weights = 1/ sdbias^2)
#+end_src

#+RESULTS:






* comparing CHMs - more for visualization in 2d
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-18 Mon 15:54
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
** difference in chm 2016 - 2009

#+begin_src R
  library(raster)
  r2016 <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/height_norm_2016.tif")
  r2009 <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/height_norm_2009.tif")
  diff <- r2016 - r2009
  writeRaster(diff, "/media/erker/DATA_ERKER/dd/hgt/difference_height_all_2016-2009.tif")

#+end_src

#+RESULTS:
: Error in .local(.Object, ...) : 
: 
: Error in .rasterObjectFromFile(x, band = band, objecttype = "RasterLayer",  : 
:   Cannot create a RasterLayer object from this file. (file does not exist)
: Error: object 'r2009' not found

** difference in tree chm 2016 - 2009

#+begin_src R
    library(raster)
    r2016 <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2016_heights/tree_height_norm_2016.tif")
    r2009 <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2009_heights/tree_height_norm_2009.tif")
  r6e <- crop(r2016, e)
  r9e <- crop(r2009, e)

  r6e[is.na(r6e)] <- 0
  r9e[is.na(r9e)] <- 0

  s <- stack(r6e, r9e)

    diff <- overlay(r6e, r9e, fun = function(x,y) {x - y})



    writeRaster(diff, "/media/erker/DATA_ERKER/dd/hgt/difference_height_tree_2016-2009.tif", overwrite = T)

  diff[diff == 0] <- NA

  diffsmooth <- focal(diff,  w=matrix(1/9,nrow=3,ncol=3))

  writeRaster(diffsmooth, "/media/erker/DATA_ERKER/dd/hgt/difference_height_tree_2016-2009_smoothed.tif", overwrite = T)


  r6es <- focal(r6e,  w=matrix(1/9,nrow=3,ncol=3))
  r9es <- focal(r9e,  w=matrix(1/9,nrow=3,ncol=3))

  r6t <- r6es > 6
  r9t <- r9es > 6


  difft <- overlay(r6t, r9t, fun = function(x,y) {x - y})
  writeRaster(difft, "/media/erker/DATA_ERKER/dd/hgt/difference_height_tree_2016-2009_tree_y_n.tif", overwrite = T)
#+end_src

#+RESULTS:
: Error in .local(.Object, ...) : 
: 
: Error in .rasterObjectFromFile(x, band = band, objecttype = "RasterLayer",  : 
:   Cannot create a RasterLayer object from this file. (file does not exist)
: Error: object 'r2009' not found




* see what it looks like extracting heights from chms....
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-18 Mon 15:54
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/work to get heights of trees
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:

** Use a sample of the trees

#+begin_src R
  library(velox)
  library(raster)

  p <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")

  set.seed(1)
  s <- sample(1:length(p), 20)

  ps <- p[s,]

  shapefile(ps, "/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_sub.shp", overwrite = T)

  years <- c(2005, 2009, 2010, 2016, 2017)

    res <- lapply(years, function(year) {
        in.dir <- paste0("~/hgt_data//madison_lidar_",year,"_heights/all_chm/")
        fs <- list.files(in.dir,
                         pattern = ".*.tif$")
        out <- lapply(fs, function(f) {
            r.v <- velox(paste0(in.dir, f))
            o <- r.v$extract(sp = ps)
            o <- unlist(lapply(o, function(x) max(x, na.rm = T)))
            o
        })
        hgt <- apply(do.call("cbind",out),1, max)
        cbind(hgt, UID = ps$UID)
        saveRDS(hgt, paste0("~/hgt_data/madison_tree_inventories/hgt/height_",year,".rds"))
        hgt
    })

#+end_src

** look at heights

#+begin_src R
library(ggplot2)
library(dplyr)
library(stringr)
  library(raster)
  library(tidyr)

    ps <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_sub.shp")

    height2005 <- readRDS("~/hgt_data/madison_tree_inventories/hgt/height_2005.rds")
    height2009 <- readRDS("~/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
  height2010 <- readRDS("~/hgt_data/madison_tree_inventories/hgt/height_2010.rds")
    height2016 <- readRDS("~/hgt_data/madison_tree_inventories/hgt/height_2016.rds")
  height2017 <- readRDS("~/hgt_data/madison_tree_inventories/hgt/height_2017.rds")

  ps@data$height2005 <- height2005
  ps@data$height2009 <- height2009
  ps@data$height2010 <- height2010
  ps@data$height2016 <- height2016
  ps@data$height2017 <- height2017

  d <- ps@data

  dg <- gather(d, year, height, -UID, -DBH, -Genus, -Species) %>%
      mutate(year = as.numeric(str_extract(year, "[0-9]{4}")))
#+end_src

#+RESULTS:

#+begin_src R :exports results :results graphics :file figs/test_heights.png :height 600 :width 800
#  uid.no.neg.inf <- dg %>% group_by(UID) %>% summarize(height_m = mean(height)) %>% filter(height_m != -Inf) %>% pull(UID)

    ggplot(dg, aes(x = year, y = height, group = UID)) + 
        geom_line() 
#+ 
 #     facet_wrap(~Genus) 


#+end_src

#+RESULTS:
[[file:figs/test_heights.png]]



* accidentally deleted
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-18 Mon 16:03
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
** extract heights from normalized lidar at location of trees

*** I could potentially sub sample the 2017 down to the point density of 2005 to estimate the 2005 bias, then correct for it?  
  
 - read in points and make a buffer of 5 ft radius around each point (they are
   almost always in the center of the tree)
 - for each year lidar, clip to buffer/polygon and extract the maximum height within that buffer and assign it to the tree
 
 Really I should come up with some clever rules for thinning out the
 tree dataset.  If I have small trees next to big trees, the small
 trees look like they are tall, but really they are being overtopped by
 the big trees.
 
 - consider making buffers based on the trees dbh.  if two trees
   intersect, keep the bigger of the two.
 
 
 Also need to beware of non street trees overhanging street trees.
 

*** clip lidar to tree buffers and extract tallest return
**** 2009
 #+begin_src R
   library(doParallel)
   library(foreach)
   library(lidR)
   library(dplyr)
   library(stringr)
 
   b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
   b <- spTransform(b, crs("+init=epsg:7599"))
   b@data <- select(b@data, UID)
 
   fl <- list.files("/home/erker/hgt_data/madison_lidar_2009_heights/trees_lidar",
                    pattern = ".*.las",
                    full.names = T)
 
 
   # crop the polygons so that a huge object doesn't need to be sent to each node
   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
       l <- readLAS(f)
       proj4string(l) <- "+init=epsg:7599"
       bc <- crop(b, extent(l))
       if(!is.null(bc)) {
           i <- str_extract(f, "lc2t[0-9]+")
           shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"), overwrite = T)
       }
   }
   closeAllConnections()
 
   rm(b)
 
   # tile 209_normalized doesn't have any trees in it. So I drop fl index 69.
 
   cl <- makeCluster(7)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {  
       l <- readLAS(f)
      i <- str_extract(f, "lc2t[0-9]+")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"))
       lc <- lasclip(l, bc)
       m <- lapply(lc, function(ls) {
           max(ls@data$Z)
       })
       o <- cbind(UID = bc@data$UID, height_2009 = unlist(m)
       saveRDS(o, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009/",i,".rds"))
   }
 
   closeAllConnections()
 
 #+end_src
 
 
 save as heights
 #+begin_src R
   hs <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009/", full.names = T)
   hs <- lapply(hs, readRDS)
 
   h2009 <- do.call("rbind", hs)
 
   saveRDS(h2009, "/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
 #+end_src
 

 
*** join heights to trees
 
 #+begin_src R
   height_2009 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
 
 #+end_src
 
 #+begin_src R
   library(raster)
   library(dplyr)

   trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

   tb <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")

   height_2009 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
   height_2016 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2016.rds")

   height_2009 <- as.data.frame(height_2009, stringsAsFactors = F) %>%
       mutate(height_2009 = as.numeric(height_2009))

   height_2009 <- height_2009 %>%
       group_by(UID) %>%
       summarize(height_2009 = max(height_2009, na.rm = T))

   height_2016 <- as.data.frame(height_2016, stringsAsFactors = F) %>%
       mutate(height_2016 = as.numeric(height_2016))

   height_2016 <- height_2016 %>%
       group_by(UID) %>%
       summarize(height_2016 = max(height_2016, na.rm = T))


   heights <- left_join(height_2009, height_2016, by = "UID") %>%
       mutate(growth = height_2016 - height_2009)


   trees@data <- left_join(trees@data, heights)

   shapefile(trees, "/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithHeights.shp", overwrite = T)

 #+end_src


* accidentally deleted
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-18 Mon 16:03
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
** extract heights from normalized lidar at location of trees

*** I could potentially sub sample the 2017 down to the point density of 2005 to estimate the 2005 bias, then correct for it?  
  
 - read in points and make a buffer of 5 ft radius around each point (they are
   almost always in the center of the tree)
 - for each year lidar, clip to buffer/polygon and extract the maximum height within that buffer and assign it to the tree
 
 Really I should come up with some clever rules for thinning out the
 tree dataset.  If I have small trees next to big trees, the small
 trees look like they are tall, but really they are being overtopped by
 the big trees.
 
 - consider making buffers based on the trees dbh.  if two trees
   intersect, keep the bigger of the two.
 
 
 Also need to beware of non street trees overhanging street trees.
 

*** clip lidar to tree buffers and extract tallest return
**** 2009
 #+begin_src R
   library(doParallel)
   library(foreach)
   library(lidR)
   library(dplyr)
   library(stringr)
 
   b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")
   b <- spTransform(b, crs("+init=epsg:7599"))
   b@data <- select(b@data, UID)
 
   fl <- list.files("/home/erker/hgt_data/madison_lidar_2009_heights/trees_lidar",
                    pattern = ".*.las",
                    full.names = T)
 
 
   # crop the polygons so that a huge object doesn't need to be sent to each node
   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
       l <- readLAS(f)
       proj4string(l) <- "+init=epsg:7599"
       bc <- crop(b, extent(l))
       if(!is.null(bc)) {
           i <- str_extract(f, "lc2t[0-9]+")
           shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"), overwrite = T)
       }
   }
   closeAllConnections()
 
   rm(b)
 
   # tile 209_normalized doesn't have any trees in it. So I drop fl index 69.
 
   cl <- makeCluster(7)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {  
       l <- readLAS(f)
      i <- str_extract(f, "lc2t[0-9]+")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh_2009cropped/",i,".shp"))
       lc <- lasclip(l, bc)
       m <- lapply(lc, function(ls) {
           max(ls@data$Z)
       })
       o <- cbind(UID = bc@data$UID, height_2009 = unlist(m)
       saveRDS(o, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009/",i,".rds"))
   }
 
   closeAllConnections()
 
 #+end_src
 
 
 save as heights
 #+begin_src R
   hs <- list.files("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009/", full.names = T)
   hs <- lapply(hs, readRDS)
 
   h2009 <- do.call("rbind", hs)
 
   saveRDS(h2009, "/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
 #+end_src
 

 
*** join heights to trees
 
 #+begin_src R
   height_2009 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
 
 #+end_src
 
 #+begin_src R
   library(raster)
   library(dplyr)

   trees <- shapefile("/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithAttributes.shp")

   tb <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_buf_excludeNearNeigh.shp")

   height_2009 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2009.rds")
   height_2016 <- readRDS("/home/erker/hgt_data/madison_tree_inventories/hgt/height_2016.rds")

   height_2009 <- as.data.frame(height_2009, stringsAsFactors = F) %>%
       mutate(height_2009 = as.numeric(height_2009))

   height_2009 <- height_2009 %>%
       group_by(UID) %>%
       summarize(height_2009 = max(height_2009, na.rm = T))

   height_2016 <- as.data.frame(height_2016, stringsAsFactors = F) %>%
       mutate(height_2016 = as.numeric(height_2016))

   height_2016 <- height_2016 %>%
       group_by(UID) %>%
       summarize(height_2016 = max(height_2016, na.rm = T))


   heights <- left_join(height_2009, height_2016, by = "UID") %>%
       mutate(growth = height_2016 - height_2009)


   trees@data <- left_join(trees@data, heights)

   shapefile(trees, "/home/erker/hgt_data/madison_tree_inventories/MadisonTrees_WithHeights.shp", overwrite = T)

 #+end_src


* finding mean height within 20m.  Not using this appraoch.  I can use the CHM  clip las to these buffers  
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-19 Tue 12:22
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/other covariates/mean height of first returns within 20m of tree (includes other trees and buildings etc)
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
 #+begin_src R
   library(doParallel)
   library(foreach)
   library(lidR)
   library(dplyr)
   library(stringr)

#+end_src

#+RESULTS:
: Loading required package: foreach
: Loading required package: iterators
: Loading required package: parallel

#+begin_src R
   b <- shapefile("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_20m_buf.shp")
   b <- spTransform(b, crs("+init=epsg:7599"))
   b@data <- select(b@data, UID)

   fl <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar",
                    pattern = ".*.las",
                    full.names = T)


   # crop the polygons so that a huge object doesn't need to be sent to each node
   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR")) %dopar% {
       l <- readLAS(f)
       proj4string(l) <- "+init=epsg:7599"
       bc <- crop(b, extent(l))
       i <- str_extract(f, "[0-9]+_norm")
       shapefile(bc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_20m_buf_2016cropped/",i,".shp"))
   }

   closeAllConnections()

   rm(b)
#+end_src

#+begin_src R
   fl <- list.files("/home/erker/hgt_data/madison_lidar_2016_heights/normalized_lidar",
                    pattern = ".*.las",
                    full.names = T)

   cl <- makeCluster(4)
   registerDoParallel(cl)
   out <- foreach(f = fl, .packages = c("stringr","lidR", "rgeos")) %dopar% {  
       l <- readLAS(f, filter = "-drop_z_below 6 -keep_first", select = "")
       i <- str_extract(f, "[0-9]+_norm")
       bc <- shapefile(paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_20m_buf_2016cropped/",i,".shp"))
       lapply(seq(length(bc)), function(j) {
           if(round(gArea(bc[j,])) == 13526) {  # make sure we have the full circle.  if radius changes this will need to...
               lc <- lasclip(l, bc[j,])
               if(nrow(lc@data) > 0) {
                   writeLAS(lc, paste0("/home/erker/hgt_data/madison_tree_inventories/hgt/trees_2016_normlas_20mbuf/",bc[j,]$UID,"_",i,".las"))
               }
           }
       })
   }
   closeAllConnections()

 #+end_src




* instead of nonlinear, I'll just going to include polynomial terms. try nonlinear growth
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-22 Fri 16:58
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/modeling
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:

#+begin_src R
x <- seq(5,20,1)
a <- .4
b <- -.5
c <- 12
y = a / (1 + exp(-b * (x - c)))
plot(x,y)
#+end_src

#+RESULTS:

#+begin_src R
          mnl <- nls(growth.rate ~ a / (1 + exp(-b * (cor_max2005 - c))), data = d,
                     start = list(a = .2,
                                  b = 1,
                                  c = 12),
                     #lower = c(0,0,0),
                     algorithm = "plinear")
#+end_src

#+RESULTS:
: 
: Error in nls(growth.rate ~ a/(1 + exp(-b * (cor_max2005 - c))), data = d,  : 
:   step factor 0.000488281 reduced below 'minFactor' of 0.000976562


* think about the difference in sample size.  DOn't want to throw away observations that occur outside of the aviris flight lines.
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-24 Sun 09:05
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/modeling
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
I checked the coefficients for two models and they were similiar.  21k
is still a ton.


* georob? with spatial errors
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-25 Mon 11:31
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/modeling
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R
  library(georob)

  sm <- georob(growth.rate ~ street + Genus + poly(cor_max2005,4) + tpi_5ft + aspect_trans_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl,
         dc, 
         locations=~x+y,
         variogram.model="RMmatern", param=c(variance=0.001, nugget=0.05, scale=150, kappa = .5),
         fast.s.large.n = Inf)

#+end_src

#+RESULTS:


* other old stuff
:PROPERTIES:
:ARCHIVE_TIME: 2019-12-01 Sun 16:52
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: COMMENT work/modeling/Plots of models/height by neighborhood/street/utilities
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:

#+begin_src R
tidy(m7) %>% data.frame %>% filter(grepl("st_po|Intercept|2005", term))

#term %in% c("st_post no util", "st_post w util", "st_poneighborhood"))
#+end_src

#+RESULTS:
#+begin_example
                         term      estimate    std.error statistic      p.value
1                 (Intercept)  7.751288e+01 6.132861e+00 12.638942 1.743258e-36
2             st_post no util -1.101144e+01 1.223182e+00 -9.002289 2.392490e-19
3              st_post w util -1.069483e+01 1.622783e+00 -6.590428 4.488568e-11
4                 cor_max2005 -1.221147e+01 1.425626e+00 -8.565691 1.146436e-17
5                height2005_2  8.236723e-01 1.270711e-01  6.481979 9.251755e-11
6                height2005_3 -2.753273e-02 4.818351e-03 -5.714139 1.117378e-08
7                height2005_4  3.358812e-04 6.562739e-05  5.118002 3.114821e-07
8 st_post no util:cor_max2005  3.665242e-01 7.332514e-02  4.998615 5.820320e-07
9  st_post w util:cor_max2005  3.107374e-01 9.734035e-02  3.192278 1.413613e-03
#+end_example

#+begin_src R
m.stree


  terms <- c("poly(cor_max2005, 4)1", "poly(cor_max2005, 4)2", "poly(cor_max2005, 4)3", "poly(cor_max2005, 4)4")


    mstpo <-   tidy(m.street_powerline) %>%
          filter(term %in% terms) %>%
          mutate(model = "street powerline")

    mstnopo <-   tidy(m.street_no_powerline) %>%
          filter(term %in% terms) %>%
          mutate(model = "street no powerline")

    mneigh <- tidy(m.neigh) %>%
          filter(term %in% terms) %>%
          mutate(model = "neighborhood")

    mc <- bind_rows(mstpo, mstnopo, mneigh)

#+end_src

#+RESULTS:
#+begin_example
Error: object 'm.stree' not found

Error in tidy(m.street_powerline) : object 'm.street_powerline' not found

Error in tidy(m.street_no_powerline) : 
  object 'm.street_no_powerline' not found

Error in tidy(m.neigh) : object 'm.neigh' not found

Error in dots_values(...) : object 'mstpo' not found
#+end_example

#+begin_src R :exports results :results graphics :file figs/street_powerline_neighborhood_height_coef_plots.png :width 1000 :height 600 :res 100 :bg transparent
  ggplot(mc, aes(y = estimate, ymax = estimate + 1.96 * std.error, ymin = estimate - 1.96 * std.error, color = model, x = term)) + geom_pointrange(position = position_dodge(width = .3)) +
    coord_flip() +
   terk +
    scale_color_brewer(type = "qual", palette = "Dark2")


#+end_src

#+RESULTS:
[[file:figs/street_powerline_neighborhood_height_coef_plots.png]]









#+begin_src R
library(broom)
tidy(m7) %>% data.frame
#+end_src


* fit genus specific models this isn't quite right because it has implicit interactions with topography.
:PROPERTIES:
:ARCHIVE_TIME: 2019-12-01 Sun 17:05
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: COMMENT work/modeling/Plots of models
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:


** acer
#+begin_src R
    m.acer <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Acer")
  summary(m.acer)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Acer")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.72625 -0.07892 -0.01919  0.05773  0.95893 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               6.663e-02  3.575e-02   1.864   0.0624 .  
st_post no util          -6.160e-02  5.533e-03 -11.132  < 2e-16 ***
st_post w util           -6.510e-02  6.828e-03  -9.533  < 2e-16 ***
poly(cor_max2005, 4)1    -5.500e+00  3.059e-01 -17.980  < 2e-16 ***
poly(cor_max2005, 4)2     4.296e-01  3.171e-01   1.355   0.1755    
poly(cor_max2005, 4)3    -9.084e-01  4.434e-01  -2.049   0.0405 *  
poly(cor_max2005, 4)4     1.065e+00  4.285e-01   2.485   0.0130 *  
tpi_5ft                  -1.774e-02  6.929e-03  -2.561   0.0105 *  
tpi_200ft                -8.358e-04  5.895e-04  -1.418   0.1563    
aspect_trans_200ft       -1.029e-03  2.124e-03  -0.485   0.6280    
elev                     -4.515e-05  9.507e-05  -0.475   0.6348    
mean_height_wn20m         9.591e-03  1.076e-03   8.910  < 2e-16 ***
pct_imp_20m               7.109e-03  2.697e-02   0.264   0.7921    
pct_imp_100m             -9.368e-03  2.752e-02  -0.340   0.7336    
TotPhen                  -1.866e-02  3.656e-03  -5.103 3.43e-07 ***
N                        -2.661e-02  2.985e-03  -8.916  < 2e-16 ***
Sugar                    -7.094e-03  3.521e-03  -2.015   0.0440 *  
LMA                       2.585e-03  2.409e-03   1.073   0.2833    
lignin                   -2.236e-02  3.884e-03  -5.758 8.90e-09 ***
chl                       1.665e-02  3.652e-03   4.558 5.24e-06 ***
pct_imp_20m:pct_imp_100m -4.999e-02  5.634e-02  -0.887   0.3749    
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.1274 on 6743 degrees of freedom
Multiple R-squared:  0.1026,	Adjusted R-squared:  0.09998 
F-statistic: 38.56 on 20 and 6743 DF,  p-value: < 2.2e-16
#+end_example

** fraxinus
#+begin_src R
    m.fraxinus <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Fraxinus")
  summary(m.fraxinus)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Fraxinus")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.42039 -0.06560 -0.00952  0.05074  0.96170 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               1.476e-01  3.118e-02   4.734 2.25e-06 ***
st_post no util          -2.714e-02  8.060e-03  -3.367 0.000764 ***
st_post w util           -3.153e-02  8.647e-03  -3.647 0.000268 ***
poly(cor_max2005, 4)1    -7.379e+00  4.019e-01 -18.360  < 2e-16 ***
poly(cor_max2005, 4)2     6.863e-02  6.028e-01   0.114 0.909364    
poly(cor_max2005, 4)3    -6.874e-01  7.202e-01  -0.954 0.339898    
poly(cor_max2005, 4)4    -4.106e-01  6.754e-01  -0.608 0.543277    
tpi_5ft                  -9.114e-03  6.329e-03  -1.440 0.149923    
tpi_200ft                -1.363e-03  5.136e-04  -2.654 0.007976 ** 
aspect_trans_200ft       -4.322e-04  1.892e-03  -0.228 0.819378    
elev                     -2.026e-04  7.937e-05  -2.553 0.010707 *  
mean_height_wn20m         6.870e-03  1.107e-03   6.207 5.76e-10 ***
pct_imp_20m               4.831e-03  2.231e-02   0.217 0.828545    
pct_imp_100m             -1.809e-02  2.188e-02  -0.827 0.408203    
TotPhen                   5.079e-03  4.255e-03   1.194 0.232695    
N                        -2.153e-02  3.037e-03  -7.089 1.51e-12 ***
Sugar                    -2.532e-03  4.001e-03  -0.633 0.526868    
LMA                      -1.712e-03  2.244e-03  -0.763 0.445431    
lignin                   -2.286e-02  4.493e-03  -5.089 3.71e-07 ***
chl                       3.316e-02  3.610e-03   9.186  < 2e-16 ***
pct_imp_20m:pct_imp_100m -7.497e-02  3.940e-02  -1.903 0.057138 .  
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.108 on 5915 degrees of freedom
Multiple R-squared:  0.1334,	Adjusted R-squared:  0.1304 
F-statistic: 45.52 on 20 and 5915 DF,  p-value: < 2.2e-16
#+end_example

** gleditsia
#+begin_src R
    m.gleditsia <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Gleditsia")
  summary(m.gleditsia)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Gleditsia")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.34603 -0.07516 -0.01395  0.05752  0.55618 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               0.0881858  0.0444186   1.985 0.047187 *  
st_post no util          -0.0139666  0.0068766  -2.031 0.042330 *  
st_post w util           -0.0172465  0.0083320  -2.070 0.038535 *  
poly(cor_max2005, 4)1    -6.8590817  0.9749522  -7.035 2.39e-12 ***
poly(cor_max2005, 4)2    -2.0288466  1.7890323  -1.134 0.256854    
poly(cor_max2005, 4)3    -4.0969992  2.1073572  -1.944 0.051960 .  
poly(cor_max2005, 4)4    -2.0964902  1.2700876  -1.651 0.098899 .  
tpi_5ft                  -0.0051544  0.0088761  -0.581 0.561473    
tpi_200ft                -0.0010179  0.0007918  -1.286 0.198688    
aspect_trans_200ft       -0.0033619  0.0028351  -1.186 0.235776    
elev                      0.0001970  0.0001176   1.675 0.093928 .  
mean_height_wn20m         0.0058709  0.0014822   3.961 7.61e-05 ***
pct_imp_20m              -0.0836453  0.0308800  -2.709 0.006788 ** 
pct_imp_100m             -0.0742751  0.0282837  -2.626 0.008676 ** 
TotPhen                   0.0233183  0.0059335   3.930 8.67e-05 ***
N                        -0.0187859  0.0048715  -3.856 0.000117 ***
Sugar                    -0.0187370  0.0057083  -3.282 0.001040 ** 
LMA                      -0.0002679  0.0032397  -0.083 0.934105    
lignin                   -0.0063009  0.0057246  -1.101 0.271118    
chl                       0.0218092  0.0055009   3.965 7.50e-05 ***
pct_imp_20m:pct_imp_100m  0.0221961  0.0511605   0.434 0.664423    
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.115 on 3418 degrees of freedom
Multiple R-squared:  0.1458,	Adjusted R-squared:  0.1408 
F-statistic: 29.17 on 20 and 3418 DF,  p-value: < 2.2e-16
#+end_example

** tilia
#+begin_src R
    m.tilia <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Tilia")
  summary(m.tilia)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Tilia")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.40020 -0.07309 -0.01066  0.06267  0.61940 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)               1.471e-01  6.891e-02   2.134 0.032964 *  
st_post no util          -4.985e-02  1.915e-02  -2.603 0.009337 ** 
st_post w util           -4.100e-02  2.119e-02  -1.935 0.053155 .  
poly(cor_max2005, 4)1    -1.079e+01  7.790e-01 -13.850  < 2e-16 ***
poly(cor_max2005, 4)2     9.100e-01  1.117e+00   0.815 0.415394    
poly(cor_max2005, 4)3    -3.484e+00  1.620e+00  -2.151 0.031613 *  
poly(cor_max2005, 4)4    -2.584e+00  1.304e+00  -1.981 0.047801 *  
tpi_5ft                  -1.504e-02  1.414e-02  -1.064 0.287416    
tpi_200ft                 5.138e-04  1.102e-03   0.466 0.641200    
aspect_trans_200ft       -3.822e-03  4.299e-03  -0.889 0.374081    
elev                     -1.443e-04  1.723e-04  -0.837 0.402642    
mean_height_wn20m         8.907e-03  2.344e-03   3.800 0.000150 ***
pct_imp_20m               1.186e-01  4.754e-02   2.495 0.012699 *  
pct_imp_100m              6.379e-02  5.486e-02   1.163 0.245099    
TotPhen                  -4.125e-03  8.800e-03  -0.469 0.639336    
N                        -2.000e-02  5.480e-03  -3.650 0.000271 ***
Sugar                    -1.091e-02  5.962e-03  -1.830 0.067443 .  
LMA                      -1.368e-02  5.206e-03  -2.628 0.008675 ** 
lignin                   -2.407e-04  6.833e-03  -0.035 0.971898    
chl                      -9.092e-03  7.352e-03  -1.237 0.216424    
pct_imp_20m:pct_imp_100m -2.930e-01  9.234e-02  -3.173 0.001537 ** 
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.122 on 1502 degrees of freedom
Multiple R-squared:  0.259,	Adjusted R-squared:  0.2492 
F-statistic: 26.26 on 20 and 1502 DF,  p-value: < 2.2e-16
#+end_example

** quercus
#+begin_src R
    m.quercus <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Quercus")
  summary(m.quercus)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Quercus")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.40502 -0.08168 -0.01518  0.05997  0.62246 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)              -3.295e-02  9.932e-02  -0.332 0.740133    
st_post no util          -4.859e-02  1.015e-02  -4.789 1.94e-06 ***
st_post w util           -5.405e-02  1.330e-02  -4.066 5.17e-05 ***
poly(cor_max2005, 4)1    -1.054e+01  9.950e-01 -10.589  < 2e-16 ***
poly(cor_max2005, 4)2     3.716e+00  7.491e-01   4.961 8.26e-07 ***
poly(cor_max2005, 4)3    -9.128e-01  5.709e-01  -1.599 0.110129    
poly(cor_max2005, 4)4    -5.880e-01  6.235e-01  -0.943 0.345833    
tpi_5ft                   1.655e-02  1.669e-02   0.991 0.321828    
tpi_200ft                -2.144e-03  9.094e-04  -2.358 0.018589 *  
aspect_trans_200ft       -4.786e-03  5.580e-03  -0.858 0.391325    
elev                      1.817e-04  3.173e-04   0.573 0.567051    
mean_height_wn20m         9.202e-03  2.616e-03   3.518 0.000455 ***
pct_imp_20m               1.168e-01  7.138e-02   1.636 0.102093    
pct_imp_100m              8.355e-03  5.730e-02   0.146 0.884092    
TotPhen                  -5.875e-03  1.168e-02  -0.503 0.615176    
N                        -1.959e-02  1.021e-02  -1.918 0.055343 .  
Sugar                    -1.246e-03  9.634e-03  -0.129 0.897128    
LMA                      -5.793e-03  6.709e-03  -0.863 0.388079    
lignin                   -2.479e-02  1.249e-02  -1.985 0.047402 *  
chl                       1.374e-02  9.976e-03   1.377 0.168756    
pct_imp_20m:pct_imp_100m -1.623e-01  1.801e-01  -0.901 0.367872    
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.1275 on 981 degrees of freedom
Multiple R-squared:  0.1402,	Adjusted R-squared:  0.1226 
F-statistic: 7.996 on 20 and 981 DF,  p-value: < 2.2e-16
#+end_example

oak pine honey acer picea pinus tilia 

** celtis
#+begin_src R
    m.celtis <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Celtis")
  summary(m.celtis)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Celtis")

Residuals:
    Min      1Q  Median      3Q     Max 
-31.108  -6.650  -0.963   5.597  49.263 

Coefficients:
                          Estimate Std. Error t value Pr(>|t|)    
(Intercept)               -20.5700    12.6822  -1.622 0.105602    
st_post no util            -4.1052     1.6867  -2.434 0.015374 *  
st_post w util             -7.4011     2.2249  -3.327 0.000961 ***
poly(cor_max2005, 4)1    -404.9334   120.3241  -3.365 0.000838 ***
poly(cor_max2005, 4)2      34.2300   115.7295   0.296 0.767555    
poly(cor_max2005, 4)3      19.4649   100.8811   0.193 0.847097    
poly(cor_max2005, 4)4     145.2024   121.1472   1.199 0.231408    
tpi_5ft                    -2.9665     1.8751  -1.582 0.114418    
tpi_200ft                  -0.3283     0.1727  -1.901 0.057977 .  
aspect_trans_200ft         -1.0006     0.7858  -1.273 0.203628    
elev                        8.7751     3.7240   2.356 0.018936 *  
mean_height_wn20m           0.4658     0.3856   1.208 0.227802    
pct_imp_20m                11.1018     8.7160   1.274 0.203502    
pct_imp_100m               13.4473     7.2688   1.850 0.065050 .  
TotPhen                     4.5552     1.3661   3.334 0.000934 ***
N                          -3.5903     1.2459  -2.882 0.004168 ** 
Sugar                      -2.1319     1.1929  -1.787 0.074661 .  
LMA                        -0.6720     0.8133  -0.826 0.409193    
lignin                      1.3574     1.4364   0.945 0.345232    
chl                         4.4548     1.3839   3.219 0.001391 ** 
pct_imp_20m:pct_imp_100m  -21.6658    16.8422  -1.286 0.199049    
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 10.87 on 400 degrees of freedom
Multiple R-squared:  0.1902,	Adjusted R-squared:  0.1497 
F-statistic: 4.699 on 20 and 400 DF,  p-value: 3.314e-10
#+end_example

** picea
#+begin_src R
    m.picea <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Picea")
  summary(m.picea)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Picea")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.40901 -0.12532 -0.03409  0.08944  0.73355 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)    
(Intercept)              -0.0104331  0.2549785  -0.041 0.967382    
st_post no util          -0.0274950  0.0250364  -1.098 0.272779    
st_post w util            0.0298451  0.0429861   0.694 0.487901    
poly(cor_max2005, 4)1    -6.7664124  1.9776557  -3.421 0.000687 ***
poly(cor_max2005, 4)2     2.9596090  3.0762566   0.962 0.336591    
poly(cor_max2005, 4)3     6.9655975  4.5356849   1.536 0.125397    
poly(cor_max2005, 4)4     2.5612910  3.3226132   0.771 0.441242    
tpi_5ft                  -0.0877768  0.0606707  -1.447 0.148745    
tpi_200ft                -0.0027998  0.0028941  -0.967 0.333911    
aspect_trans_200ft        0.0008699  0.0135293   0.064 0.948764    
elev                      0.0002749  0.0007647   0.359 0.719468    
mean_height_wn20m         0.0090888  0.0056538   1.608 0.108723    
pct_imp_20m               0.0746143  0.1611992   0.463 0.643710    
pct_imp_100m              0.1992676  0.1659490   1.201 0.230550    
TotPhen                  -0.0293729  0.0223309  -1.315 0.189148    
N                        -0.0415437  0.0169978  -2.444 0.014955 *  
Sugar                     0.0264909  0.0218717   1.211 0.226537    
LMA                      -0.0134700  0.0130857  -1.029 0.303930    
lignin                   -0.0434391  0.0211460  -2.054 0.040603 *  
chl                       0.0582813  0.0206763   2.819 0.005061 ** 
pct_imp_20m:pct_imp_100m -0.3658552  0.3856255  -0.949 0.343331    
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.1876 on 399 degrees of freedom
Multiple R-squared:  0.1657,	Adjusted R-squared:  0.1239 
F-statistic: 3.962 on 20 and 399 DF,  p-value: 4.197e-08
#+end_example
** ulmus
** pinus
#+begin_src R
    m.pinus <- lm(growth.rate ~ st_po + poly(cor_max2005,4) + tpi_5ft + tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + lignin + chl, 
       dc,
       subset = dc$Genus == "Pinus")
  summary(m.pinus)
#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = growth.rate ~ st_po + poly(cor_max2005, 4) + tpi_5ft + 
    tpi_200ft + aspect_trans_200ft + elev + mean_height_wn20m + 
    pct_imp_20m * pct_imp_100m + TotPhen + N + Sugar + LMA + 
    lignin + chl, data = dc, subset = dc$Genus == "Pinus")

Residuals:
     Min       1Q   Median       3Q      Max 
-0.42526 -0.14430 -0.02899  0.13269  0.72627 

Coefficients:
                           Estimate Std. Error t value Pr(>|t|)   
(Intercept)               0.7299891  0.3276734   2.228  0.02681 * 
st_post no util          -0.0744534  0.0354235  -2.102  0.03660 * 
st_post w util           -0.1514689  0.0737932  -2.053  0.04118 * 
poly(cor_max2005, 4)1    -7.8696574  2.6182408  -3.006  0.00293 **
poly(cor_max2005, 4)2     4.2171446  4.8178888   0.875  0.38227   
poly(cor_max2005, 4)3    -0.8886896  6.7522073  -0.132  0.89540   
poly(cor_max2005, 4)4     2.9386072  6.3028201   0.466  0.64146   
tpi_5ft                   0.1133702  0.0793564   1.429  0.15439   
tpi_200ft                -0.0057617  0.0041410  -1.391  0.16538   
aspect_trans_200ft        0.0006967  0.0192789   0.036  0.97120   
elev                     -0.0013415  0.0009943  -1.349  0.17852   
mean_height_wn20m        -0.0011188  0.0074954  -0.149  0.88147   
pct_imp_20m               0.0961583  0.2047567   0.470  0.63904   
pct_imp_100m              0.0548570  0.2424088   0.226  0.82116   
TotPhen                  -0.0743155  0.0321673  -2.310  0.02171 * 
N                        -0.0298122  0.0263299  -1.132  0.25864   
Sugar                    -0.0082193  0.0314540  -0.261  0.79407   
LMA                      -0.0034328  0.0219073  -0.157  0.87561   
lignin                   -0.0042971  0.0330741  -0.130  0.89673   
chl                      -0.0200579  0.0335147  -0.598  0.55007   
pct_imp_20m:pct_imp_100m -0.6466105  0.5004866  -1.292  0.19759   
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.2079 on 244 degrees of freedom
Multiple R-squared:  0.218,	Adjusted R-squared:  0.154 
F-statistic: 3.402 on 20 and 244 DF,  p-value: 3.274e-06
#+end_example
** juglans
** betula
** robinia
** populus

* COMMENT test
:PROPERTIES:
:ARCHIVE_TIME: 2019-12-02 Mon 12:21
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:

#+begin_src R

ma <- 10
mb <- 15
mc <- 20

ya <- rnorm(100, ma, 1)
yb <- rnorm(100, mb, 1)
yc <- rnorm(100, mc, 1)

y <- c(ya, yb, yc)

x <- rep(c("a","b","c"), each = 100)

m <- lm(y ~ x - 1)
summary(m)

#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ x - 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-3.00399 -0.72759 -0.02891  0.76546  2.93270 

Coefficients:
   Estimate Std. Error t value Pr(>|t|)    
xa  10.0605     0.1056   95.29   <2e-16 ***
xb  14.9766     0.1056  141.85   <2e-16 ***
xc  19.9969     0.1056  189.40   <2e-16 ***
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.056 on 297 degrees of freedom
Multiple R-squared:  0.9955,	Adjusted R-squared:  0.9954 
F-statistic: 2.169e+04 on 3 and 297 DF,  p-value: < 2.2e-16
#+end_example

#+begin_src R

ma <- 1
mb <- 2
mc <- 3

x <- 1:100

ya <- rnorm(100, ma * x, 1)
yb <- rnorm(100, mb * x, 1)
yc <- rnorm(100, mc * x, 1)

y <- c(ya, yb, yc)

g <- rep(c("a","b","c"), each = 100)

x <- rep(x, times = 3)

m <- lm(y ~ x:g)
summary(m)


#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ x:g)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.85810 -0.68758 -0.01956  0.71158  2.63677 

Coefficients:
            Estimate Std. Error  t value Pr(>|t|)    
(Intercept) 0.002666   0.115539    0.023    0.982    
x:ga        1.001522   0.002427  412.716   <2e-16 ***
x:gb        2.000852   0.002427  824.529   <2e-16 ***
x:gc        3.000219   0.002427 1236.358   <2e-16 ***
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.9931 on 296 degrees of freedom
Multiple R-squared:  0.9998,	Adjusted R-squared:  0.9998 
F-statistic: 5.666e+05 on 3 and 296 DF,  p-value: < 2.2e-16
#+end_example


#+begin_src R

ma <- 1
mb <- 2
mc <- 3

m2 <- 4

m12 <- 10

x1 <- 1:100
x2 <- runif(100, 1,10)

ya <- x2 * rnorm(100, m2, .1) + rnorm(100, ma * x1, 1) + m12 * x1 * x2
yb <- x2 * rnorm(100, m2, .1) + rnorm(100, mb * x1, 1) + m12 * x1 * x2
yc <- x2 * rnorm(100, m2, .1) + rnorm(100, mc * x1, 1) + m12 * x1 * x2

y <- c(ya, yb, yc)

g <- rep(c("a","b","c"), each = 100)

x1 <- rep(x1, times = 3)
x2 <- rep(x2, times = 3)

m <- lm(y ~ x1:g + x2:x1 + x2)
summary(m)


#+end_src

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ x1:g + x2:x1 + x2)

Residuals:
    Min      1Q  Median      3Q     Max 
-3.2830 -0.7701  0.0450  0.8124  2.8704 

Coefficients:
              Estimate Std. Error   t value Pr(>|t|)    
(Intercept) -0.1663776  0.2963164    -0.561    0.575    
x2           4.0349036  0.0474944    84.955   <2e-16 ***
x1:ga        1.0070862  0.0049861   201.980   <2e-16 ***
x1:gb        2.0056328  0.0049861   402.247   <2e-16 ***
x1:gc        3.0063275  0.0049861   602.945   <2e-16 ***
x1:x2        9.9986874  0.0007963 12555.708   <2e-16 ***
---
codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.132 on 294 degrees of freedom
Multiple R-squared:      1,	Adjusted R-squared:      1 
F-statistic: 2.068e+08 on 5 and 294 DF,  p-value: < 2.2e-16
#+end_example



