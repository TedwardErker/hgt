#    -*- mode: org -*-


Archived entries from file /home/erker/git/hgt/hgt.org


* old bit with grid_metrics3d
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-17 Thu 16:14
  :ARCHIVE_FILE: ~/git/hgt/hgt.org
  :ARCHIVE_OLPATH: Methods/2016 lidar/testing finding trees
  :ARCHIVE_CATEGORY: hgt
  :ARCHIVE_ITAGS: work allo
  :END:
#+begin_src R

  plot(gm, color = "mode", trim = 2)


                                          # get the identity of the highest for each x and y
                                          #https://stackoverflow.com/questions/24558328/how-to-select-the-row-with-the-maximum-value-in-each-group
  gm <- gm[gm[, .I[which.max(Z)], by=list(X,Y)]$V1]

  r <- rasterFromXYZ(gm)

  library(ggplot2)
  ggplot(gm, aes(x = X, y = Y, fill = tree)) + geom_raster() + coord_equal()





                                          # works great
  gmclass <- grid_metrics3d(las, ~Modes(Classification), 3)
  plot(gmclass, color = "mode", trim = 3)


  lp <- lasdetectshape(las, shp_plane(th1 = 15, th2 = 4, k = 20), "Coplanar")
  plot(lp, color = "Coplanar")

  gmcoplanar <- grid_metrics3d(lp, ~Modes(Coplanar), 3)
                                          # doesn't work
  plot(gmcoplanar, color = "mode")



  gmcoplanar <- grid_metrics3d(lp, ~Modes_numeric(Coplanar), 3)
                                          # works now
  plot(gmcoplanar, color = "mode", trim = 3)

#+end_src


Archived entries from file /home/erker/git/hgt/hgt.org


* old way with morphology on raster
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-17 Thu 16:15
  :ARCHIVE_FILE: ~/git/hgt/hgt.org
  :ARCHIVE_OLPATH: Methods/2016 lidar/testing finding trees
  :ARCHIVE_CATEGORY: hgt
  :ARCHIVE_ITAGS: work allo
  :END:
#+begin_src R
    library(lidR) 
  library(mmand)

  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first")
  lsp <- lasdetectshape(l, shp_plane(th1 = 4, th2 = 4, k = 20), "Coplanar")
  plot(lsp, color = "Coplanar", col = c("blue", "red"))
  lsp2 <- lasdetectshape(lsp, shp_plane(th1 = 15, th2 = 6, k = 10), "Coplanar2", filter = ~Coplanar == F)
  plot(lsp2, color = "Coplanar2") 


  l@data[(!lsp@data$Coplanar) & (!lsp@data$Coplanar2) & (!lsp@data$Colinear) & (lsp@data$Intensity < 20)]$Classification <- 5L


  lsp@data[(!lsp@data$Coplanar) & (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1) & (lsp@data$Intensity < 30)]$Classification <- 5L
  lt <- lasfilter(lsp, Classification == 5L)
  chm_tree <- grid_canopy(lt, res = 3, p2r(2))
  plot(chm_tree)


  l <- readLAS("test2016.las", filter = "-drop_z_below 6")
  lsp <- lasdetectshape(l, shp_plane(th1 = 5, th2 = 4, k = 20), "Coplanar_building")
  lsp@data[(lsp@data$Coplanar_building)]$Classification <- 6L
  plot(lsp, color = "Classification")

  lb <- lasfilter(lsp, Classification == 6L)
  chm_building <- grid_canopy(lb, res = 3, p2r(1))
  plot(chm_building)

  chm_building<- reclassify(chm_building, matrix(c(NA, 0), ncol = 2))
  kern <- shapeKernel(c(3,3), type="diamond")
  chm_building[,] <- opening(as.matrix(chm_building), kern)
  plot(chm_building)

  plot(chm_tree - chm_building > 6)









  ker = matrix(1,5,5)
  chm_building = focal(chm_building, w = ker, fun = median)
  plot(chm_building)
















  k = makeBrush(17, shape='diamond')
  o <- opening(as.matrix(chm_building), kern = k)
  chm_building[,] <- o
  plot(chm_building)








  chm_building<- reclassify(chm_building, matrix(c(NA, 0), ncol = 2))




  plot(chm_building)



    plot(lsp, color = "Classification", col = c("red", "green"))
    chm <- reclassify(chm, matrix(c(NA, 0), ncol = 2))

    ker = matrix(1,3,3)
    chm = focal(chm, w = ker, fun = median)
    plot(chm)



    chm = focal(chm, w = ker, fun = median)

    plot(chm)








  l <- readLAS("test2016.las", filter = "-drop_z_below 6 -keep_first_of_many")
  ls <- lasdetectshape(l, shp_line(th1 = 6, k = 10), "Colinear")
  #plot(ls, color = "Colinear")
  lsp <- lasdetectshape(ls, shp_plane(th1 = 5, th2 = 6, k = 100), "Coplanar")
  plot(lsp, color = "Coplanar")
  lsp2 <- lasdetectshape(lsp, shp_plane(th1 = 15, th2 = 6, k = 10), "Coplanar2", filter = ~Coplanar == F)
  plot(lsp2, color = "Coplanar2") 
  lsp@data[(!lsp@data$Coplanar) & (!lsp@data$Coplanar2) & (!lsp@data$Colinear) & (lsp@data$Intensity < 20)]$Classification <- 5L
  plot(lsp, color = "Classification", col = c("red", "green"))
  plot(lsp, color = "Classification", col = c("black", "green"))
#+end_src


Archived entries from file /home/erker/git/hgt/hgt.org


* find the best set of parameters
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-10-17 Thu 16:15
  :ARCHIVE_FILE: ~/git/hgt/hgt.org
  :ARCHIVE_OLPATH: Methods/2016 lidar/testing finding trees
  :ARCHIVE_CATEGORY: hgt
  :ARCHIVE_ITAGS: work allo
  :END:
#+begin_src R
  intensity <- seq(20, 100, 20)
  intensity <- c(100)
  th1_p <- seq(2,15,1)
  th2_p <- c(4)
  k <- c(6,7,8,9,11,13,15)
  d <- expand.grid(intensity, th1_p, th2_p, k)

  mapply(function(i, t1, t2, k) {
      l <- readLAS("test2016.las", filter = "-drop_z_below 6")
      ls <- lasdetectshape(l, shp_line(th1 = t1, k = k), "Colinear")
      lsp <- lasdetectshape(ls, shp_plane(th1 = t1, th2 = t2, k = k), "Coplanar")
      lsp@data[(!lsp@data$Coplanar) & (!lsp@data$Colinear) & (lsp@data$ReturnNumber == 1) & (lsp@data$NumberOfReturns > 1) & (lsp@data$Intensity < i)]$Classification <- 5L
      lt <- lasfilter(lsp, Classification == 5L)
      chm <- grid_canopy(lt, res = 3, p2r(1))
      png(paste0("figs/",i,"_",t1, "_", t2, "_", k, ".png"))
      plot(chm)
      dev.off()
  },
  d$Var1, d$Var2, d$Var3, d$Var4)
#+end_src

#+RESULTS:



* OLD WAY:
:PROPERTIES:
:ARCHIVE_TIME: 2019-10-25 Fri 10:32
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/creating normalized lidar and doing best to filter out tree points/2005 lidar
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:



chm, quick and easy algorithm.  this does seem to miss some trees
though. because I filter by multiple returns, but its probably worth it to miss
all the buildings
#+begin_src R
  library(lidR)
  ctg2005norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/")
  opt_output_files(ctg2005norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/{ORIGINALFILENAME}_chm8"
  opt_filter(ctg2005norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0"
  grid_canopy(ctg2005norm, 3, p2r(2)) 
#+end_src


#+BEGIN_SRC sh
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/
gdalbuildvrt chm4.vrt *chm4.tif
gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" chm4.vrt chm4.tif
#+END_SRC

#+RESULTS:
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |
|                                                Input | file | size  | is | 15712, | 11538 |
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |

silva 2016 seems to do better than dalponte2016, apply to all the
rasters
#+begin_src R
  library(lidR)
  library(stringr)
  files <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/", 
                      pattern = ".*tile[0-9]{3}_ground_normalized_chm8.tif",
                      full.names = T)

                                          #remove tile 008, 009, 017,025,031-034 because they doesn't overlap with tree inventory
  files <- files[-c(8,9,17,25,31,32,33,34)]


  lapply(files, function(f) {
      tile <- str_extract(f, "tile[0-9]{3}")
      r <- raster(f)
      proj4string(r) <- "+init=epsg:7599"
      ttops <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
      ttops <- spTransform(ttops, "+init=epsg:7599")
      crowns = silva2016(r, ttops, max_cr_factor = .99)()
      writeRaster(crowns, paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/",tile,"_tree_polys.tif"), overwrite = T)
  }
  )

#+end_src


#+BEGIN_SRC sh 
cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/

gdalbuildvrt tree_polys.vrt *tree_polys.tif

#+END_SRC

#+RESULTS:
: 0...10...20...30...40...50...60...70...80...90...100 - done.

A slightly different tac, avoiding the issue of rasterizing which can
mess with resolution of things
#+begin_src R

  library(lidR)
  ctg2005norm <- catalog("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/")
  opt_output_files(ctg2005norm) <- "/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/{ORIGINALFILENAME}_trees"
  opt_filter(ctg2005norm) <- "-drop_single -drop_z_above 200 -drop_z_below 0"
  ttops <- shapefile("/media/erker/DATA_ERKER/data/madison_tree_inventories/MadisonTrees.shp")
  ttops <- spTransform(ttops, "+init=epsg:7599")
  chm <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/chm4.tif")
  algo <- silva2016(chm, ttops, max_cr_factor = .99)
  lastrees(ctg2005norm, algo)
#+end_src


#+begin_src R
  library(lidR)
  l <- readLAS("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/normalized/tile014_ground_normalized.las",
               filter = "-drop_single -drop_z_above 200 -drop_z_below 0")

  algo = pitfree(thresholds = c(0,10,20,30,40,50), subcircle = 2, max_edge = c(3, 1.5))
  chm  = grid_canopy(l, 3, algo)
  plot(chm, col = height.colors(50))
#+end_src

#+RESULTS:



#+begin_src R
hulls  = tree_hulls(las, func = .stdmetrics)
spplot(hulls, "Z")
#+end_src


#+begin_src R
  crowns <- raster("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tile014_tree_polys.tif")
  e <- drawExtent()
  ce <- crop(crowns, e)
  p <- rasterToPolygons(ce, dissolve = TRUE)
#+end_src




assign the maximum tree height to each tree polygon
#+begin_src R
    library(raster)

    polys <- list.files("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/", 
                        pattern = ".*tile[0-9]{3}_tree_polys.tif",
                        full.names = T)

    lapply(polys, function(poly) {
        tile <- str_extract(poly, "tile[0-9]{3}")
        tile <- str_extract(tile, "[0-9]{3}")
        polyr <- raster(poly)
        height <- raster(paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tile",tile,"_ground_normalized_chm6.tif"))

        z <- zonal(height, polyr, max)

        maxheight <- reclassify(polyr, z, filename = paste0("/media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/tile",tile,"_max_height.tif"),
                                overwrite = T)
    })

#+end_src

combine all max tree heights into one 2005 max tree height raster

#+BEGIN_SRC sh

cd /media/erker/DATA_ERKER/dd/madison_lidar_2005_heights/

gdalbuildvrt max_height_2005.vrt *_max_height.tif

gdal_translate -of GTiff -co "TILED=YES" -co "COMPRESS=LZW" max_height_2005.vrt max_height_2005.tif

#+END_SRC

#+RESULTS:
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |
|                                                Input | file | size  | is | 18285, | 13055 |
| 0...10...20...30...40...50...60...70...80...90...100 |    0 | done. |    |        |       |


* old way extracting heights with chm.
:PROPERTIES:
:ARCHIVE_TIME: 2019-10-30 Wed 09:30
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/extract heights from normalized lidar at location of trees/clip lidar to tree buffers and extract tallest return
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R


  res <- lapply(years, function(year) {
      in.dir <- paste0("/media/erker/DATA_ERKER/dd/madison_lidar_",year,"_heights/all_chm/")
      fs <- list.files(in.dir,
                       pattern = ".*.tif$")
      out <- lapply(fs, function(f) {
          r.v <- velox(paste0(in.dir, f))
          o <- r.v$extract(sp = p)
          o <- unlist(lapply(o, function(x) max(x, na.rm = T)))
          o
      })
      hgt <- apply(do.call("cbind",out),1, max)
      saveRDS(hgt, paste0("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_",year,".rds"))
      hgt
  })


#+end_src


* this is old way with CHM extracted heights assign heights to trees
:PROPERTIES:
:ARCHIVE_TIME: 2019-10-31 Thu 12:19
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/extract heights from normalized lidar at location of trees
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:
#+begin_src R
  trees@data$height2005 <- readRDS("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_2005.rds")
  trees@data$height2009 <- readRDS("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_2009.rds")
  trees@data$height2016 <- readRDS("/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/height_2016.rds")
#  shapefile(trees, "/media/erker/DATA_ERKER/dd/madison_tree_inventories/hgt/tree_sample_wHeight.shp")
#+end_src

#+RESULTS:

testing with subset
#+begin_src R
dir <- "/home/erker/hgt_data/"
treesa <- shapefile(paste0(dir,"/madison_tree_inventories/MadisonTrees_WithAttributes.shp"))
  treesa <- spTransform(treesa, crs("+init=epsg:7599"))
  e <- new("Extent", xmin = 826616.082997855, xmax = 828596.309091884, 
           ymin = 485978.641378534, ymax = 487311.522306307)

tae <- crop(treesa, e)

  tae@data$height2005 <- readRDS(paste0(dir, "/madison_tree_inventories/hgt/height_2005.rds"))
  tae@data$height2009 <- readRDS(paste0(dir, "/madison_tree_inventories/hgt/height_2009.rds"))
  tae@data$height2016 <- readRDS(paste0(dir, "/madison_tree_inventories/hgt/height_2016.rds"))


#+end_src

#+RESULTS:



* 820 reproducible example with and without assigning to water
:PROPERTIES:
:ARCHIVE_TIME: 2019-11-04 Mon 09:49
:ARCHIVE_FILE: ~/git/hgt/hgt.org
:ARCHIVE_OLPATH: Methods/work/creating normalized lidar and doing best to filter out tree points/2017 lidar
:ARCHIVE_CATEGORY: hgt
:ARCHIVE_ITAGS: work allo
:END:

Picnic Point on lake Mendota, an extreme example.

#+BEGIN_SRC sh :session a

cd ~/hgt_data/reproducibleexample/
wget ftp://ftp.ssec.wisc.edu/pub/wisconsinview/lidar/Dane/Dane_2017_3DEP_Delivery/Classified_LAS/ESRI/0820_esri.las

#+END_SRC


#+begin_src R
  library(lidR)
  l <- readLAS("/home/erker/hgt_data/reproducibleexample/0820_esri.las")
  plot(l, color = "Classification")


#    system.time(ln_keepwater <- lasnormalize(l, tin()))


  l@data$Classification[l@data$Classification == 9] <- 2L

  system.time(ln_removewater <- lasnormalize(l, tin()))


#+end_src

#+RESULTS:
: Loading required package: raster
: Loading required package: sp
: lidR 2.2.0 using 4 threads. Help on <gis.stackexchange.com>. Bug report on <github.com/Jean-Romain/lidR>.
: 
: Delaunay rasterization[======--------------------------------------------] 13% (4 threads)Delaunay rasterization[=======-------------------------------------------] 14% (4 threads)Delaunay rasterization[=======-------------------------------------------] 15% (4 threads)Delaunay rasterization[========------------------------------------------] 16% (4 threads)Delaunay rasterization[========------------------------------------------] 17% (4 threads)Delaunay rasterization[=========-----------------------------------------] 18% (4 threads)Delaunay rasterization[=========-----------------------------------------] 19% (4 threads)Delaunay rasterization[==========----------------------------------------] 20% (4 threads)Delaunay rasterization[==========----------------------------------------] 21% (4 threads)Delaunay rasterization[===========---------------------------------------] 22% (4 threads)Delaunay rasterization[===========---------------------------------------] 23% (4 threads)Delaunay rasterization[============--------------------------------------] 24% (4 threads)Delaunay rasterization[============--------------------------------------] 25% (4 threads)Delaunay rasterization[=============-------------------------------------] 26% (4 threads)Delaunay rasterization[=============-------------------------------------] 27% (4 threads)Delaunay rasterization[==============------------------------------------] 28% (4 threads)Delaunay rasterization[==============------------------------------------] 29% (4 threads)Delaunay rasterization[===============-----------------------------------] 30% (4 threads)Delaunay rasterization[===============-----------------------------------] 31% (4 threads)Delaunay rasterization[================----------------------------------] 32% (4 threads)Delaunay rasterization[================----------------------------------] 33% (4 threads)Delaunay rasterization[=================---------------------------------] 34% (4 threads)Delaunay rasterization[=================---------------------------------] 35% (4 threads)Delaunay rasterization[==================--------------------------------] 36% (4 threads)Delaunay rasterization[==================--------------------------------] 37% (4 threads)Delaunay rasterization[===================-------------------------------] 38% (4 threads)Delaunay rasterization[===================-------------------------------] 39% (4 threads)Delaunay rasterization[====================------------------------------] 40% (4 threads)Delaunay rasterization[====================------------------------------] 41% (4 threads)Delaunay rasterization[=====================-----------------------------] 42% (4 threads)Delaunay rasterization[=====================-----------------------------] 43% (4 threads)Delaunay rasterization[======================----------------------------] 44% (4 threads)Delaunay rasterization[======================----------------------------] 45% (4 threads)Delaunay rasterization[=======================---------------------------] 46% (4 threads)Delaunay rasterization[=======================---------------------------] 47% (4 threads)Delaunay rasterization[========================--------------------------] 48% (4 threads)Delaunay rasterization[========================--------------------------] 49% (4 threads)Delaunay rasterization[=========================-------------------------] 50% (4 threads)Delaunay rasterization[=========================-------------------------] 51% (4 threads)Delaunay rasterization[==========================------------------------] 52% (4 threads)Delaunay rasterization[==========================------------------------] 53% (4 threads)Delaunay rasterization[===========================-----------------------] 54% (4 threads)Delaunay rasterization[===========================-----------------------] 55% (4 threads)Delaunay rasterization[============================----------------------] 56% (4 threads)Delaunay rasterization[============================----------------------] 57% (4 threads)Delaunay rasterization[=============================---------------------] 58% (4 threads)Delaunay rasterization[=============================---------------------] 59% (4 threads)Delaunay rasterization[==============================--------------------] 60% (4 threads)Delaunay rasterization[==============================--------------------] 61% (4 threads)Delaunay rasterization[===============================-------------------] 62% (4 threads)Delaunay rasterization[===============================-------------------] 63% (4 threads)Delaunay rasterization[================================------------------] 64% (4 threads)Delaunay rasterization[================================------------------] 65% (4 threads)Delaunay rasterization[=================================-----------------] 66% (4 threads)Delaunay rasterization[=================================-----------------] 67% (4 threads)Delaunay rasterization[==================================----------------] 68% (4 threads)Delaunay rasterization[==================================----------------] 69% (4 threads)Delaunay rasterization[===================================---------------] 70% (4 threads)Delaunay rasterization[===================================---------------] 71% (4 threads)Delaunay rasterization[====================================--------------] 72% (4 threads)Delaunay rasterization[====================================--------------] 73% (4 threads)Delaunay rasterization[=====================================-------------] 74% (4 threads)Delaunay rasterization[=====================================-------------] 75% (4 threads)Delaunay rasterization[======================================------------] 76% (4 threads)Delaunay rasterization[======================================------------] 77% (4 threads)Delaunay rasterization[=======================================-----------] 78% (4 threads)Delaunay rasterization[=======================================-----------] 79% (4 threads)Delaunay rasterization[========================================----------] 80% (4 threads)Delaunay rasterization[========================================----------] 81% (4 threads)Delaunay rasterization[=========================================---------] 82% (4 threads)Delaunay rasterization[=========================================---------] 83% (4 threads)Delaunay rasterization[==========================================--------] 84% (4 threads)Delaunay rasterization[==========================================--------] 85% (4 threads)Delaunay rasterization[===========================================-------] 86% (4 threads)Delaunay rasterization[===========================================-------] 87% (4 threads)Delaunay rasterization[============================================------] 88% (4 threads)Delaunay rasterization[============================================------] 89% (4 threads)Delaunay rasterization[=============================================-----] 90% (4 threads)Delaunay rasterization[=============================================-----] 91% (4 threads)Delaunay rasterization[==============================================----] 92% (4 threads)Delaunay rasterization[==============================================----] 93% (4 threads)Delaunay rasterization[===============================================---] 94% (4 threads)Delaunay rasterization[===============================================---] 95% (4 threads)Delaunay rasterization[================================================--] 96% (4 threads)Delaunay rasterization[================================================--] 97% (4 threads)Delaunay rasterization[=================================================-] 98% (4 threads)Delaunay rasterization[=================================================-] 99% (4 threads)Delaunay rasterization[==================================================] 100% (4 threads)   user  system elapsed 
:  23.818   0.489  14.264 
: Warning messages:
: 1: There were 6 degenerated ground points. Some X Y Z coordinates were repeated. They were removed. 
: 2: There were 91 degenerated ground points. Some X Y coordinates were repeated but with different Z coordinates. min Z were retained.



