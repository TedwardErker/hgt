devtools::install_github("Jean-Romain/rlas")
devtools::install_github("Jean-Romain/lidR")
install.packages("devtools")
devtools::install_github("Jean-Romain/rlas")
devtools::install_github("Jean-Romain/lidR")
1
devtools::install_github("Jean-Romain/rlas")
devtools::install_github("Jean-Romain/lidR")
1
install.packages("Cairo")
install.packages("Cairo")
install.packages("Cairo")
devtools::install_github("Jean-Romain/rlas")
devtools::install_github("Jean-Romain/lidR")
1
plot(l)
plot(ls, color = "Colinear")
plot(lsp)
readLAS
?readLAS
rlas:::lasfilterusage()
plot(l)
plot(l)
plot(l, color = "Return")
l
plot(l, color = "ReturnNumber")
plot(l, color = "ReturnNumber")
plot(l, color = "ReturnNumber")
plot(l, color = "ReturnNumber")
plot(l, color = "ReturnNumber")
?lasdetectshape
install.packages("BiocManager") 
BiocManager::install("EBImage")
n
install.packages("fftw")
install.packages("BiocManager") 
BiocManager::install("EBImage")
n
library(EBImage)
?dilate
o
matplot(o)
plot(o)
display(o)
head(o)
head(o, 100)
k
?Image
p
display(o)
o
rm(o)
?array
matrixplot(o)
image(o)
image(o)
library(mmand)
install.packages("mmand")
library(mmand)
??mmand
?open
?dilate
?erode
?dilate
?dilate
??vox
v
plot(v)
?as.array
?grid_metrics3d}
?grid_metrics3d
str(gm)
plot(gm)
?mode
str(gm)
str(gm)
plot(gm, color = Z)
plot(gm, color = "Z")
voxels
gm
gm
head(lsp@data$Classification)
head(lsp@data$Classification)
gm
plot(gm, color = "mode")
gm
plot(gm)
plot(gm, col = "mode")
plot(gm, color = "mode")
gm
plot(gm, color = "mode", col = c("red", "green"))
gm
str(gm)
plot(gm, color = "tree")
plot(gm)
plot(gm)
head(gm)
summary(gm)
str(gm)
plot(gm)
plot(r)
voxels
plot(voxels, color = "imean", trim = 100)
las
plot(las, color= "Classification")
plot(gm)
plot(lp)
plot(lp, color = "Coplanar")
gmcoplanar
gm
gmclass
gmcoplanar
gmcoplanar
gmclass
str(voxels)
summary(gmcoplanar)
table(gmcoplanar)
table(gmcoplanar$mode)
gmcoplanar
rm(ls = list())
rm(list = ls())
las
gmcoplanar
?point_metrics
?pointmetrics
LASfile <- system.file("extdata", "Megaplot.laz", package="lidR")
las = readLAS(LASfile)

Rcpp::sourceCpp(code = "
// [[Rcpp::depends(RcppArmadillo)]]

// [[Rcpp::export]]
SEXP eigen_values(arma::mat A) {  
arma::mat coeff;
arma::mat score;
arma::vec latent;
arma::princomp(coeff, score, latent, A);
return(Rcpp::wrap(latent));
}")

plane_metrics = function(x,y,z, th1 = 25, th2 = 6) {
  xyz <- cbind(x,y,z) 
  eigen_m <- eigen_values(xyz)
  is_planar <- eigen_m[2] > (th1*eigen_m[3]) && (th2*eigen_m[2]) > eigen_m[1]
  return(list(planar = is_planar))
}

system.time(M <- point_metrics(las, ~plane_metrics(X,Y,Z), k = 8))
install.packages("devtools")
?install_github
?point_metrics
?point_metrics
library(lidR)
library(lidR)
?point_metrics
lidR
?grid_metrics3d
??point_metrics
lsp
??point_metrics
??point_metrics
lidR
library(lidR)
l
plot(l)
lsp
head(lsp@data)
l
plot(l)
?point_metrics
plot(l)
l
?lasadddata
plot(lsp, color = "pct_x", trim = 1)
plot(lsp, color = "pct_x")
str(l)
str(lsp)
plot(lsp, color = "pct_x")
?lasfilter
pm
summary(lsp@data$building)
mean(lsp@data$building)
mean(lsp@data$building)
mean(lsp@data$building)
ls
l
plot(lf)
plot(lfl, color = "building")
plot(l, color = "Classification")
plot(l, color = "Classification")
str(l)
