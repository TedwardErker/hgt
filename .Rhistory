plot(trees20m[1:10,])
plot(trees100m[1:10,])
str(d)
str(d)
str(d)
str(d)
summary(d$pct_imp_20m)
?case_when
str(d)
importance(mrf)
str(importance(mrf))
str(d)
unique(d$Genus)
trees
colnames(trees)
colnames(trees@data)
head(trees@data)
stt <- read.csv("/home/erker/hgt_data/madison_tree_inventories/STTREES.csv")
str(stt)
summary(stt$UTILPRES)
table(stt$UTILPRES)
str(stt)
str(d)
unique(select(d, powerlines, street))
?case_when
)
ggplot(d, aes(x = x, y = y, color = street_powerlines)) + geom_point()
ggplot(d, aes(x = x, y = y, color = street_powerlines)) + geom_point(alpha = .1)
ggplot(d, aes(x = x, y = y, color = street_powerlines)) + geom_point(size = .1)
p <- ggplot(d, aes(x = x, y = y, color = street_powerlines)) + geom_point(size = .1)
library(plotly)
plotly(p)
ggplotly(p)
ggplotly(p)
p <- ggplot(d, aes(x = x, y = y, color = street_powerlines)) + geom_point(size = 1)
ggplotly(p)
str(d)
?lm
str(dc)
str(dc)
str(dc)
str(d0
str(d)
str(d)
str(d)
str(dc)
ibrary(broom)
reg <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
ggcoef(reg)
d <- as.data.frame(Titanic)
reg2 <- glm(Survived ~ Sex + Age + Class, family = binomial, data = d, weights = d$Freq)
ggcoef(reg2, exponentiate = TRUE)
ggcoef(
  reg2, exponentiate = TRUE, exclude_intercept = TRUE,
  errorbar_height = .2, color = "blue", sort = "ascending"
)
library(broom)
install.packages("broom")
library(broom)
reg <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
ggcoef(reg)
d <- as.data.frame(Titanic)
reg2 <- glm(Survived ~ Sex + Age + Class, family = binomial, data = d, weights = d$Freq)
ggcoef(reg2, exponentiate = TRUE)
ggcoef(
  reg2, exponentiate = TRUE, exclude_intercept = TRUE,
  errorbar_height = .2, color = "blue", sort = "ascending"
)
library(GGally)
library(GGally)
library(broom)
reg <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
ggcoef(reg)
d <- as.data.frame(Titanic)
reg2 <- glm(Survived ~ Sex + Age + Class, family = binomial, data = d, weights = d$Freq)
ggcoef(reg2, exponentiate = TRUE)
ggcoef(
  reg2, exponentiate = TRUE, exclude_intercept = TRUE,
  errorbar_height = .2, color = "blue", sort = "ascending"
)
str(dc)
unique(dc$st_po)
unique(dc$st_po)
str(dc)
)
str(mc)
str(tr)
?standardize
?scale
str(dc)
?scale_color_brewer
m.quercus
tidy(m.quers)
tidy(m.quercus)
tidy(m.quercus)$term
?facet_wrap
str(d)
m.quercus
tidy(m.quercus)$term
tidy(m.quercus)$term
mc
summary(d$pct_imp_100m)
summary(d$pct_imp_20m)
)
?filter
)
?filter
mc
str(dc)
sqrt(.0140445)
cite(randomForest)
?cite
cite("randomForest")
??randomForest
?randomForest
library(orgUtils)
library(orgutils)
?plot_min_depth_interactions
library(ggplot2)
interactions_frame
str(interactions_frame)
?reorder_fct
?fct_reorder
mrf
install.packages("emmeans")
em
m5
m5.largesampleGenus
plot(em, comparisons = T) 
?pwpp
table(unique(dc$Genus))
table(dc$Genus)
m60
m7
nd
nd
m7
summary(m7)
summary(dc$st_po)
unique(dc$st_po)
table(dc$st_po)
m7
nd
p
m7
m7
nd
nd
p
?predict
m7
m8
m5
str(dc)
m7
m7
m7.largesampleGenus
summary(m7.largesampleGenus)
dc %>% group_by(Genus, st_po) %>% summarize(n())
m7.largesampleGenus
str(dc)
m7.largesampleGenus
summary(m7.largesampleGenus)
summary(m7.largesampleGenus)
str(h)
str(poly(h$cor_max2005,4))
colnames(poly(h$cor_max2005,4))
?bind_cols
str(h)
str(polyheight2005)
m0
summary(m0)
summary(m0)
pct(m0)
summary(m0)
str(dc)
m7
m15
summry(m15)
summary(m15)
AIC(m1, m15)
?emmeans
?scale_x_continuous
?scales::trans_new
scale_by_10
em
em
str(em)
nd
nd
expand.grid
unique(dc$st_po)
str(dc)
p
str(nd)
quantile(dc$cor_max2009, probs = seq(.9,1,.05))
quantile(dc$cor_max2009, probs = seq(.9,1,.01))
m7
unique(dc$st_po)
?predict
?predict.lm
p
p
str(nd)
quantile(dc$cor_max2009, probs = seq(0,.1,.01))
m7
nd
nd
nd
str(p)
unique(dc$st_po)
install.packages("viridis")
library(viridis)
?scale_color_viridis
brewer.pal
brewer.pal()
pal()
??brewer.pal
brewer.pal(3, "RdYlGn")
RColorBreewer::brewer.pal(3, "RdYlGn")
RColorBrewer::brewer.pal(3, "RdYlGn")
?scale_color_gradient2
RColorBrewer::brewer.pal(3, "RdYlGn")
RColorBrewer::display.brewer.pal(3, "RdYlGn")
RColorBrewer::display.brewer.pal(3, "RdYlGn")
RColorBrewer::display.brewer.pal(5, "RdYlGn")
RColorBrewer::brewer.pal(5, "RdYlGn")
RColorBrewer::brewer.pal(5, "RdYlGn")
?theme
m7
summary(m7)
20^2 / 100^2
mt
tidy(m7)
tidy(m7) %>% data.frame
sin(45 * 180/ pi)
sin(45 * 180/ pi) + 1
sin(45 + 45 * 180/ pi) + 1
sin((45 + 45) * 180/ pi) + 1
sin((180 + 45) * 180/ pi) + 1
sin((0 + 45) * 180/ pi) + 1
sin((90 + 45) * 180/ pi) + 1
plot(1:360, sin((1:360 + 45) * 180/ pi) + 1)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot(1:360, sin((1:360 + 45) * 180/ pi) + 1)
plot(seq(1,360,20), sin((seq(1,360,20) + 45) * 180/ pi) + 1)
sin((seq(1,360,20) + 45) * 180/ pi) + 1
mt
mt
dev.off(
)
)
dev.off()
dev.off()
dev.off()
str(mt)
?terrain
str(dc)
m5
tidy(m5)
tidy(m5) %>% data.frame
mt$term
dput(mt$term)
dput(sort(table(dc$Genus)))
dput(sort(-table(dc$Genus)))
str(eg)
unique(eg$Genus)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
brewer.pal
brewer.pal(8, "Accent")
library(RColorBrewer)
brewer.pal(8, "Accent")
display.brewer.pal(8, "Accent")
display.brewer.pal(8, "Dark2")
display.brewer.pal(8, "Accent")
display.brewer.pal(8, "Dark2")
display.brewer.pal(8, "Accent")
display.brewer.pal(8, "Dark2")
display.brewer.pal(8, "Accent")
display.brewer.pal(8, "Accent")
display.brewer.pal(8, "Accent")
str(dc)
basemt
summary(m5)
summary(dc)
summary(m5)
summary(m5)
x
y
?rnorm
summary(m5)
basemt
tidy(m5)
tidy(m5) %>% data.frame
tidy(m5) %>% data.frame
AIC(m5)
AIC(m5)
summary(m_genus)
summary(m_genus)
summary(m_genus)
summary(m5)
summary(m5)
mt
?grep
?regmathes
?regmatches
?str_extract
mtng
mtg
str(mt)
str(mt)
c(mtg$Genus)
summary(m_genus)
summary(m_genus)
mtng
mtg
mt
str(mt)
mtng$term
trait
mtng
str(mtng)
str(mtg)
?scale_x_continuous
psi
450 * 1.6
?ggtitle
?theme_tufte
str(nd)
str(nd)
head(nd)
str(nd)
str(nd)
head(nd)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
tidy(m_genus)
tidy(m_genus) %>% data.frame
tidy(m_genus) %>% data.frame
tidy(m_nogenus) %>% data.frame
m_genus
summary(m_genus)
summary(m_superbasic)
169504.6 - 167381.3
342 - 27
summary(m_genus)
summary(m_nogenus)
summary(m_genus)
summary(m_genus_notrait)
summary(m_genus)
r.squared(m_genus)
(m_genus)$r.squared
m_genus$r.squared
summary(m_genus)$r.squared
summary(m_genus_notrait)$r.squared
summary(m_genus_notrait)$r.squared.adj
str(summary(m_genus_notrait))
summary(m_genus_notrait)$adj.r.squared
summary(m_genus)$adj.r.squared
str(dc)
dc$pred_wGenus <- predict(m_genus)
ggplot(dc, aes(x = growth.rate, y = pred_wGenus)) + geom_point()
ggplot(dc@data, aes(x = growth.rate, y = pred_wGenus)) + geom_point()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
ggplot(dc@data, aes(x = growth.rate, y = pred_wGenus)) + geom_point()
ggplot(dc@data, aes(x = growth.rate, y = pred_wGenus)) + geom_point(alpha = .1)
ggplot(dc@data, aes(x = growth.rate, y = pred_wGenus)) + geom_point(alpha = .1) +
abline(m = 1)
?geom_abline
AIC(m_genus)
AIC(m_nogenus, m_genus)
head(nd)
filter(nd, fit < 1)
filter(nd, fit < 1)
filter(nd, fit < 1, fit > -1)
summary(dc$elev)
20 * .85
10 * .85
?emmeans
dev.off()
dev.off()
mtng
m_nogenus
?terrain
m_genus$adj.r.squared
m_genus$adj.rsquared
summary(m_nogenus)
p
ctg
?grid_metrics
?opt_select
n
?n
gm
gm
)
summary(v)
2347 / 10000
?grid_density
k
summary(m_genus_nochl)
summary(m_genus_dropchl)
summary(m_genus_dropchl)
summary(m_genus_dropchl)
summary(m_nogenus_dropchl)
summary(m_nogenus_onlyN)
summary(m_nogenus_onlychl)
summary(m_chl)
summary(m_N)
summary(m_N)
summary(m_chl)
summary(m_chl)
summary(m_N)
8 + 3 + 6
1000000 / 17
1000000 / 17
str(v)
?grid_density
install.packages("sjPlot")
?plot_model
plot_model(m_nogenus_NHeightint, type = "est", terms = c("cor_max2005", "N"))
vge
vge
summary(vge)
unique(dc$st_po)
str(dc)
shapefile(dc, "test.shp")
shapefile(dc, "test.shp", overwrite = T)
str(dc)
str(dc)
m_genus2009
summary(m_genus2009)
str(dc)
library(mgcv)
?mgcv
str(dc@data)
?gam
summary(m_genus2009)
str(dc)
str(dc)
plot(m_genus2009)
?s
plot(m_genus2009)
plot(m_genus2009)
plot(m_genus2009)
plot(m_genus2009)
summary(m_genus2009)
summary(m_nogenus2009)
vg.rd
str(f)
summary(mf)
vg.rd
summary(f)
summary(mf)
plot(dc)
plot(dcs)
plot(dc)
